/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ProjetoPizzaria.view;

import ProjetoPizzaria.DAO.IngredientesPizzaDAO;
import ProjetoPizzaria.modelo.IngredientesPizza;
import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Casa
 */
public class IFrmPesquisarIngrediente extends javax.swing.JInternalFrame {

    /**
     * Creates new form IFrmPesquisarIngrediente
     */
    public IFrmPesquisarIngrediente() {
        initComponents();
         getContentPane().setBackground(Color.white);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GrupoDeBotao1 = new javax.swing.ButtonGroup();
        GrupoDeBotao2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtQuantidade = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        CbTipoUnidade = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        RbMaior = new javax.swing.JRadioButton();
        RbMenor = new javax.swing.JRadioButton();
        RbIgual = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TblIngredientes = new javax.swing.JTable();
        BtnConfirmar = new javax.swing.JButton();
        CkNomeIngrediente = new javax.swing.JCheckBox();
        CkQuantidade = new javax.swing.JCheckBox();
        CkTipoUnidade = new javax.swing.JCheckBox();
        CbPesquisa = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Pesquisar Ingredientes");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Id do Ingrediente:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Nome do Ingrediente:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Quantidade em estoque:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Tipo de Unidade(Medida):");

        CbTipoUnidade.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CbTipoUnidade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Gramas", "Mili-Litros", "Unidades" }));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Deseja realizar sua pesquisa por:");

        GrupoDeBotao1.add(RbMaior);
        RbMaior.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        RbMaior.setText("Maior que");

        GrupoDeBotao1.add(RbMenor);
        RbMenor.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        RbMenor.setText("Menor que");

        GrupoDeBotao1.add(RbIgual);
        RbIgual.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        RbIgual.setText("Igual");

        TblIngredientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome do Ingrediente", "Tipo de Medida", "Quantidade em estoque ", "Quantidade máxima", "Quantidade mínima"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TblIngredientes.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(TblIngredientes);
        if (TblIngredientes.getColumnModel().getColumnCount() > 0) {
            TblIngredientes.getColumnModel().getColumn(0).setPreferredWidth(50);
            TblIngredientes.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        BtnConfirmar.setBackground(new java.awt.Color(255, 51, 51));
        BtnConfirmar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        BtnConfirmar.setForeground(new java.awt.Color(255, 255, 255));
        BtnConfirmar.setText("Confirmar");
        BtnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnConfirmarActionPerformed(evt);
            }
        });

        CkNomeIngrediente.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CkNomeIngrediente.setText("Nome do ingrediente");
        CkNomeIngrediente.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                CkNomeIngredienteStateChanged(evt);
            }
        });
        CkNomeIngrediente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CkNomeIngredienteActionPerformed(evt);
            }
        });

        CkQuantidade.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CkQuantidade.setText("Quantidade em estoque");
        CkQuantidade.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                CkQuantidadeStateChanged(evt);
            }
        });
        CkQuantidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CkQuantidadeActionPerformed(evt);
            }
        });

        CkTipoUnidade.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CkTipoUnidade.setText("Tipo de unidade");
        CkTipoUnidade.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                CkTipoUnidadeStateChanged(evt);
            }
        });
        CkTipoUnidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CkTipoUnidadeActionPerformed(evt);
            }
        });

        CbPesquisa.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CbPesquisa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Sem critérios", "ID", "Pesquisar Por..." }));
        CbPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CbPesquisaActionPerformed(evt);
            }
        });

        jLabel6.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jLabel6AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(321, 321, 321)
                .addComponent(BtnConfirmar)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 104, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(CbTipoUnidade, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtQuantidade)))
                                .addGap(18, 18, 18)
                                .addComponent(RbMaior)
                                .addGap(59, 59, 59)
                                .addComponent(RbMenor)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RbIgual)
                        .addGap(70, 70, 70))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(CbPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CkNomeIngrediente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CkQuantidade)
                        .addGap(129, 129, 129)
                        .addComponent(CkTipoUnidade)
                        .addGap(29, 29, 29))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CbPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CkNomeIngrediente)
                    .addComponent(CkQuantidade)
                    .addComponent(CkTipoUnidade))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RbMaior)
                    .addComponent(RbMenor)
                    .addComponent(RbIgual))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(CbTipoUnidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(BtnConfirmar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        txtID.setEditable(false);
        txtNome.setEditable(false);
        txtQuantidade.setEditable(false);
        CbTipoUnidade.setEnabled(false);
        RbIgual.setEnabled(false);
        RbMaior.setEnabled(false);
        RbMenor.setEnabled(false);
        txtID.setBackground(Color.lightGray);
        txtNome.setBackground(Color.lightGray);
        txtQuantidade.setBackground(Color.lightGray);
        CbTipoUnidade.setBackground(Color.lightGray);
        BtnConfirmar.setEnabled(false);
          CkNomeIngrediente.setEnabled(false);
                CkQuantidade.setEnabled(false);
                CkTipoUnidade.setEnabled(false);

    }//GEN-LAST:event_formInternalFrameOpened

    private void CkNomeIngredienteStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_CkNomeIngredienteStateChanged


    }//GEN-LAST:event_CkNomeIngredienteStateChanged

    private void CbPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CbPesquisaActionPerformed
        switch (CbPesquisa.getSelectedIndex()) {
            case 0:
                //Selecione
                CkNomeIngrediente.setEnabled(false);
                CkQuantidade.setEnabled(false);
                CkTipoUnidade.setEnabled(false);
                txtID.setEditable(false);
                txtID.setBackground(Color.lightGray);
                txtID.setText("");
                BtnConfirmar.setEnabled(false);
                txtNome.setEditable(false);
                txtQuantidade.setEditable(false);
                CbTipoUnidade.setEnabled(false);
                RbIgual.setEnabled(false);
                RbMaior.setEnabled(false);
                RbMenor.setEnabled(false);
                txtNome.setText("");
                txtNome.setBackground(Color.lightGray);
                txtQuantidade.setBackground(Color.lightGray);
                txtQuantidade.setText("");
                CbTipoUnidade.setBackground(Color.lightGray);
                break;
            case 1:
                //sem critérios
                CkNomeIngrediente.setEnabled(false);
                CkQuantidade.setEnabled(false);
                CkTipoUnidade.setEnabled(false);
                CkNomeIngrediente.setSelected(false);
                CkQuantidade.setSelected(false);
                CkTipoUnidade.setSelected(false);
                txtID.setEditable(false);
                txtID.setBackground(Color.lightGray);
                txtID.setText("");
                BtnConfirmar.setEnabled(true);
                txtNome.setEditable(false);
                txtNome.setBackground(Color.lightGray);
                txtNome.setText("");
                CbTipoUnidade.setEnabled(false);
                RbIgual.setEnabled(false);
                RbMenor.setEnabled(false);
                RbMaior.setEnabled(false);
                txtQuantidade.setEditable(false);
                txtQuantidade.setBackground(Color.lightGray);
                txtQuantidade.setText("");
                break;
            case 2:
                //por id
                CkNomeIngrediente.setEnabled(false);
                CkQuantidade.setEnabled(false);
                CkTipoUnidade.setEnabled(false);
                CkNomeIngrediente.setSelected(false);
                CkQuantidade.setSelected(false);
                CkTipoUnidade.setSelected(false);
                txtID.setEditable(true);
                txtID.setBackground(Color.white);
                BtnConfirmar.setEnabled(true);
                txtNome.setEditable(false);
                txtNome.setText("");
                txtQuantidade.setEditable(false);
                CbTipoUnidade.setEnabled(false);
                RbIgual.setEnabled(false);
                RbMaior.setEnabled(false);
                RbMenor.setEnabled(false);
                txtNome.setBackground(Color.lightGray);
                txtQuantidade.setBackground(Color.lightGray);
                txtQuantidade.setText("");
                CbTipoUnidade.setBackground(Color.lightGray);
                break;
            case 3:
                CkNomeIngrediente.setEnabled(true);
                CkQuantidade.setEnabled(true);
                CkTipoUnidade.setEnabled(true);
                txtID.setEditable(false);
                txtID.setBackground(Color.lightGray);
                txtID.setText("");
                BtnConfirmar.setEnabled(false);
                txtNome.setEditable(false);
                txtQuantidade.setEditable(false);
                CbTipoUnidade.setEnabled(false);
                RbIgual.setEnabled(false);
                RbMaior.setEnabled(false);
                RbMenor.setEnabled(false);
                txtNome.setText("");
                txtNome.setBackground(Color.lightGray);
                txtQuantidade.setBackground(Color.lightGray);
                txtQuantidade.setText("");
                CbTipoUnidade.setBackground(Color.lightGray);
                
                break;

        }
    }//GEN-LAST:event_CbPesquisaActionPerformed

    private void CkQuantidadeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_CkQuantidadeStateChanged


    }//GEN-LAST:event_CkQuantidadeStateChanged

    private void CkTipoUnidadeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_CkTipoUnidadeStateChanged


    }//GEN-LAST:event_CkTipoUnidadeStateChanged

    private void BtnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnConfirmarActionPerformed
        DefaultTableModel model = (DefaultTableModel) TblIngredientes.getModel();
        model.setRowCount(0);
          IngredientesPizza ingPizza = new IngredientesPizza();
          IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
        switch (CbPesquisa.getSelectedIndex()) {
            case 0:
                
                break;
            case 1:
                
                dao.PesquisarTudo(ingPizza, TblIngredientes);
                break;
            case 2:

                try {
                    int x = Integer.parseInt(txtID.getText());
                    if (x < 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, insira um ID válido", "ID inválido", JOptionPane.OK_OPTION);
                        txtID.setText("");
                        txtID.requestFocus();
                        txtID.setBackground(Color.pink);
                    } else {
                        txtID.setBackground(Color.white);
                        IngredientesPizza ingPizza2 = new IngredientesPizza();
                        IngredientesPizzaDAO dao2 = new IngredientesPizzaDAO();
                        dao2.PesquisarPorID(ingPizza2, TblIngredientes, txtID);
                        if (TblIngredientes.getRowCount() == 0) {
                            JOptionPane.showMessageDialog(null, "Nenhum registro encontrado!", "Nenhum registro", JOptionPane.OK_OPTION);
                            txtID.setText("");
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, insira um ID válido", "ID inválido", JOptionPane.OK_OPTION);
                    txtID.setText("");
                    txtID.requestFocus();
                    txtID.setBackground(Color.pink);
                }

                break;
            case 3:
                if (CkNomeIngrediente.isSelected() && CkQuantidade.isSelected() && CkTipoUnidade.isSelected() && RbIgual.isSelected()) {
                    if (txtNome.getText().equals("")) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do ingrediente", "Preencher nome", JOptionPane.OK_OPTION);
                    } else if (CbTipoUnidade.getSelectedIndex() == 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de medida", "Selecionar tipo", JOptionPane.OK_OPTION);
                    } else {
                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q < 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                                txtQuantidade.setText("");
                                txtQuantidade.requestFocus();
                                txtQuantidade.setBackground(Color.pink);
                            } else {
                                txtQuantidade.setBackground(Color.white);
                                dao.PesquisarPorNome_Quantidade_Tipo_IGUAL(ingPizza, TblIngredientes, txtNome, txtQuantidade, CbTipoUnidade);
                                if (TblIngredientes.getRowCount() == 0) {
                                    JOptionPane.showMessageDialog(null, "Nenhum registro encontrado!", "Nenhum registro", JOptionPane.OK_OPTION);
                                    txtNome.setText("");
                                    txtQuantidade.setText("");
                                    CbTipoUnidade.setSelectedIndex(0);

                                } else {
                                    JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso.", "Atenção", JOptionPane.OK_OPTION);
                                }

                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                            txtQuantidade.setText("");
                            txtQuantidade.requestFocus();
                            txtQuantidade.setBackground(Color.pink);
                        }

                    }
                } else if (CkNomeIngrediente.isSelected() && CkQuantidade.isSelected() && CkTipoUnidade.isSelected() && RbMenor.isSelected()) {
                    if (txtNome.getText().equals("")) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do ingrediente", "Preencher nome", JOptionPane.OK_OPTION);
                    } else if (CbTipoUnidade.getSelectedIndex() == 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de medida", "Selecionar tipo", JOptionPane.OK_OPTION);
                    } else {
                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q < 0) {

                                JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                                txtQuantidade.setText("");
                                txtQuantidade.requestFocus();
                                txtQuantidade.setBackground(Color.pink);
                            } else {
                                txtQuantidade.setBackground(Color.white);
                               
                                dao.PesquisarPorNome_Quantidade_Tipo_MENOR(ingPizza, TblIngredientes, txtNome, txtQuantidade, CbTipoUnidade);
                                if (TblIngredientes.getRowCount() == 0) {
                                    JOptionPane.showMessageDialog(null, "Nenhum registro encontrado!", "Nenhum registro", JOptionPane.OK_OPTION);
                                    txtNome.setText("");
                                    txtQuantidade.setText("");
                                    CbTipoUnidade.setSelectedIndex(0);
                                } else {
                                    JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso.", "Atenção", JOptionPane.OK_OPTION);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, preecha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                            txtQuantidade.setText("");
                            txtQuantidade.requestFocus();
                            txtQuantidade.setBackground(Color.pink);
                        }

                    }
                } else if (CkNomeIngrediente.isSelected() && CkQuantidade.isSelected() && CkTipoUnidade.isSelected() && RbMaior.isSelected()) {
                    if (txtNome.getText().equals("")) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do ingrediente", "Preencher nome", JOptionPane.OK_OPTION);
                    } else if (CbTipoUnidade.getSelectedIndex() == 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de medida", "Selecione o tipo", JOptionPane.OK_OPTION);
                    } else {
                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q < 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                                txtQuantidade.setText("");
                                txtQuantidade.requestFocus();
                                txtQuantidade.setBackground(Color.pink);
                            } else {
                                txtQuantidade.setBackground(Color.white);
                                
                                dao.PesquisarPorNome_Quantidade_Tipo_MAIOR(ingPizza, TblIngredientes, txtNome, txtQuantidade, CbTipoUnidade);
                                if (TblIngredientes.getRowCount() == 0) {
                                    JOptionPane.showMessageDialog(null, "Nenhum registro encontrado!", "Nenhum registro", JOptionPane.OK_OPTION);
                                    txtNome.setText("");
                                    txtQuantidade.setText("");
                                    CbTipoUnidade.setSelectedIndex(0);
                                } else {
                                    JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso.", "Atenção", JOptionPane.OK_OPTION);

                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                            txtQuantidade.setText("");
                            txtQuantidade.requestFocus();
                            txtQuantidade.setBackground(Color.pink);
                        }

                    }
                } else if (CkNomeIngrediente.isSelected() && CkTipoUnidade.isSelected()) {
                    if (txtNome.getText().equals("")) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do ingrediente", "Preencher nome", JOptionPane.OK_OPTION);
                    } else if (CbTipoUnidade.getSelectedIndex() == 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de medida", "Selecionar o tipo", JOptionPane.OK_OPTION);
                    } else {
                      
                        dao.PesquisarPorNome_Tipo(ingPizza, TblIngredientes, txtNome, CbTipoUnidade);
                        if (TblIngredientes.getRowCount() == 0) {
                            JOptionPane.showMessageDialog(null, "Nenhum registro encontrado!", "Nenhum registro", JOptionPane.OK_OPTION);
                            txtNome.setText("");
                            CbTipoUnidade.setSelectedIndex(0);

                        } else {
                            JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso.", "Atenção", JOptionPane.OK_OPTION);
                        }
                    }
                } else if (CkNomeIngrediente.isSelected() && CkQuantidade.isSelected() && RbIgual.isSelected()) {
                    if (txtNome.getText().equals("")) {
                        JOptionPane.showMessageDialog(null, "Por favor preencha o nome do ingrediente", "Preencher nome", JOptionPane.OK_OPTION);
                    } else {
                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());

                            if (q < 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                                txtQuantidade.setText("");
                                txtQuantidade.requestFocus();
                                txtQuantidade.setBackground(Color.pink);
                            } else {
                                txtQuantidade.setBackground(Color.white);
                                
                                dao.PesquisarPorNome_Quantidade_IGUAL(ingPizza, TblIngredientes, txtNome, txtQuantidade);
                                if (TblIngredientes.getRowCount() == 0) {
                                    JOptionPane.showMessageDialog(null, "Nenhum registro encontrado!", "Nenhum registro", JOptionPane.OK_OPTION);
                                    txtNome.setText("");
                                    txtQuantidade.setText("");
                                } else {
                                    JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso.", "Atenção", JOptionPane.OK_OPTION);
                                }

                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                            txtQuantidade.setText("");
                            txtQuantidade.requestFocus();
                            txtQuantidade.setBackground(Color.pink);
                        }

                    }
                } else if (CkNomeIngrediente.isSelected() && CkQuantidade.isSelected() && RbMaior.isSelected()) {
                    if (txtNome.getText().equals("")) {
                        JOptionPane.showMessageDialog(null, "Por favor preencha o nome do ingrediente", "Preencher nome", JOptionPane.OK_OPTION);
                    } else {
                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q < 0) {

                                JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                                txtQuantidade.setText("");
                                txtQuantidade.requestFocus();
                                txtQuantidade.setBackground(Color.pink);
                            } else {
                                txtQuantidade.setBackground(Color.white);
                              
                                dao.PesquisarPorNome_Quantidade_MAIOR(ingPizza, TblIngredientes, txtNome, txtQuantidade);
                                if (TblIngredientes.getRowCount() == 0) {
                                    JOptionPane.showMessageDialog(null, "Nenhum registro encontrado!", "Nenhum registro", JOptionPane.OK_OPTION);
                                    txtNome.setText("");
                                    txtQuantidade.setText("");

                                } else {
                                    JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso.", "Atenção", JOptionPane.OK_OPTION);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade correamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                            txtQuantidade.setText("");
                            txtQuantidade.requestFocus();
                            txtQuantidade.setBackground(Color.pink);
                        }

                    }
                } else if (CkNomeIngrediente.isSelected() && CkQuantidade.isSelected() && RbMenor.isSelected()) {
                    if (txtNome.getText().equals("")) {
                        JOptionPane.showMessageDialog(null, "Por favor preencha o nome do ingrediente", "Preencher nome", JOptionPane.OK_OPTION);
                    } else {
                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q < 0) {

                                JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                                txtQuantidade.setText("");
                                txtQuantidade.requestFocus();
                                txtQuantidade.setBackground(Color.pink);
                            } else {
                                txtQuantidade.setBackground(Color.white);
                               
                                dao.PesquisarPorNome_Quantidade_MENOR(ingPizza, TblIngredientes, txtNome, txtQuantidade);
                                if (TblIngredientes.getRowCount() == 0) {
                                    JOptionPane.showMessageDialog(null, "Nenhum registro encontrado!", "Nenhum registro", JOptionPane.OK_OPTION);

                                    txtNome.setText("");
                                    txtQuantidade.setText("");
                                } else {
                                    JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso.", "Atenção", JOptionPane.OK_OPTION);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                            txtQuantidade.setText("");
                            txtQuantidade.requestFocus();
                            txtQuantidade.setBackground(Color.pink);
                        }

                    }
                } else if (CkQuantidade.isSelected() && CkTipoUnidade.isSelected() && RbIgual.isSelected()) {
                    if (CbTipoUnidade.getSelectedIndex() == 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de unidade", "Selecionar tipo", JOptionPane.OK_OPTION);
                    } else {

                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q < 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                                txtQuantidade.setText("");
                                txtQuantidade.requestFocus();
                                txtQuantidade.setBackground(Color.pink);
                            } else {
                                txtQuantidade.setBackground(Color.white);
                               
                                dao.PesquisarPorTipo_Quantidade_IGUAL(ingPizza, TblIngredientes, CbTipoUnidade, txtQuantidade);
                                if (TblIngredientes.getRowCount() == 0) {
                                    JOptionPane.showMessageDialog(null, "Nenhum registro encontrado!", "Nenhum registro", JOptionPane.OK_OPTION);
                                    txtQuantidade.setText("");
                                    CbTipoUnidade.setSelectedIndex(0);
                                } else {
                                    JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso.", "Atenção", JOptionPane.OK_OPTION);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                            txtQuantidade.setText("");
                            txtQuantidade.requestFocus();
                            txtQuantidade.setBackground(Color.pink);
                        }

                    }
                } else if (CkQuantidade.isSelected() && CkTipoUnidade.isSelected() && RbMaior.isSelected()) {
                    if (CbTipoUnidade.getSelectedIndex() == 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de unidade", "Selecionar tipo", JOptionPane.OK_OPTION);
                    } else {
                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q < 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                                txtQuantidade.setText("");
                                txtQuantidade.requestFocus();
                                txtQuantidade.setBackground(Color.pink);
                            } else {
                                txtQuantidade.setBackground(Color.white);
                               
                                dao.PesquisarPorTipo_Quantidade_MAIOR(ingPizza, TblIngredientes, CbTipoUnidade, txtQuantidade);
                                if (TblIngredientes.getRowCount() == 0) {
                                    JOptionPane.showMessageDialog(null, "Nenhum registro encontrado!", "Nenhum registro", JOptionPane.OK_OPTION);
                                    txtQuantidade.setText("");
                                    CbTipoUnidade.setSelectedIndex(0);
                                } else {
                                    JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso.", "Atenção", JOptionPane.OK_OPTION);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                            txtQuantidade.setText("");
                            txtQuantidade.requestFocus();
                            txtQuantidade.setBackground(Color.pink);
                        }

                    }
                } else if (CkQuantidade.isSelected() && CkTipoUnidade.isSelected() && RbMenor.isSelected()) {
                    if (CbTipoUnidade.getSelectedIndex() == 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de unidade", "Selecionar tipo", JOptionPane.OK_OPTION);
                    } else {
                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q < 0) {

                                JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                                txtQuantidade.setText("");
                                txtQuantidade.requestFocus();
                                txtQuantidade.setBackground(Color.pink);
                            } else {
                                txtQuantidade.setBackground(Color.white);
                                
                                dao.PesquisarPorTipo_Quantidade_MENOR(ingPizza, TblIngredientes, CbTipoUnidade, txtQuantidade);
                                if (TblIngredientes.getRowCount() == 0) {
                                    JOptionPane.showMessageDialog(null, "Nenhum registro encontrado!", "Nenhum registro", JOptionPane.OK_OPTION);
                                    txtQuantidade.setText("");
                                    CbTipoUnidade.setSelectedIndex(0);
                                } else {
                                    JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso.", "Atenção", JOptionPane.OK_OPTION);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                            txtQuantidade.setText("");
                            txtQuantidade.requestFocus();
                            txtQuantidade.setBackground(Color.pink);
                        }

                    }
                } else {
                    if (CkNomeIngrediente.isSelected()) {
                        if (txtNome.getText().equals("")) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do ingrediente", "Preencher nome", JOptionPane.OK_OPTION);
                        } else {
                           
                            dao.PesquisarPorNome(ingPizza, TblIngredientes, txtNome);
                            if (TblIngredientes.getRowCount() == 0) {
                                JOptionPane.showMessageDialog(null, "Nenhum registro encontrado!", "Nenhum registro", JOptionPane.OK_OPTION);
                                txtNome.setText("");
                            } else {
                                JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso.", "Atenção", JOptionPane.OK_OPTION);
                            }
                        }
                    }
                    if (CkQuantidade.isSelected() && RbIgual.isSelected()) {

                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q < 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                                txtQuantidade.setText("");
                                txtQuantidade.requestFocus();
                                txtQuantidade.setBackground(Color.pink);
                            } else {
                                txtQuantidade.setBackground(Color.white);
                              
                                dao.PesquisarPorQuantidadeIgual(ingPizza, TblIngredientes, txtQuantidade);
                                if (TblIngredientes.getRowCount() == 0) {
                                    JOptionPane.showMessageDialog(null, "Nenhum registro encontrado!", "Nenhum registro", JOptionPane.OK_OPTION);
                                    txtQuantidade.setText("");
                                } else {
                                    JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso.", "Atenção", JOptionPane.OK_OPTION);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                            txtQuantidade.setText("");
                            txtQuantidade.requestFocus();
                            txtQuantidade.setBackground(Color.pink);

                        }

                    } else if (CkQuantidade.isSelected() && RbMaior.isSelected()) {

                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q < 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                                txtQuantidade.setText("");
                                txtQuantidade.requestFocus();
                                txtQuantidade.setBackground(Color.pink);
                            } else {
                                txtQuantidade.setBackground(Color.white);
                              
                                dao.PesquisarPorQuantidadeMaior(ingPizza, TblIngredientes, txtQuantidade);
                                if (TblIngredientes.getRowCount() == 0) {
                                    JOptionPane.showMessageDialog(null, "Nenhum registro encontrado!", "Nenhum registro", JOptionPane.OK_OPTION);
                                    txtQuantidade.setText("");
                                } else {
                                    JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso.", "Atenção", JOptionPane.OK_OPTION);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                            txtQuantidade.setText("");
                            txtQuantidade.requestFocus();
                            txtQuantidade.setBackground(Color.pink);
                        }

                    } else if (CkQuantidade.isSelected() && RbMenor.isSelected()) {

                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q < 0) {

                                JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                                txtQuantidade.setText("");
                                txtQuantidade.requestFocus();
                                txtQuantidade.setBackground(Color.pink);
                            } else {
                                txtQuantidade.setBackground(Color.white);
                                
                                dao.PesquisarPorQuantidadeMenor(ingPizza, TblIngredientes, txtQuantidade);
                                if (TblIngredientes.getRowCount() == 0) {
                                    JOptionPane.showMessageDialog(null, "Nenhum registro encontrado!", "Nenhum registro", JOptionPane.OK_OPTION);
                                    txtQuantidade.setText("");
                                } else {
                                    JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso.", "Atenção", JOptionPane.OK_OPTION);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                            txtQuantidade.setText("");
                            txtQuantidade.requestFocus();
                            txtQuantidade.setBackground(Color.pink);
                        }

                    }
                    if (CkTipoUnidade.isSelected()) {

                        if (CbTipoUnidade.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de unidade", "Selecionar unidade", JOptionPane.OK_OPTION);

                        } else {
                          
                            dao.PesquisarPorTipo(ingPizza, TblIngredientes, CbTipoUnidade);
                            if (TblIngredientes.getRowCount() == 0) {
                                JOptionPane.showMessageDialog(null, "Nenhum registro encontrado!", "Nenhum registro", JOptionPane.OK_OPTION);
                                CbTipoUnidade.setSelectedIndex(0);
                            } else {
                                JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso.", "Atenção", JOptionPane.OK_OPTION);
                            }
                        }
                    }
                }
        
                break;
        }

    }//GEN-LAST:event_BtnConfirmarActionPerformed

    private void CkQuantidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CkQuantidadeActionPerformed
        if (CkQuantidade.isSelected()) {
            txtQuantidade.setEditable(true);
            txtQuantidade.setBackground(Color.white);
            RbIgual.setEnabled(true);
            RbMaior.setEnabled(true);
            RbMenor.setEnabled(true);
            BtnConfirmar.setEnabled(true);
            RbIgual.setSelected(true);
        } else {
            RbIgual.setSelected(false);
            RbMaior.setSelected(false);
            RbMenor.setSelected(false);
            txtQuantidade.setEditable(false);
            txtQuantidade.setBackground(Color.lightGray);
            RbIgual.setEnabled(false);
            RbMaior.setEnabled(false);
            RbMenor.setEnabled(false);

            if (!CkNomeIngrediente.isSelected() && !CkQuantidade.isSelected() && !CkTipoUnidade.isSelected()) {
                BtnConfirmar.setEnabled(false);
            }

        }
    }//GEN-LAST:event_CkQuantidadeActionPerformed

    private void CkNomeIngredienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CkNomeIngredienteActionPerformed
        if (CkNomeIngrediente.isSelected()) {
            txtNome.setEditable(true);
            txtNome.setBackground(Color.white);
            BtnConfirmar.setEnabled(true);
        } else {
            txtNome.setEditable(false);
            txtNome.setBackground(Color.lightGray);
            if (!CkNomeIngrediente.isSelected() && !CkQuantidade.isSelected() && !CkTipoUnidade.isSelected()) {
                BtnConfirmar.setEnabled(false);
            }
        }

    }//GEN-LAST:event_CkNomeIngredienteActionPerformed

    private void CkTipoUnidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CkTipoUnidadeActionPerformed
        if (CkTipoUnidade.isSelected()) {
            CbTipoUnidade.setEnabled(true);
            BtnConfirmar.setEnabled(true);
        } else {
            CbTipoUnidade.setEnabled(false);
            if (!CkNomeIngrediente.isSelected() && !CkQuantidade.isSelected() && !CkTipoUnidade.isSelected()) {
                BtnConfirmar.setEnabled(false);
            }
        }

    }//GEN-LAST:event_CkTipoUnidadeActionPerformed

    private void jLabel6AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jLabel6AncestorAdded
       ImageIcon icon = new ImageIcon("src/ProjetoImagem/tabela.png");
    jLabel6.setIcon(new ImageIcon(icon.getImage().getScaledInstance(jLabel6.getWidth(),jLabel6.getHeight(), icon.getIconWidth()))); // TODO add your handling co // TODO add your handling code here:
    }//GEN-LAST:event_jLabel6AncestorAdded


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnConfirmar;
    private javax.swing.JComboBox<String> CbPesquisa;
    private javax.swing.JComboBox<String> CbTipoUnidade;
    private javax.swing.JCheckBox CkNomeIngrediente;
    private javax.swing.JCheckBox CkQuantidade;
    private javax.swing.JCheckBox CkTipoUnidade;
    private javax.swing.ButtonGroup GrupoDeBotao1;
    private javax.swing.ButtonGroup GrupoDeBotao2;
    private javax.swing.JRadioButton RbIgual;
    private javax.swing.JRadioButton RbMaior;
    private javax.swing.JRadioButton RbMenor;
    private javax.swing.JTable TblIngredientes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtQuantidade;
    // End of variables declaration//GEN-END:variables
}
