/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ProjetoPizzaria.view;

import ProjetoPizzaria.DAO.SaboresDAO;
import ProjetoPizzaria.modelo.Sabores;
import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Casa
 */
public class IFrmGerenciarSabores extends javax.swing.JInternalFrame {

    Sabores sb = new Sabores();
    SaboresDAO dao = new SaboresDAO();

    /**
     * Creates new form IFrmGerenciarSabores
     */
    public IFrmGerenciarSabores() {
        initComponents();
         getContentPane().setBackground(Color.white);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoDeBotao1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSabor = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        CbOpcao = new javax.swing.JComboBox<>();
        lblPESQUISA = new javax.swing.JLabel();
        txtPesquisar = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cbTamanho = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txtPreco = new javax.swing.JTextField();
        rbMaior = new javax.swing.JRadioButton();
        rbMenor = new javax.swing.JRadioButton();
        rbIgual = new javax.swing.JRadioButton();
        btnConfirmar = new javax.swing.JButton();
        ckNome = new javax.swing.JCheckBox();
        ckPreco = new javax.swing.JCheckBox();
        ckTamanho = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        cbTipo = new javax.swing.JComboBox<>();
        ckTipo = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Gerenciamentos de Sabores de Pizzas");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Selecione oque deseja fazer:");

        tblSabor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome do Sabor", "Valor", "Tamanho", "Tipo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSabor.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblSabor);
        if (tblSabor.getColumnModel().getColumnCount() > 0) {
            tblSabor.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblSabor.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("ID:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Nome do Sabor:");

        CbOpcao.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CbOpcao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Pesquisar tudo", "Pesquisar por ID", "Pesquisar por...", "Adicionar sabor", "Deletar Sabor", "Alterar Dados" }));
        CbOpcao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CbOpcaoActionPerformed(evt);
            }
        });

        lblPESQUISA.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblPESQUISA.setText("Pesquisar:");

        txtPesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisarKeyReleased(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Tamanho:");

        cbTamanho.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cbTamanho.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Grande", "Média", "Brotinho" }));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Preço:");

        grupoDeBotao1.add(rbMaior);
        rbMaior.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rbMaior.setText("Maior que");

        grupoDeBotao1.add(rbMenor);
        rbMenor.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rbMenor.setText("Menor que");

        grupoDeBotao1.add(rbIgual);
        rbIgual.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rbIgual.setSelected(true);
        rbIgual.setText("Igual a");

        btnConfirmar.setBackground(new java.awt.Color(255, 51, 51));
        btnConfirmar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnConfirmar.setForeground(new java.awt.Color(255, 255, 255));
        btnConfirmar.setText("Confirmar");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });

        ckNome.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ckNome.setText("Por Nome");
        ckNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckNomeActionPerformed(evt);
            }
        });

        ckPreco.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ckPreco.setText("Por preço");
        ckPreco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckPrecoActionPerformed(evt);
            }
        });

        ckTamanho.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ckTamanho.setText("Por tamanho");
        ckTamanho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckTamanhoActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Tipo:");

        cbTipo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cbTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Doce", "Salgada" }));

        ckTipo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ckTipo.setText("Por Tipo");
        ckTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckTipoActionPerformed(evt);
            }
        });

        jLabel7.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jLabel7AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ckNome)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel3)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(ckPreco)
                                        .addGap(105, 105, 105)
                                        .addComponent(ckTamanho))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(rbMaior)
                                                .addGap(60, 60, 60)
                                                .addComponent(rbIgual))
                                            .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPreco, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ckTipo, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(rbMenor)
                                .addGap(124, 124, 124))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPESQUISA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbTamanho, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1)
                            .addComponent(CbOpcao, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(308, 308, 308)
                .addComponent(btnConfirmar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CbOpcao, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckNome)
                    .addComponent(ckPreco)
                    .addComponent(ckTamanho)
                    .addComponent(ckTipo))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtPreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbMaior)
                    .addComponent(rbMenor)
                    .addComponent(rbIgual))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbTamanho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(cbTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPESQUISA)
                    .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConfirmar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        btnConfirmar.setEnabled(false);
        txtID.setEditable(false);
        txtID.setBackground(Color.lightGray);
        txtNome.setEditable(false);
        txtNome.setBackground(Color.lightGray);
        txtPesquisar.setEditable(false);
        txtPesquisar.setBackground(Color.lightGray);
        txtPreco.setEditable(false);
        txtPreco.setBackground(Color.lightGray);
        rbMaior.setEnabled(false);
        rbMenor.setEnabled(false);
        rbIgual.setEnabled(false);
        cbTamanho.setEnabled(false);
        ckNome.setEnabled(false);
        ckPreco.setEnabled(false);
        ckTamanho.setEnabled(false);
        ckTipo.setEnabled(false);
        cbTipo.setEnabled(false);
    }//GEN-LAST:event_formInternalFrameOpened

    private void CbOpcaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CbOpcaoActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblSabor.getModel();
        model.setRowCount(0);

        switch (CbOpcao.getSelectedIndex()) {
            case 0:
                //SELECIONE
                btnConfirmar.setEnabled(true);
                txtID.setEditable(false);
                txtID.setBackground(Color.lightGray);
                txtNome.setEditable(false);
                txtNome.setBackground(Color.lightGray);
                txtPesquisar.setEditable(false);
                txtPesquisar.setBackground(Color.lightGray);
                txtPreco.setEditable(false);
                txtPreco.setBackground(Color.lightGray);
                rbMaior.setEnabled(false);
                rbMenor.setEnabled(false);
                rbIgual.setEnabled(false);
                cbTamanho.setEnabled(false);
                ckNome.setSelected(false);
                ckPreco.setSelected(false);
                ckTamanho.setSelected(false);
                ckTamanho.setEnabled(false);
                ckPreco.setEnabled(false);
                ckNome.setEnabled(false);
                txtNome.setText("");
                txtPreco.setText("");
                cbTamanho.setSelectedIndex(0);
                txtID.setText("");
                ckTipo.setEnabled(false);
                cbTipo.setEnabled(false);
                cbTipo.setSelectedIndex(0);
                break;
            case 1:
                //PESQUISAR TUDO
                btnConfirmar.setEnabled(true);
                txtID.setEditable(false);
                txtID.setBackground(Color.lightGray);
                txtNome.setEditable(false);
                txtNome.setBackground(Color.lightGray);
                txtPesquisar.setEditable(false);
                txtPesquisar.setBackground(Color.lightGray);
                txtPreco.setEditable(false);
                txtPreco.setBackground(Color.lightGray);
                rbMaior.setEnabled(false);
                rbMenor.setEnabled(false);
                rbIgual.setEnabled(false);
                cbTamanho.setEnabled(false);
                ckNome.setSelected(false);
                ckPreco.setSelected(false);
                ckTamanho.setSelected(false);
                ckTamanho.setEnabled(false);
                ckPreco.setEnabled(false);
                ckNome.setEnabled(false);
                txtNome.setText("");
                txtPreco.setText("");
                cbTamanho.setSelectedIndex(0);
                txtID.setText("");
                ckTipo.setEnabled(false);
                cbTipo.setEnabled(false);
                cbTipo.setSelectedIndex(0);
                break;
            case 2:
                //PESQUISAR POR ID
                btnConfirmar.setEnabled(true);
                txtID.setEditable(true);
                txtID.setBackground(Color.white);
                txtNome.setEditable(false);
                txtNome.setBackground(Color.lightGray);
                txtPesquisar.setEditable(false);
                txtPesquisar.setBackground(Color.lightGray);
                txtPreco.setEditable(false);
                txtPreco.setBackground(Color.lightGray);
                rbMaior.setEnabled(false);
                rbMenor.setEnabled(false);
                rbIgual.setEnabled(false);
                cbTamanho.setEnabled(false);
                ckNome.setSelected(false);
                ckPreco.setSelected(false);
                ckTamanho.setSelected(false);
                ckTamanho.setEnabled(false);
                ckPreco.setEnabled(false);
                ckNome.setEnabled(false);
                txtNome.setText("");
                txtPreco.setText("");
                cbTamanho.setSelectedIndex(0);
                ckTipo.setEnabled(false);
                cbTipo.setEnabled(false);
                cbTipo.setSelectedIndex(0);
                break;
            case 3:
                //PESQUISAR POR...
                txtID.setText("");
                btnConfirmar.setEnabled(false);
                txtID.setEditable(false);
                txtID.setBackground(Color.lightGray);
                txtNome.setEditable(false);
                txtNome.setBackground(Color.lightGray);
                txtPesquisar.setEditable(false);
                txtPesquisar.setBackground(Color.lightGray);
                txtPreco.setEditable(false);
                txtPreco.setBackground(Color.lightGray);
                rbMaior.setEnabled(false);
                rbMenor.setEnabled(false);
                rbIgual.setEnabled(false);
                cbTamanho.setEnabled(false);
                ckNome.setSelected(false);
                ckPreco.setSelected(false);
                ckTamanho.setSelected(false);
                ckTamanho.setEnabled(true);
                ckPreco.setEnabled(true);
                ckNome.setEnabled(true);
                txtNome.setText("");
                txtPreco.setText("");
                cbTamanho.setSelectedIndex(0);
                ckTipo.setEnabled(true);
                cbTipo.setEnabled(false);
                cbTipo.setSelectedIndex(0);
                break;
            case 4:
                //ADICIONAR SABOR
                txtID.setText("");
                btnConfirmar.setEnabled(true);
                txtID.setEditable(false);
                txtID.setBackground(Color.lightGray);
                txtNome.setEditable(true);
                txtNome.setBackground(Color.white);
                txtPesquisar.setEditable(false);
                txtPesquisar.setBackground(Color.lightGray);
                txtPreco.setEditable(true);
                txtPreco.setBackground(Color.white);
                rbMaior.setEnabled(false);
                rbMenor.setEnabled(false);
                rbIgual.setEnabled(false);
                cbTamanho.setEnabled(false);
                ckNome.setSelected(false);
                ckPreco.setSelected(false);
                ckTamanho.setSelected(false);
                ckTamanho.setEnabled(false);
                ckPreco.setEnabled(false);
                ckNome.setEnabled(false);
                txtNome.setText("");
                txtPreco.setText("");
                cbTamanho.setSelectedIndex(0);
                cbTamanho.setEnabled(true);
                ckTipo.setEnabled(false);
                cbTipo.setEnabled(true);
                cbTipo.setSelectedIndex(0);
                break;
            case 5:
                //DELETAR
                txtID.setText("");
                btnConfirmar.setEnabled(true);
                txtID.setEditable(false);
                txtID.setBackground(Color.lightGray);
                txtNome.setEditable(false);
                txtNome.setBackground(Color.lightGray);
                txtPesquisar.setEditable(true);
                txtPesquisar.setBackground(Color.white);
                txtPreco.setEditable(false);
                txtPreco.setBackground(Color.lightGray);
                rbMaior.setEnabled(false);
                rbMenor.setEnabled(false);
                rbIgual.setEnabled(false);
                cbTamanho.setEnabled(false);
                ckNome.setSelected(false);
                ckPreco.setSelected(false);
                ckTamanho.setSelected(false);
                ckTamanho.setEnabled(false);
                ckPreco.setEnabled(false);
                ckNome.setEnabled(false);
                txtNome.setText("");
                txtPreco.setText("");
                cbTamanho.setSelectedIndex(0);
                ckTipo.setEnabled(false);
                cbTipo.setEnabled(false);
                cbTipo.setSelectedIndex(0);
                dao.PesquisarTudo(sb, tblSabor);
                break;
            case 6:
                //ALTERAR DADOS
                txtID.setText("");
                btnConfirmar.setEnabled(false);
                txtID.setEditable(false);
                txtID.setBackground(Color.lightGray);
                txtNome.setEditable(false);
                txtNome.setBackground(Color.lightGray);
                txtPesquisar.setEditable(true);
                txtPesquisar.setBackground(Color.white);
                txtPreco.setEditable(false);
                txtPreco.setBackground(Color.lightGray);
                rbMaior.setEnabled(false);
                rbMenor.setEnabled(false);
                rbIgual.setEnabled(false);
                cbTamanho.setEnabled(false);
                ckNome.setSelected(false);
                ckPreco.setSelected(false);
                ckTamanho.setSelected(false);
                ckTamanho.setEnabled(true);
                ckPreco.setEnabled(true);
                ckNome.setEnabled(true);
                txtNome.setText("");
                txtPreco.setText("");
                cbTamanho.setSelectedIndex(0);
                ckTipo.setEnabled(true);
                dao.PesquisarTudo(sb, tblSabor);
                cbTipo.setEnabled(false);
                cbTipo.setSelectedIndex(0);
                break;

        }


    }//GEN-LAST:event_CbOpcaoActionPerformed

    private void txtPesquisarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisarKeyReleased
        DefaultTableModel model = (DefaultTableModel) tblSabor.getModel();
        model.setRowCount(0);
        Sabores sb = new Sabores();
        SaboresDAO dao = new SaboresDAO();
        dao.PesquisarPorNome(sb, tblSabor, txtPesquisar);

        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesquisarKeyReleased

    private void ckNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckNomeActionPerformed
        if (ckNome.isSelected()) {
            txtNome.setBackground(Color.white);
            txtNome.setEditable(true);
            btnConfirmar.setEnabled(true);

        } else if (!ckNome.isSelected()) {
            txtNome.setBackground(Color.lightGray);
            txtNome.setEditable(false);
            txtNome.setText("");
            if (!ckNome.isSelected() && !ckPreco.isSelected() && !ckTamanho.isSelected() && !ckTipo.isSelected()) {
                btnConfirmar.setEnabled(false);
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_ckNomeActionPerformed

    private void ckPrecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckPrecoActionPerformed
        if (ckPreco.isSelected()) {
            txtPreco.setBackground(Color.white);
            txtPreco.setEditable(true);
            btnConfirmar.setEnabled(true);
            if (CbOpcao.getSelectedIndex() != 6) {
                rbIgual.setEnabled(true);
                rbMenor.setEnabled(true);
                rbMaior.setEnabled(true);
            }
        } else if (!ckPreco.isSelected()) {
            txtPreco.setBackground(Color.lightGray);
            txtPreco.setEditable(false);
            txtPreco.setText("");
            rbIgual.setEnabled(false);
            rbMenor.setEnabled(false);
            rbMaior.setEnabled(false);
            if (!ckNome.isSelected() && !ckPreco.isSelected() && !ckTamanho.isSelected() && !ckTipo.isSelected()) {
                btnConfirmar.setEnabled(false);
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_ckPrecoActionPerformed

    private void ckTamanhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckTamanhoActionPerformed
        if (ckTamanho.isSelected()) {
            cbTamanho.setEnabled(true);
            btnConfirmar.setEnabled(true);
        } else if (!ckTamanho.isSelected()) {
            cbTamanho.setEnabled(false);
            cbTamanho.setSelectedIndex(0);
            if (!ckNome.isSelected() && !ckPreco.isSelected() && !ckTamanho.isSelected() && !ckTipo.isSelected()) {
                btnConfirmar.setEnabled(false);
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_ckTamanhoActionPerformed

    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblSabor.getModel();
        switch (CbOpcao.getSelectedIndex()) {
            case 0:
                break;
            case 1:
                //PESQUISAR TUDO
                model.setRowCount(0);
                dao.PesquisarTudo(sb, tblSabor);
                JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso!", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                break;
            case 2:
                //PESQUISAR POR ID
                try {
                    int id = Integer.parseInt(txtID.getText());
                    if (id <= 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, insira um ID válida", "ID inválido", JOptionPane.OK_OPTION);
                        txtID.setBackground(Color.pink);
                        txtID.setText("");
                        txtID.requestFocus();
                    } else {
                        txtID.setBackground(Color.white);
                        model.setRowCount(0);
                        dao.PesquisarPorID(sb, tblSabor, id);
                        JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso!", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                        txtID.setText("");
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, insira um ID válida", "ID inválido", JOptionPane.OK_OPTION);
                    txtID.setBackground(Color.pink);
                    txtID.setText("");
                    txtID.requestFocus();
                }

                break;
            case 3:
                //PESQUISAR POR...
                model.setRowCount(0);
                if (ckNome.isSelected() && ckPreco.isSelected() && ckTamanho.isSelected() && ckTipo.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        String nome = txtNome.getText();
                        try {
                            double preco = Double.parseDouble(txtPreco.getText());
                            if (preco >= 0) {
                                txtPreco.setBackground(Color.white);
                                if (cbTamanho.getSelectedIndex() != 0) {
                                    String tamanho = cbTamanho.getSelectedItem().toString();
                                    String simbolo;
                                    if (rbIgual.isSelected()) {
                                        simbolo = "=";
                                    } else if (rbMaior.isSelected()) {
                                        simbolo = ">";
                                    } else {
                                        simbolo = "<";
                                    }
                                    if (cbTipo.getSelectedIndex() != 0) {
                                        String tipo = cbTipo.getSelectedItem().toString();

                                        dao.PesquisarPorNomeValorTamanhoTipo(sb, tblSabor, nome, preco, simbolo, tamanho, tipo);
                                        if (tblSabor.getRowCount() == 0) {
                                            JOptionPane.showMessageDialog(null, "Nenhum resultado foi encontrado", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                                        } else {
                                            ckNome.setSelected(false);
                                            ckNomeActionPerformed(null);
                                            ckPreco.setSelected(false);
                                            ckPrecoActionPerformed(null);
                                            ckTamanho.setSelected(false);
                                            ckTamanhoActionPerformed(null);
                                            ckTipo.setSelected(false);
                                            ckTipoActionPerformed(null);
                                            JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                                        }

                                    } else {
                                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo", "Selecionar Tipo", JOptionPane.OK_OPTION);
                                    }

                                } else {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum tamanho", "Selecionar tamanho", JOptionPane.OK_OPTION);
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor,preencha corretamente o campo preço", "Preço inválido", JOptionPane.OK_OPTION);
                                txtPreco.setText("");
                                txtPreco.requestFocus();
                                txtPreco.setBackground(Color.pink);
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor,preencha corretamente o campo preço", "Preço inválido", JOptionPane.OK_OPTION);
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do sabor", "Preencher nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }

                } //parei aqui
                else if (ckPreco.isSelected() && ckTamanho.isSelected() && ckTipo.isSelected()) {

                    try {
                        double preco = Double.parseDouble(txtPreco.getText());
                        if (preco >= 0) {
                            txtPreco.setBackground(Color.white);
                            if (cbTamanho.getSelectedIndex() != 0) {
                                String tamanho = cbTamanho.getSelectedItem().toString();
                                String simbolo;
                                if (rbIgual.isSelected()) {
                                    simbolo = "=";
                                } else if (rbMaior.isSelected()) {
                                    simbolo = ">";
                                } else {
                                    simbolo = "<";
                                }
                                if (cbTipo.getSelectedIndex() != 0) {
                                    String tipo = cbTipo.getSelectedItem().toString();

                                    dao.PesquisarPorValorTamanhoTipo(sb, tblSabor, preco, simbolo, tamanho, tipo);
                                    if (tblSabor.getRowCount() == 0) {
                                        JOptionPane.showMessageDialog(null, "Nenhum resultado foi encontrado", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                                    } else {

                                        ckPreco.setSelected(false);
                                        ckPrecoActionPerformed(null);
                                        ckTamanho.setSelected(false);
                                        ckTamanhoActionPerformed(null);
                                        ckTipo.setSelected(false);
                                        ckTipoActionPerformed(null);
                                        JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                                    }

                                } else {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo", "Selecionar Tipo", JOptionPane.OK_OPTION);
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tamanho", "Selecionar tamanho", JOptionPane.OK_OPTION);
                            }

                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor,preencha corretamente o campo preço", "Preço inválido", JOptionPane.OK_OPTION);
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor,preencha corretamente o campo preço", "Preço inválido", JOptionPane.OK_OPTION);
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                        txtPreco.setBackground(Color.pink);
                    }

                } //parei aqui
                else if (ckNome.isSelected() && ckPreco.isSelected() && ckTipo.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        String nome = txtNome.getText();
                        try {
                            double preco = Double.parseDouble(txtPreco.getText());
                            if (preco >= 0) {
                                txtPreco.setBackground(Color.white);

                                String simbolo;
                                if (rbIgual.isSelected()) {
                                    simbolo = "=";
                                } else if (rbMaior.isSelected()) {
                                    simbolo = ">";
                                } else {
                                    simbolo = "<";
                                }
                                if (cbTipo.getSelectedIndex() != 0) {
                                    String tipo = cbTipo.getSelectedItem().toString();

                                    dao.PesquisarPorNomeValorTipo(sb, tblSabor, nome, preco, simbolo, tipo);
                                    if (tblSabor.getRowCount() == 0) {
                                        JOptionPane.showMessageDialog(null, "Nenhum resultado foi encontrado", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                                    } else {
                                        ckNome.setSelected(false);
                                        ckNomeActionPerformed(null);
                                        ckTipo.setSelected(false);
                                        ckTipoActionPerformed(null);
                                        ckPreco.setSelected(false);
                                        ckPrecoActionPerformed(null);
                                        JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                                    }

                                } else {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo", "Selecionar Tipo", JOptionPane.OK_OPTION);
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor,preencha corretamente o campo preço", "Preço inválido", JOptionPane.OK_OPTION);
                                txtPreco.setText("");
                                txtPreco.requestFocus();
                                txtPreco.setBackground(Color.pink);
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor,preencha corretamente o campo preço", "Preço inválido", JOptionPane.OK_OPTION);
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do sabor", "Preencher nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }

                } else if (ckNome.isSelected() && ckTamanho.isSelected() && ckTipo.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        String nome = txtNome.getText();

                        if (cbTamanho.getSelectedIndex() != 0) {
                            String tamanho = cbTamanho.getSelectedItem().toString();

                            if (cbTipo.getSelectedIndex() != 0) {
                                String tipo = cbTipo.getSelectedItem().toString();

                                dao.PesquisarPorNomeTamanhoTipo(sb, tblSabor, nome, tamanho, tipo);
                                if (tblSabor.getRowCount() == 0) {
                                    JOptionPane.showMessageDialog(null, "Nenhum resultado foi encontrado", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                                } else {
                                    ckNome.setSelected(false);
                                    ckNomeActionPerformed(null);
                                    ckTamanho.setSelected(false);
                                    ckTamanhoActionPerformed(null);
                                    ckTipo.setSelected(false);
                                    ckTipoActionPerformed(null);
                                    JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo", "Selecionar Tipo", JOptionPane.OK_OPTION);
                            }

                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum tamanho", "Selecionar tamanho", JOptionPane.OK_OPTION);
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do sabor", "Preencher nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }

                } //parei aqui
                else if (ckNome.isSelected() && ckPreco.isSelected() && ckTamanho.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        String nome = txtNome.getText();
                        try {
                            double preco = Double.parseDouble(txtPreco.getText());
                            if (preco >= 0) {
                                txtPreco.setBackground(Color.white);
                                if (cbTamanho.getSelectedIndex() != 0) {
                                    String tamanho = cbTamanho.getSelectedItem().toString();
                                    String simbolo;
                                    if (rbIgual.isSelected()) {
                                        simbolo = "=";
                                    } else if (rbMaior.isSelected()) {
                                        simbolo = ">";
                                    } else {
                                        simbolo = "<";
                                    }

                                    dao.PesquisarPorNomeValorTamanho(sb, tblSabor, nome, preco, simbolo, tamanho);
                                    if (tblSabor.getRowCount() == 0) {
                                        JOptionPane.showMessageDialog(null, "Nenhum resultado foi encontrado", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                                    } else {
                                        ckNome.setSelected(false);
                                        ckNomeActionPerformed(null);
                                        ckPreco.setSelected(false);
                                        ckPrecoActionPerformed(null);
                                        ckTamanho.setSelected(false);
                                        ckTamanhoActionPerformed(null);

                                        JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum tamanho", "Selecionar tamanho", JOptionPane.OK_OPTION);
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor,preencha corretamente o campo preço", "Preço inválido", JOptionPane.OK_OPTION);
                                txtPreco.setText("");
                                txtPreco.requestFocus();
                                txtPreco.setBackground(Color.pink);
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor,preencha corretamente o campo preço", "Preço inválido", JOptionPane.OK_OPTION);
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do sabor", "Preencher nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }

                } //PAREI AQUI
                else if (ckNome.isSelected() && ckPreco.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        String nome = txtNome.getText();
                        try {
                            double preco = Double.parseDouble(txtPreco.getText());
                            if (preco >= 0) {
                                txtPreco.setBackground(Color.white);

                                String simbolo;
                                if (rbIgual.isSelected()) {
                                    simbolo = "=";
                                } else if (rbMaior.isSelected()) {
                                    simbolo = ">";
                                } else {
                                    simbolo = "<";
                                }

                                dao.PesquisarPorNomeValor(sb, tblSabor, nome, preco, simbolo);
                                if (tblSabor.getRowCount() == 0) {
                                    JOptionPane.showMessageDialog(null, "Nenhum resultado foi encontrado", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                                } else {
                                    ckNome.setSelected(false);
                                    ckNomeActionPerformed(null);
                                    ckPreco.setSelected(false);
                                    ckPrecoActionPerformed(null);

                                    JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor,preencha corretamente o campo preço", "Preço inválido", JOptionPane.OK_OPTION);
                                txtPreco.setText("");
                                txtPreco.requestFocus();
                                txtPreco.setBackground(Color.pink);
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor,preencha corretamente o campo preço", "Preço inválido", JOptionPane.OK_OPTION);
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do sabor", "Preencher nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }

                } //PAREI AQUI
                else if (ckNome.isSelected() && ckTipo.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        String nome = txtNome.getText();

                        if (cbTipo.getSelectedIndex() != 0) {
                            String tipo = cbTipo.getSelectedItem().toString();

                            dao.PesquisarPorNomeTipo(sb, tblSabor, nome, tipo);
                            if (tblSabor.getRowCount() == 0) {
                                JOptionPane.showMessageDialog(null, "Nenhum resultado foi encontrado", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                            } else {
                                ckNome.setSelected(false);
                                ckNomeActionPerformed(null);
                                ckTipo.setSelected(false);
                                ckTipoActionPerformed(null);
                                JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                            }

                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo", "Selecionar Tipo", JOptionPane.OK_OPTION);
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do sabor", "Preencher nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }

                } //PAREI AQUI
                else if (ckPreco.isSelected() && ckTipo.isSelected()) {

                    try {
                        double preco = Double.parseDouble(txtPreco.getText());
                        if (preco >= 0) {
                            txtPreco.setBackground(Color.white);

                            String simbolo;
                            if (rbIgual.isSelected()) {
                                simbolo = "=";
                            } else if (rbMaior.isSelected()) {
                                simbolo = ">";
                            } else {
                                simbolo = "<";
                            }
                            if (cbTipo.getSelectedIndex() != 0) {
                                String tipo = cbTipo.getSelectedItem().toString();

                                dao.PesquisarPorValorTipo(sb, tblSabor, preco, simbolo, tipo);
                                if (tblSabor.getRowCount() == 0) {
                                    JOptionPane.showMessageDialog(null, "Nenhum resultado foi encontrado", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                                } else {

                                    ckPreco.setSelected(false);
                                    ckPrecoActionPerformed(null);
                                    ckTipo.setSelected(false);
                                    ckTipoActionPerformed(null);
                                    JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo", "Selecionar Tipo", JOptionPane.OK_OPTION);
                            }

                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor,preencha corretamente o campo preço", "Preço inválido", JOptionPane.OK_OPTION);
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor,preencha corretamente o campo preço", "Preço inválido", JOptionPane.OK_OPTION);
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                        txtPreco.setBackground(Color.pink);
                    }

                } //PAREI AQUI
                else if (ckTamanho.isSelected() && ckTipo.isSelected()) {

                    if (cbTamanho.getSelectedIndex() != 0) {
                        String tamanho = cbTamanho.getSelectedItem().toString();

                        if (cbTipo.getSelectedIndex() != 0) {
                            String tipo = cbTipo.getSelectedItem().toString();

                            dao.PesquisarPorTamanhoTipo(sb, tblSabor, tamanho, tipo);
                            if (tblSabor.getRowCount() == 0) {
                                JOptionPane.showMessageDialog(null, "Nenhum resultado foi encontrado", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                            } else {

                                ckTamanho.setSelected(false);
                                ckTamanhoActionPerformed(null);
                                ckTipo.setSelected(false);
                                ckTipoActionPerformed(null);
                                JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                            }

                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo", "Selecionar Tipo", JOptionPane.OK_OPTION);
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum tamanho", "Selecionar tamanho", JOptionPane.OK_OPTION);
                    }

                } //parei aqui
                else if (ckNome.isSelected() && ckTamanho.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        String nome = txtNome.getText();

                        if (cbTamanho.getSelectedIndex() != 0) {
                            String tamanho = cbTamanho.getSelectedItem().toString();

                            dao.PesquisarPorNomeTamanho(sb, tblSabor, nome, tamanho);
                            if (tblSabor.getRowCount() == 0) {
                                JOptionPane.showMessageDialog(null, "Nenhum resultado foi encontrado", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                            } else {
                                ckNome.setSelected(false);
                                ckNomeActionPerformed(null);

                                ckTamanho.setSelected(false);
                                ckTamanhoActionPerformed(null);

                                JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum tamanho", "Selecionar tamanho", JOptionPane.OK_OPTION);
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do sabor", "Preencher nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }

                } //PAREI AQUI
                else if (ckPreco.isSelected() && ckTamanho.isSelected()) {

                    try {
                        double preco = Double.parseDouble(txtPreco.getText());
                        if (preco >= 0) {
                            txtPreco.setBackground(Color.white);
                            if (cbTamanho.getSelectedIndex() != 0) {
                                String tamanho = cbTamanho.getSelectedItem().toString();
                                String simbolo;
                                if (rbIgual.isSelected()) {
                                    simbolo = "=";
                                } else if (rbMaior.isSelected()) {
                                    simbolo = ">";
                                } else {
                                    simbolo = "<";
                                }

                                dao.PesquisarValorTamanho(sb, tblSabor, simbolo, preco, tamanho);
                                if (tblSabor.getRowCount() == 0) {
                                    JOptionPane.showMessageDialog(null, "Nenhum resultado foi encontrado", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                                } else {

                                    ckPreco.setSelected(false);
                                    ckPrecoActionPerformed(null);
                                    ckTamanho.setSelected(false);
                                    ckTamanhoActionPerformed(null);

                                    JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tamanho", "Selecionar tamanho", JOptionPane.OK_OPTION);
                            }

                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor,preencha corretamente o campo preço", "Preço inválido", JOptionPane.OK_OPTION);
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor,preencha corretamente o campo preço", "Preço inválido", JOptionPane.OK_OPTION);
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                        txtPreco.setBackground(Color.pink);
                    }

                } else //PAREI AQUI
                if (ckNome.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        dao.PesquisarPorNome(sb, tblSabor, txtNome);
                        if (tblSabor.getRowCount() == 0) {
                            JOptionPane.showMessageDialog(null, "Nenhum resultado foi encontrado", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                        } else {
                            ckNome.setSelected(false);
                            ckNomeActionPerformed(null);

                            JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do sabor", "Preencher nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }
                } //PAREI AQUI
                else if (ckPreco.isSelected()) {

                    try {
                        double preco = Double.parseDouble(txtPreco.getText());
                        if (preco >= 0) {
                            txtPreco.setBackground(Color.white);

                            String simbolo;
                            if (rbIgual.isSelected()) {
                                simbolo = "=";
                            } else if (rbMaior.isSelected()) {
                                simbolo = ">";
                            } else {
                                simbolo = "<";
                            }

                            dao.PesquisarPorValor(sb, tblSabor, simbolo, preco);
                            if (tblSabor.getRowCount() == 0) {
                                JOptionPane.showMessageDialog(null, "Nenhum resultado foi encontrado", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                            } else {

                                ckPreco.setSelected(false);
                                ckPrecoActionPerformed(null);

                                JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                            }

                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor,preencha corretamente o campo preço", "Preço inválido", JOptionPane.OK_OPTION);
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor,preencha corretamente o campo preço", "Preço inválido", JOptionPane.OK_OPTION);
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                        txtPreco.setBackground(Color.pink);
                    }

                } //PAREI AQUI
                else if (ckTipo.isSelected()) {
                    if (cbTipo.getSelectedIndex() != 0) {
                        String tipo = cbTipo.getSelectedItem().toString();
                        dao.PesquisarPorTipo(sb, tblSabor, tipo);
                        if (tblSabor.getRowCount() == 0) {
                            JOptionPane.showMessageDialog(null, "Nenhum resultado foi encontrado", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                        } else {
                            ckNome.setSelected(false);

                            ckTipo.setSelected(false);
                            ckTipoActionPerformed(null);
                            JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo", "Selecionar Tipo", JOptionPane.OK_OPTION);
                    }
                } else if (ckTamanho.isSelected()) {

                    if (cbTamanho.getSelectedIndex() != 0) {
                        String tamanho = cbTamanho.getSelectedItem().toString();

                        dao.PesquisarPorTamanho(sb, tblSabor, tamanho);
                        if (tblSabor.getRowCount() == 0) {
                            JOptionPane.showMessageDialog(null, "Nenhum resultado foi encontrado", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                        } else {
                            ckNome.setSelected(false);

                            ckTamanho.setSelected(false);
                            ckTamanhoActionPerformed(null);

                            JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Sabores", JOptionPane.OK_OPTION);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum tamanho", "Selecionar tamanho", JOptionPane.OK_OPTION);
                    }

                }

                break;
            case 4:
                //ADICIONAR SABOR
                if (!txtNome.getText().equals("")) {
                    txtNome.setBackground(Color.white);
                    try {
                        double preco = Double.parseDouble(txtPreco.getText());
                        if (preco >= 0) {
                            txtPreco.setBackground(Color.white);
                            if (cbTamanho.getSelectedIndex() == 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tamanho de pizza", "Selecionar tamanho", JOptionPane.OK_OPTION);
                            } else if (cbTipo.getSelectedIndex() == 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo", "Selecionar tipo", JOptionPane.OK_OPTION);
                            } else {
                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente cadastrar o sabor: '" + txtNome.getText() + "' \nPreço: '" + preco + "' \nTamanho: '" + cbTamanho.getSelectedItem() + "' \nTipo: '" + cbTipo.getSelectedItem() + "' ?", "Cadastrar Sabor", JOptionPane.YES_NO_OPTION);
                                if (r == 0) {
                                    try {
                                        sb.setNomeSabor(txtNome.getText());
                                        sb.setTamanho(cbTamanho.getSelectedItem().toString());
                                        sb.setValor(preco);
                                        sb.setTipo(cbTipo.getSelectedItem().toString());
                                        dao.AdicionarSabor(sb);
                                        JOptionPane.showMessageDialog(null, "Sabor cadastrado com sucesso", "Cadastrar Sabor", JOptionPane.OK_OPTION);
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Erro ao inserir");
                                    }

                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha o campo preço corretamente", "Preencher preço", JOptionPane.OK_OPTION);
                            txtPreco.setBackground(Color.pink);
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o campo preço corretamente", "Preencher preço", JOptionPane.OK_OPTION);
                        txtPreco.setBackground(Color.pink);
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha o campo nome corretamente", "Preencher nome", JOptionPane.OK_OPTION);
                    txtNome.setBackground(Color.pink);
                    txtNome.setText("");
                    txtNome.requestFocus();
                }

                break;
            case 5:
                //DELETAR SABOR
                try {
                    int r = JOptionPane.showConfirmDialog(null, "Deseja realmente deletar o sabor: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 1) + "'?", "Deletar Sabor", JOptionPane.YES_NO_OPTION);
                    if (r == 0) {
                        dao.DeletarNome(sb, tblSabor);
                        JOptionPane.showMessageDialog(null, "Sabor deletado com sucesso", "Deletado com sucesso", JOptionPane.OK_OPTION);
                        txtPesquisar.setText("");
                        txtPesquisarKeyReleased(null);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum sabor", "Selecionar Sabor", JOptionPane.OK_OPTION);
                }
                break;
            case 6:
                //ALTERAR DADOS

                if (ckNome.isSelected() && ckPreco.isSelected() && ckTamanho.isSelected() && ckTipo.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        if (cbTamanho.getSelectedIndex() != 0) {
                            try {
                                double preco = Double.parseDouble(txtPreco.getText());
                                if (preco >= 0) {
                                    txtPreco.setBackground(Color.white);
                                    if (cbTipo.getSelectedIndex() != 0) {
                                        String tipo = cbTipo.getSelectedItem().toString();
                                        //Confirmação antes do método
                                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os dados: \nNome: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 1).toString() + "' \nValor: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 2).toString() + "' \nTamanho: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 3).toString() + "'\nTipo: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 4).toString() + "' \n\nPelos Seguintes Valores: \n\n"
                                                + "Nome: '" + txtNome.getText() + "' \nValor:'" + preco + "' \nTamanho: '" + cbTamanho.getSelectedItem() + "' \nTipo: '" + tipo + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                        if (r == 0) {
                                            String nome = txtNome.getText().toString();
                                            String tamanho = cbTamanho.getSelectedItem().toString();
                                            //INICIANDO O MÉTODO
                                            dao.AlterarDados(sb, tblSabor, nome, preco, tamanho, tipo);
                                            ckNome.setSelected(false);
                                            ckNomeActionPerformed(null);
                                            ckPreco.setSelected(false);
                                            ckPrecoActionPerformed(null);
                                            ckTamanho.setSelected(false);
                                            ckTamanhoActionPerformed(null);
                                            ckTipo.setSelected(false);
                                            ckTipoActionPerformed(null);
                                            JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo", "Selecionar Tipo", JOptionPane.OK_OPTION);
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Por favor, digite um valor válido", "Valor inválido", JOptionPane.OK_OPTION);
                                    txtPreco.setBackground(Color.pink);
                                    txtPreco.setText("");
                                    txtPreco.requestFocus();
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, digite um valor válido", "Valor inválido", JOptionPane.OK_OPTION);
                                txtPreco.setBackground(Color.pink);
                                txtPreco.setText("");
                                txtPreco.requestFocus();
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum tamanho válido", "Tamanho inválido", JOptionPane.OK_OPTION);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do sabor", "Preencher nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }
                } //parei aqui
                else if (ckNome.isSelected() && ckPreco.isSelected() && ckTipo.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);

                        try {
                            double preco = Double.parseDouble(txtPreco.getText());
                            if (preco >= 0) {
                                txtPreco.setBackground(Color.white);
                                if (cbTipo.getSelectedIndex() != 0) {
                                    String tipo = cbTipo.getSelectedItem().toString();

                                    try {
                                        String tamanho = tblSabor.getValueAt(tblSabor.getSelectedRow(), 3).toString();
                                        //Confirmação antes do método
                                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os dados: \nNome: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 1).toString() + "' \nValor: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 2).toString() + "'\nTipo: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 4).toString() + "' \n\nPelos Seguintes Valores: \n\n"
                                                + "Nome: '" + txtNome.getText() + "' \nValor:'" + preco + "' \nTipo: '" + tipo + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                        if (r == 0) {
                                            String nome = txtNome.getText().toString();

                                            //INICIANDO O MÉTODO
                                            dao.AlterarDados(sb, tblSabor, nome, preco, tamanho, tipo);
                                            ckNome.setSelected(false);
                                            ckNomeActionPerformed(null);
                                            ckPreco.setSelected(false);
                                            ckPrecoActionPerformed(null);
                                            ckTipo.setSelected(false);
                                            ckTipoActionPerformed(null);
                                            JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum sabor", "Selecionar Sabor", JOptionPane.OK_OPTION);
                                    }

                                } else {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo", "Selecionar Tipo", JOptionPane.OK_OPTION);
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, digite um valor válido", "Valor inválido", JOptionPane.OK_OPTION);
                                txtPreco.setBackground(Color.pink);
                                txtPreco.setText("");
                                txtPreco.requestFocus();
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite um valor válido", "Valor inválido", JOptionPane.OK_OPTION);
                            txtPreco.setBackground(Color.pink);
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do sabor", "Preencher nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }

                } //parei aqui
                else if (ckNome.isSelected() && ckTamanho.isSelected() && ckTipo.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        if (cbTamanho.getSelectedIndex() != 0) {

                            try {
                                double preco = Double.parseDouble(tblSabor.getValueAt(tblSabor.getSelectedRow(), 2).toString());
                                if (cbTipo.getSelectedIndex() != 0) {
                                    String tipo = cbTipo.getSelectedItem().toString();
                                    //Confirmação antes do método
                                    int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os dados: \nNome: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 1).toString() + "'\nTamanho: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 3).toString() + "'\nTipo: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 4).toString() + "' \n\nPelos Seguintes Valores: \n\n"
                                            + "Nome: '" + txtNome.getText() + "' \nTamanho: '" + cbTamanho.getSelectedItem() + "' \nTipo: '" + tipo + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                    if (r == 0) {
                                        String nome = txtNome.getText().toString();
                                        String tamanho = cbTamanho.getSelectedItem().toString();
                                        //INICIANDO O MÉTODO
                                        dao.AlterarDados(sb, tblSabor, nome, preco, tamanho, tipo);
                                        ckNome.setSelected(false);
                                        ckNomeActionPerformed(null);
                                        ckTamanho.setSelected(false);
                                        ckTamanhoActionPerformed(null);
                                        ckTipo.setSelected(false);
                                        ckTipoActionPerformed(null);

                                        JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo", "Selecionar Tipo", JOptionPane.OK_OPTION);
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum sabor", "Selecionar Sabor", JOptionPane.OK_OPTION);
                            }

                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum tamanho válido", "Tamanho inválido", JOptionPane.OK_OPTION);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do sabor", "Preencher nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }
                } //parei aqui
                else if (ckPreco.isSelected() && ckTamanho.isSelected() && ckTipo.isSelected()) {

                    if (cbTamanho.getSelectedIndex() != 0) {
                        try {
                            double preco = Double.parseDouble(txtPreco.getText());
                            if (preco >= 0) {
                                txtPreco.setBackground(Color.white);
                                if (cbTipo.getSelectedIndex() != 0) {
                                    String tipo = cbTipo.getSelectedItem().toString();
                                    try {
                                        String nome = tblSabor.getValueAt(tblSabor.getSelectedRow(), 1).toString();
                                        //Confirmação antes do método
                                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os dados: ' \nValor: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 2).toString() + "' \nTamanho: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 3).toString() + "'\nTipo: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 4).toString() + "' \n\nPelos Seguintes Valores: \n\n"
                                                + "' Valor:'" + preco + "' \nTamanho: '" + cbTamanho.getSelectedItem() + "' \nTipo: '" + tipo + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                        if (r == 0) {
                                            String tamanho = cbTamanho.getSelectedItem().toString();
                                            //INICIANDO O MÉTODO
                                            dao.AlterarDados(sb, tblSabor, nome, preco, tamanho, tipo);

                                            ckPreco.setSelected(false);
                                            ckPrecoActionPerformed(null);
                                            ckTamanho.setSelected(false);
                                            ckTamanhoActionPerformed(null);
                                            ckTipo.setSelected(false);
                                            ckTipoActionPerformed(null);
                                            JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum sabor", "Selecioanr Sabor", JOptionPane.OK_OPTION);
                                    }

                                } else {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo", "Selecionar Tipo", JOptionPane.OK_OPTION);
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, digite um valor válido", "Valor inválido", JOptionPane.OK_OPTION);
                                txtPreco.setBackground(Color.pink);
                                txtPreco.setText("");
                                txtPreco.requestFocus();
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite um valor válido", "Valor inválido", JOptionPane.OK_OPTION);
                            txtPreco.setBackground(Color.pink);
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum tamanho válido", "Tamanho inválido", JOptionPane.OK_OPTION);
                    }

                } //parei aqui
                else if (ckNome.isSelected() && ckPreco.isSelected() && ckTamanho.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        if (cbTamanho.getSelectedIndex() != 0) {
                            try {
                                double preco = Double.parseDouble(txtPreco.getText());
                                if (preco >= 0) {
                                    txtPreco.setBackground(Color.white);
                                    try {
                                        String tipo = tblSabor.getValueAt(tblSabor.getSelectedRow(), 4).toString();
                                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os dados: \nNome: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 1).toString() + "' \nValor: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 2).toString() + "' \nTamanho: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 3).toString() + "' \n\nPelos Seguintes Valores: \n\n"
                                                + "Nome: '" + txtNome.getText() + "' \nValor:'" + preco + "' \nTamanho: '" + cbTamanho.getSelectedItem() + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                        //Confirmação antes do método
                                        if (r == 0) {
                                            String nome = txtNome.getText().toString();
                                            String tamanho = cbTamanho.getSelectedItem().toString();
                                            //INICIANDO O MÉTODO
                                            dao.AlterarDados(sb, tblSabor, nome, preco, tamanho, tipo);
                                            ckNome.setSelected(false);
                                            ckNomeActionPerformed(null);
                                            ckPreco.setSelected(false);
                                            ckPrecoActionPerformed(null);
                                            ckTamanho.setSelected(false);
                                            ckTamanhoActionPerformed(null);

                                            JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum sabor", "Selecionar Sabor", JOptionPane.OK_OPTION);
                                    }

                                } else {
                                    JOptionPane.showMessageDialog(null, "Por favor, digite um valor válido", "Valor inválido", JOptionPane.OK_OPTION);
                                    txtPreco.setBackground(Color.pink);
                                    txtPreco.setText("");
                                    txtPreco.requestFocus();
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, digite um valor válido", "Valor inválido", JOptionPane.OK_OPTION);
                                txtPreco.setBackground(Color.pink);
                                txtPreco.setText("");
                                txtPreco.requestFocus();
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum tamanho válido", "Tamanho inválido", JOptionPane.OK_OPTION);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do sabor", "Preencher nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }
                } //parei aqui
                else if (ckPreco.isSelected() && ckTamanho.isSelected() && ckTipo.isSelected()) {

                    try {
                        double preco = Double.parseDouble(txtPreco.getText());
                        if (preco >= 0) {
                            txtPreco.setBackground(Color.white);
                            if (cbTipo.getSelectedIndex() != 0) {
                                String tipo = cbTipo.getSelectedItem().toString();
                                try {
                                    String tamanho = tblSabor.getValueAt(tblSabor.getSelectedRow(), 3).toString();
                                    String nome = tblSabor.getValueAt(tblSabor.getSelectedRow(), 1).toString();
                                    //Confirmação antes do método
                                    int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os dados: ' \nValor: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 2).toString() + "' \nTipo: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 4).toString() + "'\nTipo: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 4).toString() + "' \n\nPelos Seguintes Valores: \n\n"
                                            + "Valor:'" + preco + "' \nTipo: '" + cbTipo.getSelectedItem() + "' \nTipo: '" + tipo + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                    if (r == 0) {

                                        //INICIANDO O MÉTODO
                                        dao.AlterarDados(sb, tblSabor, nome, preco, tamanho, tipo);

                                        ckPreco.setSelected(false);
                                        ckPrecoActionPerformed(null);
                                        ckTamanho.setSelected(false);
                                        ckTamanhoActionPerformed(null);
                                        ckTipo.setSelected(false);
                                        ckTipoActionPerformed(null);
                                        JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum sabor", "Selecioanr Sabor", JOptionPane.OK_OPTION);
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo", "Selecionar Tipo", JOptionPane.OK_OPTION);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, digite um valor válido", "Valor inválido", JOptionPane.OK_OPTION);
                            txtPreco.setBackground(Color.pink);
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, digite um valor válido", "Valor inválido", JOptionPane.OK_OPTION);
                        txtPreco.setBackground(Color.pink);
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                    }

                } //parei aqui
                else if (ckPreco.isSelected() && ckTamanho.isSelected() && ckTipo.isSelected()) {

                    if (cbTamanho.getSelectedIndex() != 0) {

                        if (cbTipo.getSelectedIndex() != 0) {
                            String tipo = cbTipo.getSelectedItem().toString();
                            try {
                                double preco = Double.parseDouble(tblSabor.getValueAt(tblSabor.getSelectedRow(), 2).toString());
                                String nome = tblSabor.getValueAt(tblSabor.getSelectedRow(), 1).toString();
                                //Confirmação antes do método
                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os dados: ' \nValor: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 2).toString() + "' \nTipo: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 2).toString() + "'\nTipo: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 4).toString() + "' \n\nPelos Seguintes Valores: \n\n"
                                        + "Valor:'" + preco + "' \nTipo: '" + cbTipo.getSelectedItem() + "' \nTipo: '" + tipo + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                if (r == 0) {
                                    String tamanho = cbTamanho.getSelectedItem().toString();
                                    //INICIANDO O MÉTODO

                                    ckPreco.setSelected(false);
                                    ckPrecoActionPerformed(null);
                                    ckTamanho.setSelected(false);
                                    ckTamanhoActionPerformed(null);
                                    ckTipo.setSelected(false);
                                    ckTipoActionPerformed(null);
                                    dao.AlterarDados(sb, tblSabor, nome, preco, tamanho, tipo);
                                    JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum sabor", "Selecioanr Sabor", JOptionPane.OK_OPTION);
                            }

                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo", "Selecionar Tipo", JOptionPane.OK_OPTION);
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum tamanho válido", "Tamanho inválido", JOptionPane.OK_OPTION);
                    }

                } //parei aqui
                else if (ckNome.isSelected() && ckPreco.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        try {
                            double preco = Double.parseDouble(txtPreco.getText());
                            if (preco >= 0) {
                                txtPreco.setBackground(Color.white);
                                try {
                                    String tamanho = tblSabor.getValueAt(tblSabor.getSelectedRow(), 3).toString();

                                    String tipo = tblSabor.getValueAt(tblSabor.getSelectedRow(), 4).toString();
                                    int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os dados: \nNome: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 1).toString() + "' \nValor: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 2).toString() + "' \n\nPelos Seguintes Valores: \n\n"
                                            + "Nome: '" + txtNome.getText() + "' \nValor:'" + preco + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                    //Confirmação antes do método
                                    if (r == 0) {
                                        String nome = txtNome.getText().toString();

                                        //INICIANDO O MÉTODO
                                        dao.AlterarDados(sb, tblSabor, nome, preco, tamanho, tipo);

                                        ckNome.setSelected(false);
                                        ckNomeActionPerformed(null);
                                        ckPreco.setSelected(false);
                                        ckPrecoActionPerformed(null);

                                        JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                    }

                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum sabor", "Selecionar Sabor", JOptionPane.OK_OPTION);
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, digite um valor válido", "Valor inválido", JOptionPane.OK_OPTION);
                                txtPreco.setBackground(Color.pink);
                                txtPreco.setText("");
                                txtPreco.requestFocus();
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite um valor válido", "Valor inválido", JOptionPane.OK_OPTION);
                            txtPreco.setBackground(Color.pink);
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do sabor", "Preencher nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }
                } //parei aqui
                else if (ckNome.isSelected() && ckTamanho.isSelected()) {

                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);

                        if (cbTamanho.getSelectedIndex() != 0) {
                            try {
                                double preco = Double.parseDouble(tblSabor.getValueAt(tblSabor.getSelectedRow(), 2).toString());

                                String tipo = tblSabor.getValueAt(tblSabor.getSelectedRow(), 4).toString();
                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os dados: \nNome: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 1).toString() + "' \nTamanho: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 3).toString() + "' \n\nPelos Seguintes Valores: \n\n"
                                        + "Nome: '" + txtNome.getText() + "' \nTamanho: '" + cbTamanho.getSelectedItem() + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                //Confirmação antes do método
                                if (r == 0) {
                                    String nome = txtNome.getText().toString();
                                    String tamanho = cbTamanho.getSelectedItem().toString();
                                    //INICIANDO O MÉTODO
                                    dao.AlterarDados(sb, tblSabor, nome, preco, tamanho, tipo);

                                    ckNome.setSelected(false);
                                    ckNomeActionPerformed(null);
                                    ckTamanho.setSelected(false);
                                    ckTamanhoActionPerformed(null);

                                    JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                }

                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum sabor", "Selecionar Sabor", JOptionPane.OK_OPTION);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum tamanho", "Selecionar Tamanho", JOptionPane.OK_OPTION);
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do sabor", "Preencher nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }
                } else if (ckNome.isSelected() && ckTipo.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);

                        if (cbTipo.getSelectedIndex() != 0) {
                            String tipo = cbTipo.getSelectedItem().toString();
                            try {
                                double preco = Double.parseDouble(tblSabor.getValueAt(tblSabor.getSelectedRow(), 2).toString());

                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os dados: \nNome: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 1).toString() + "' \nTipo: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 4).toString() + "' \n\nPelos Seguintes Valores: \n\n"
                                        + "Nome: '" + txtNome.getText() + "\nTipo '" + tipo + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                //Confirmação antes do método
                                if (r == 0) {
                                    String nome = txtNome.getText().toString();
                                    String tamanho = cbTamanho.getSelectedItem().toString();
                                    //INICIANDO O MÉTODO
                                    dao.AlterarDados(sb, tblSabor, nome, preco, tamanho, tipo);
                                    ckNome.setSelected(false);
                                    ckNomeActionPerformed(null);
                                    ckTipo.setSelected(false);
                                    ckTipoActionPerformed(null);
                                    JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                }

                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum sabor", "Selecionar Sabor", JOptionPane.OK_OPTION);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo", "Selecionar tipo", JOptionPane.OK_OPTION);
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do sabor", "Preencher nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }

                } //parei aqui
                else if (ckPreco.isSelected() && ckTamanho.isSelected()) {

                    if (cbTamanho.getSelectedIndex() != 0) {
                        try {
                            double preco = Double.parseDouble(txtPreco.getText());
                            if (preco >= 0) {
                                txtPreco.setBackground(Color.white);
                                try {
                                    String nome = tblSabor.getValueAt(tblSabor.getSelectedRow(), 1).toString();

                                    String tipo = tblSabor.getValueAt(tblSabor.getSelectedRow(), 4).toString();
                                    int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os dados: \nValor: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 2).toString() + "' \nTamanho: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 3).toString() + "' \n\nPelos Seguintes Valores: \n\n"
                                            + "Valor:'" + preco + "' \nTamanho: '" + cbTamanho.getSelectedItem() + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                    //Confirmação antes do método
                                    if (r == 0) {

                                        String tamanho = cbTamanho.getSelectedItem().toString();
                                        //INICIANDO O MÉTODO
                                        dao.AlterarDados(sb, tblSabor, nome, preco, tamanho, tipo);

                                        ckPreco.setSelected(false);
                                        ckPrecoActionPerformed(null);
                                        ckTamanho.setSelected(false);
                                        ckTamanhoActionPerformed(null);

                                        JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                    }

                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum sabor", "Selecionar Sabor", JOptionPane.OK_OPTION);
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, digite um valor válido", "Valor inválido", JOptionPane.OK_OPTION);
                                txtPreco.setBackground(Color.pink);
                                txtPreco.setText("");
                                txtPreco.requestFocus();
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite um valor válido", "Valor inválido", JOptionPane.OK_OPTION);
                            txtPreco.setBackground(Color.pink);
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum tamanho válido", "Tamanho inválido", JOptionPane.OK_OPTION);
                    }

                } else {
                    //parei aqui
                    if (ckNome.isSelected()) {
                        if (!txtNome.getText().equals("")) {
                            txtNome.setBackground(Color.white);
                            try {
                                double preco = Double.parseDouble(tblSabor.getValueAt(tblSabor.getSelectedRow(), 2).toString());
                                String tamanho = tblSabor.getValueAt(tblSabor.getSelectedRow(), 3).toString();
                                String nome = txtNome.getText();

                                String tipo = tblSabor.getValueAt(tblSabor.getSelectedRow(), 4).toString();
                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os dados: \nNome: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 1).toString() + "'\n\nPelos Seguintes Valores: \n\n"
                                        + "Nome: '" + txtNome.getText() + "'?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                //Confirmação antes do método
                                if (r == 0) {

                                    //INICIANDO O MÉTODO
                                    dao.AlterarDados(sb, tblSabor, nome, preco, tamanho, tipo);
                                    ckNome.setSelected(false);
                                    ckNomeActionPerformed(null);

                                    JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum sabor", "Selecionar Sabor", JOptionPane.OK_OPTION);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do sabor", "Preencher nome", JOptionPane.OK_OPTION);
                            txtNome.requestFocus();
                            txtNome.setBackground(Color.pink);
                        }
                    }
                    //parei aqui
                    if (ckPreco.isSelected()) {
                        try {
                            double preco = Double.parseDouble(txtPreco.getText());
                            if (preco >= 0) {
                                txtPreco.setBackground(Color.white);

                                String tamanho = tblSabor.getValueAt(tblSabor.getSelectedRow(), 3).toString();
                                String nome = tblSabor.getValueAt(tblSabor.getSelectedRow(), 1).toString();

                                String tipo = tblSabor.getValueAt(tblSabor.getSelectedRow(), 4).toString();
                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os dados: \nValor: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 2).toString() + "' \n\nPelos Seguintes Valores: \n\n"
                                        + "Nome: '" + txtNome.getText() + "' \nValor:'" + preco + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                //Confirmação antes do método
                                if (r == 0) {

                                    //INICIANDO O MÉTODO
                                    dao.AlterarDados(sb, tblSabor, nome, preco, tamanho, tipo);

                                    ckPreco.setSelected(false);
                                    ckPrecoActionPerformed(null);

                                    JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, digite um valor válido", "Valor inválido", JOptionPane.OK_OPTION);
                                txtPreco.setBackground(Color.pink);
                                txtPreco.setText("");
                                txtPreco.requestFocus();
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite um valor válido", "Valor inválido", JOptionPane.OK_OPTION);
                            txtPreco.setBackground(Color.pink);
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                        }
                    }
                    //parei aqui
                    if (ckTamanho.isSelected()) {
                        if (cbTamanho.getSelectedIndex() != 0) {
                            String tamanho = cbTamanho.getSelectedItem().toString();
                            try {
                                double preco = Double.parseDouble(tblSabor.getValueAt(tblSabor.getSelectedRow(), 2).toString());
                                String nome = tblSabor.getValueAt(tblSabor.getSelectedRow(), 1).toString();

                                String tipo = tblSabor.getValueAt(tblSabor.getSelectedRow(), 4).toString();
                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os dados:  \nTamanho: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 3).toString() + "' \n\nPelos Seguintes Valores: "
                                        + "Tamanho: '" + cbTamanho.getSelectedItem() + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                //Confirmação antes do método
                                if (r == 0) {

                                    //INICIANDO O MÉTODO
                                    dao.AlterarDados(sb, tblSabor, nome, preco, tamanho, tipo);

                                    ckTamanho.setSelected(false);
                                    ckTamanhoActionPerformed(null);

                                    JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                }

                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum sabor", "Selecionar Sabor", JOptionPane.OK_OPTION);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum tamanho", "Selecionar Tamanho", JOptionPane.OK_OPTION);
                        }
                    }
                    if (ckTipo.isSelected()) {
                        if (cbTipo.getSelectedIndex() != 0) {
                            String tipo = cbTipo.getSelectedItem().toString();
                            try {

                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os dados:  \nTipo: '" + tblSabor.getValueAt(tblSabor.getSelectedRow(), 4).toString() + "' \n\nPelos Seguintes Valores:"
                                        + "\nTipo: '" + cbTipo.getSelectedItem() + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                //Confirmação antes do método
                                if (r == 0) {
                                    String tamanho = tblSabor.getValueAt(tblSabor.getSelectedRow(), 3).toString();

                                    double preco = Double.parseDouble(tblSabor.getValueAt(tblSabor.getSelectedRow(), 2).toString());

                                    String nome = tblSabor.getValueAt(tblSabor.getSelectedRow(), 1).toString();

                                    //INICIANDO O MÉTODO
                                    dao.AlterarDados(sb, tblSabor, nome, preco, tamanho, tipo);
                                    ckNome.setSelected(false);

                                    ckTipo.setSelected(false);
                                    ckTipoActionPerformed(null);
                                    JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                }

                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum sabor", "Selecionar Sabor", JOptionPane.OK_OPTION);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo", "Selecionar Tipo", JOptionPane.OK_OPTION);
                        }
                    }

                }

                break;
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btnConfirmarActionPerformed

    private void ckTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckTipoActionPerformed
        if (ckTipo.isSelected()) {
            cbTipo.setEnabled(true);
            btnConfirmar.setEnabled(true);
        } else if (!ckTipo.isSelected()) {
            cbTipo.setEnabled(false);
            cbTipo.setSelectedIndex(0);
            if (!ckNome.isSelected() && !ckPreco.isSelected() && !ckTamanho.isSelected() && !ckTipo.isSelected()) {
                btnConfirmar.setEnabled(false);
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_ckTipoActionPerformed

    private void jLabel7AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jLabel7AncestorAdded
        ImageIcon icon = new ImageIcon("src/ProjetoImagem/tabela.png");
    jLabel7.setIcon(new ImageIcon(icon.getImage().getScaledInstance(jLabel7.getWidth(),jLabel7.getHeight(), icon.getIconWidth()))); // TODO add your handling code here:
    }//GEN-LAST:event_jLabel7AncestorAdded


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CbOpcao;
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JComboBox<String> cbTamanho;
    private javax.swing.JComboBox<String> cbTipo;
    private javax.swing.JCheckBox ckNome;
    private javax.swing.JCheckBox ckPreco;
    private javax.swing.JCheckBox ckTamanho;
    private javax.swing.JCheckBox ckTipo;
    private javax.swing.ButtonGroup grupoDeBotao1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPESQUISA;
    private javax.swing.JRadioButton rbIgual;
    private javax.swing.JRadioButton rbMaior;
    private javax.swing.JRadioButton rbMenor;
    private javax.swing.JTable tblSabor;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtPesquisar;
    private javax.swing.JTextField txtPreco;
    // End of variables declaration//GEN-END:variables
}
