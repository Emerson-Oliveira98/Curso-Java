/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ProjetoPizzaria.view;

import ProjetoPizzaria.DAO.PizzaDAO;
import ProjetoPizzaria.DAO.RelatórioDAO;
import ProjetoPizzaria.DAO.SaborBordaRecheadaDAO;
import ProjetoPizzaria.modelo.Pizza;
import ProjetoPizzaria.modelo.SaborBordaRecheada;
import ProjetoPizzaria.modelo.Sabores;
import java.awt.Color;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Casa
 */
public class IFrmCadPizzas extends javax.swing.JInternalFrame {

    int numSabores, idBorda;
    public DFrmCadPizzaIngredientes frm;
    public DFrmCadPizzaSabor frmSabor;
    String tamanho, tipo;
    double preco;
    double borda;
    String imagem = "";
    Pizza pizza = new Pizza();
    String nomeBorda;
    PizzaDAO dao = new PizzaDAO();

    /**
     * Creates new form IFrmCadPizzas
     */
    public IFrmCadPizzas() {
        super();
        initComponents();
        getContentPane().setBackground(Color.white);
        jPanel1.setBackground(Color.WHITE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GrupoDeBotao1 = new javax.swing.ButtonGroup();
        GrupoDeBotao2 = new javax.swing.ButtonGroup();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        txtNomePizza = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        CbQuantidadeSabor = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSabor = new javax.swing.JTable();
        btnAddSabor = new javax.swing.JButton();
        btnDelSabor = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblIngredientes = new javax.swing.JTable();
        btnAddIngredientes = new javax.swing.JButton();
        btnDelIngredientes = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        CbTamanho = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        RbSimBorda = new javax.swing.JRadioButton();
        RbNaoBorda = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        CbSaborBorda = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        txtPrecoBorda = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        areaPreparo = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        txtPrecoFinal = new javax.swing.JTextField();
        btnCadastrar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        rbTipoDoce = new javax.swing.JRadioButton();
        rbTipoSalgada = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        lblImagem = new javax.swing.JLabel();
        cbTempo = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Cadastramento de Pizza");
        setToolTipText("");
        setPreferredSize(new java.awt.Dimension(710, 590));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jPanel1.setPreferredSize(new java.awt.Dimension(675, 825));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Nome da Pizza:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Quantidade de Sabores:");

        CbQuantidadeSabor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2" }));
        CbQuantidadeSabor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CbQuantidadeSaborActionPerformed(evt);
            }
        });

        tblSabor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome do Sabor", "Preço", "Tamanho", "Tipo"
            }
        ));
        jScrollPane2.setViewportView(tblSabor);
        if (tblSabor.getColumnModel().getColumnCount() > 0) {
            tblSabor.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblSabor.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        btnAddSabor.setBackground(new java.awt.Color(102, 204, 0));
        btnAddSabor.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAddSabor.setText("Adicionar");
        btnAddSabor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSaborActionPerformed(evt);
            }
        });

        btnDelSabor.setBackground(new java.awt.Color(255, 51, 51));
        btnDelSabor.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnDelSabor.setText("Deletar");
        btnDelSabor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelSaborActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Tempo de Preparo(Minutos):");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Ingredientes:");

        tblIngredientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome do ingrediente", "Quantidade", "Tipo de medida"
            }
        ));
        jScrollPane1.setViewportView(tblIngredientes);
        if (tblIngredientes.getColumnModel().getColumnCount() > 0) {
            tblIngredientes.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblIngredientes.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        btnAddIngredientes.setBackground(new java.awt.Color(51, 204, 0));
        btnAddIngredientes.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAddIngredientes.setText("Adicionar");
        btnAddIngredientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddIngredientesActionPerformed(evt);
            }
        });

        btnDelIngredientes.setBackground(new java.awt.Color(255, 51, 51));
        btnDelIngredientes.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnDelIngredientes.setForeground(new java.awt.Color(255, 255, 255));
        btnDelIngredientes.setText("Deletar");
        btnDelIngredientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelIngredientesActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Tamanho da Pizza:");

        CbTamanho.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione o tamanho", "Grande", "Média", "Brotinho" }));
        CbTamanho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CbTamanhoActionPerformed(evt);
            }
        });

        jLabel6.setText("Borda Recheada?");

        GrupoDeBotao1.add(RbSimBorda);
        RbSimBorda.setText("Sim");
        RbSimBorda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RbSimBordaActionPerformed(evt);
            }
        });

        GrupoDeBotao1.add(RbNaoBorda);
        RbNaoBorda.setSelected(true);
        RbNaoBorda.setText("Não");
        RbNaoBorda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RbNaoBordaActionPerformed(evt);
            }
        });

        jLabel8.setText("Sabor da Borda");

        CbSaborBorda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione algum sabor" }));
        CbSaborBorda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CbSaborBordaActionPerformed(evt);
            }
        });

        jLabel9.setText("Preço da borda:");

        jLabel10.setText("Modo de Preparo:");

        areaPreparo.setColumns(20);
        areaPreparo.setRows(5);
        jScrollPane3.setViewportView(areaPreparo);

        jLabel11.setText("Preço Total:");

        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("ID:");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Tipo de Pizza:");

        GrupoDeBotao2.add(rbTipoDoce);
        rbTipoDoce.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rbTipoDoce.setText("Doce");
        rbTipoDoce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbTipoDoceActionPerformed(evt);
            }
        });

        GrupoDeBotao2.add(rbTipoSalgada);
        rbTipoSalgada.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rbTipoSalgada.setSelected(true);
        rbTipoSalgada.setText("Salgada");
        rbTipoSalgada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbTipoSalgadaActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("Imagem:");

        lblImagem.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        lblImagem.setText("Clique Aqui");
        lblImagem.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblImagem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblImagem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblImagemMouseClicked(evt);
            }
        });

        cbTempo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "5", "7", "10" }));

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCadastrar)
                .addGap(280, 280, 280))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CbQuantidadeSabor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblImagem, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(143, 143, 143))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addGap(48, 48, 48))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnAddIngredientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnDelIngredientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPrecoBorda, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(RbSimBorda)
                                .addGap(18, 18, 18)
                                .addComponent(RbNaoBorda)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CbSaborBorda, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addGap(18, 18, 18)
                                .addComponent(rbTipoDoce)
                                .addGap(31, 31, 31)
                                .addComponent(rbTipoSalgada))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(CbTamanho, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(38, 38, 38)
                                        .addComponent(jLabel13))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnAddSabor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnDelSabor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(18, 18, 18)
                                .addComponent(txtPrecoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(cbTempo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtNomePizza, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 27, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(CbTamanho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(rbTipoDoce)
                            .addComponent(rbTipoSalgada))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(CbQuantidadeSabor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnAddSabor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDelSabor))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtNomePizza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cbTempo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnAddIngredientes)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnDelIngredientes)))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(RbSimBorda)
                                .addComponent(RbNaoBorda)
                                .addComponent(jLabel8)
                                .addComponent(CbSaborBorda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPrecoBorda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(txtPrecoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblImagem, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnCadastrar)
                .addContainerGap(86, Short.MAX_VALUE))
        );

        jScrollPane4.setViewportView(jPanel1);

        jLabel14.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jLabel14AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 713, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddSaborActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSaborActionPerformed
        numSabores = Integer.parseInt(CbQuantidadeSabor.getSelectedItem().toString());
        DefaultTableModel model = (DefaultTableModel) tblSabor.getModel();
        preco = 0;
        if (numSabores > tblSabor.getRowCount()) {
            if (rbTipoDoce.isSelected()) {
                tipo = "Doce";
            }
            if (rbTipoSalgada.isSelected()) {
                tipo = "Salgada";
            }
            btnAddSabor.setEnabled(true);
            frmSabor = new DFrmCadPizzaSabor(this, true);
            frmSabor.tamanho = tamanho;
            frmSabor.tipo = tipo;
            frmSabor.setVisible(true);

            if (frmSabor.sabor) {
                model.addRow(new Object[]{
                    frmSabor.IdSabor,
                    frmSabor.NomeSabor,
                    frmSabor.preco,
                    frmSabor.tamanho,
                    frmSabor.tipo
                });
            }

            switch (CbQuantidadeSabor.getSelectedIndex()) {
                case 0:
                    if (tblSabor.getRowCount() == 1) {
                        txtNomePizza.setText(" ' " + tblSabor.getValueAt(0, 1).toString() + " '");
                        preco = Double.parseDouble(tblSabor.getValueAt(0, 2).toString());
                        txtPrecoFinal.setText(String.valueOf(preco));

                        if (tblSabor.getRowCount() == numSabores && CbTamanho.getSelectedIndex() != 0 && tblIngredientes.getRowCount() > 0) {
                            btnCadastrar.setEnabled(true);
                        } else {
                            btnCadastrar.setEnabled(false);
                        }

                        if (tblSabor.getRowCount() == 0) {
                            txtNomePizza.setText("");
                            preco = 0 + borda;
                            txtPrecoFinal.setText(String.valueOf(preco));
                            btnCadastrar.setEnabled(false);
                        }

                    }
                    break;
                case 1:
                    if (tblSabor.getRowCount() == 2) {
                        txtNomePizza.setText("' " + tblSabor.getValueAt(0, 1).toString() + " ' e '" + tblSabor.getValueAt(1, 1).toString() + " ' ");
                        for (int i = 0; i <= model.getRowCount() - 1; i++) {
                            //    JOptionPane.showMessageDialog(null,i);
                            preco += Double.parseDouble(tblSabor.getValueAt(i, 2).toString());

                        }
                        if (tblSabor.getRowCount() == numSabores && CbTamanho.getSelectedIndex() != 0 && tblIngredientes.getRowCount() > 0) {
                            btnCadastrar.setEnabled(true);
                        } else {
                            btnCadastrar.setEnabled(false);
                        }

                        preco = preco / 2;
                    }
                    if (tblSabor.getRowCount() == 1) {
                        txtNomePizza.setText(" ' " + tblSabor.getValueAt(0, 1).toString() + " '");
                        for (int i = 0; i <= model.getRowCount() - 1; i++) {
                            //    JOptionPane.showMessageDialog(null,i);
                            preco += Double.parseDouble(tblSabor.getValueAt(i, 2).toString());
                        }
                        if (tblSabor.getRowCount() == numSabores && CbTamanho.getSelectedIndex() != 0 && tblIngredientes.getRowCount() > 0) {
                            btnCadastrar.setEnabled(true);
                        } else {
                            btnCadastrar.setEnabled(false);
                        }
                    }

                    preco += borda;
                    txtPrecoFinal.setText(String.valueOf(preco));
                    break;
            }
            if (numSabores == tblSabor.getRowCount()) {
                btnAddSabor.setEnabled(false);

            }

        } else {
            btnAddSabor.setEnabled(false);
        }

        if (tblSabor.getRowCount() > 1) {
            for (int i = 0; i < tblSabor.getRowCount(); i++) {
                for (int i2 = 0; i2 < tblSabor.getRowCount(); i2++) {
                    if (i != i2) {
                        if (tblSabor.getValueAt(i, 0).toString().equals(tblSabor.getValueAt(i2, 0).toString())) {
                            JOptionPane.showMessageDialog(null, "Ingrediente ja cadastrado, não foi possivel cadastrar", "Ingrediente já cadastrado", JOptionPane.OK_OPTION);
                            model.removeRow(tblSabor.getRowCount() - 1);
                            btnAddSabor.setEnabled(true);

                        }
                    }
                }
            }
        }
        if (tblSabor.getRowCount() > 0) {
            CbTamanho.setEnabled(false);
        }

    }//GEN-LAST:event_btnAddSaborActionPerformed

    private void CbQuantidadeSaborActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CbQuantidadeSaborActionPerformed
        numSabores = Integer.parseInt(CbQuantidadeSabor.getSelectedItem().toString());
        if (numSabores > tblSabor.getRowCount() && CbTamanho.getSelectedIndex() != 0) {
            btnAddSabor.setEnabled(true);
            btnCadastrar.setEnabled(false);
        } else {
            btnAddSabor.setEnabled(false);
            if (tblSabor.getRowCount() == numSabores && CbTamanho.getSelectedIndex() != 0 && tblIngredientes.getRowCount() > 0) {
                btnCadastrar.setEnabled(true);
            }
        }
        if (numSabores < tblSabor.getRowCount()) {
            JOptionPane.showMessageDialog(null, "Número de Sabores excede a quantidade cadastrada.", "Erro", JOptionPane.OK_OPTION);
            CbQuantidadeSabor.setSelectedIndex(tblSabor.getRowCount() - 1);

        }
    }//GEN-LAST:event_CbQuantidadeSaborActionPerformed

    private void btnDelSaborActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelSaborActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblSabor.getModel();
        preco = 0;
        try {
            model.removeRow(tblSabor.getSelectedRow());

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Por favor, selecione algum sabor", "Deletar Sabor", JOptionPane.OK_OPTION);

        }
        if (tblSabor.getRowCount() == 0) {
            CbTamanho.setEnabled(true);
        }
        switch (CbQuantidadeSabor.getSelectedIndex()) {
            case 0:
                if (tblSabor.getRowCount() == 1) {
                    txtNomePizza.setText(" ' " + tblSabor.getValueAt(0, 1).toString() + " '");
                    preco = Double.parseDouble(tblSabor.getValueAt(0, 2).toString());
                    txtPrecoFinal.setText(String.valueOf(preco));
                } else {
                    txtNomePizza.setText("");
                    txtPrecoFinal.setText("0");
                }

                break;
            case 1:
                if (tblSabor.getRowCount() == 2) {
                    txtNomePizza.setText("' " + tblSabor.getValueAt(0, 1).toString() + " ' e '" + tblSabor.getValueAt(1, 1).toString() + " ' ");
                    for (int i = 0; i <= model.getRowCount() - 1; i++) {
                        //    JOptionPane.showMessageDialog(null,i);
                        preco += Double.parseDouble(tblSabor.getValueAt(i, 2).toString());
                    }

                    preco = preco / 2;
                }
                if (tblSabor.getRowCount() == 1) {
                    txtNomePizza.setText(" ' " + tblSabor.getValueAt(0, 1).toString() + " '");
                    for (int i = 0; i <= model.getRowCount() - 1; i++) {
                        //    JOptionPane.showMessageDialog(null,i);
                        preco += Double.parseDouble(tblSabor.getValueAt(i, 2).toString());
                    }
                }
                if (tblSabor.getRowCount() == 0) {
                    preco = 0;
                    txtNomePizza.setText("");
                }
                preco += borda;
                txtPrecoFinal.setText(String.valueOf(preco));
                break;
        }
        if (tblSabor.getRowCount() == numSabores && CbTamanho.getSelectedIndex() != 0 && tblIngredientes.getRowCount() > 0) {
            btnCadastrar.setEnabled(true);
        } else {
            btnCadastrar.setEnabled(false);
        }
        btnAddSabor.setEnabled(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDelSaborActionPerformed

    private void btnAddIngredientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddIngredientesActionPerformed
        frm = new DFrmCadPizzaIngredientes(this, true);
        frm.setVisible(true);

        DefaultTableModel model = (DefaultTableModel) tblIngredientes.getModel();

        if (frm.ok) {
            model.addRow(new Object[]{
                frm.IdIngrediente,
                frm.NomeIngrediente,
                frm.Quantidade,
                frm.Tipo
            });
        }
        if (tblSabor.getRowCount() == numSabores && CbTamanho.getSelectedIndex() != 0 && tblIngredientes.getRowCount() >= 3) {
            btnCadastrar.setEnabled(true);
        } else {
            btnCadastrar.setEnabled(false);
        }
        if (tblIngredientes.getRowCount() > 1) {
            for (int i = 0; i < tblIngredientes.getRowCount(); i++) {
                for (int i2 = 0; i2 < tblIngredientes.getRowCount(); i2++) {
                    if (i != i2) {
                        if (tblIngredientes.getValueAt(i, 0).toString().equals(tblIngredientes.getValueAt(i2, 0).toString())) {
                            JOptionPane.showMessageDialog(null, "Ingrediente ja cadastrado, não foi possivel cadastrar", "Ingrediente já cadastrado", JOptionPane.OK_OPTION);
                            model.removeRow(tblIngredientes.getRowCount() - 1);

                        }
                    }
                }
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddIngredientesActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        SaborBordaRecheada saboBordRech = new SaborBordaRecheada();
        SaborBordaRecheadaDAO dao = new SaborBordaRecheadaDAO();
        dao.PesquisarInicialCombo(saboBordRech, CbSaborBorda);
        txtPrecoBorda.setEditable(false);
        txtPrecoBorda.setBackground(Color.lightGray);
        txtPrecoBorda.setText("0");
        CbSaborBorda.setSelectedIndex(0);
        CbSaborBorda.setEnabled(false);
        btnAddSabor.setEnabled(false);
        btnDelSabor.setEnabled(false);
        txtNomePizza.setEditable(false);
        txtNomePizza.setBackground(Color.lightGray);
        txtPrecoFinal.setBackground(Color.lightGray);
        txtPrecoFinal.setEditable(false);
        btnCadastrar.setEnabled(false);
        ImageIcon icon = new ImageIcon("src/ProjetoImagem/imgCliqueAqui.png");
        lblImagem.setIcon(new ImageIcon(icon.getImage().getScaledInstance(lblImagem.getWidth(), lblImagem.getHeight(), lblImagem.getWidth())));
    }//GEN-LAST:event_formInternalFrameOpened

    private void CbSaborBordaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CbSaborBordaActionPerformed
        if (CbSaborBorda.getSelectedIndex() != 0) {
            SaborBordaRecheada saboBordRech = new SaborBordaRecheada();
            SaborBordaRecheadaDAO dao = new SaborBordaRecheadaDAO();
            dao.PesquisarValorPorNomeCombo(saboBordRech, CbSaborBorda, txtPrecoBorda);
            preco = 0;
            borda = 0;
            if (tblSabor.getRowCount() > 0) {
                switch (CbQuantidadeSabor.getSelectedIndex()) {
                    case 0:
                        txtNomePizza.setText(" ' " + tblSabor.getValueAt(0, 1).toString() + " '");
                        preco = Double.parseDouble(tblSabor.getValueAt(0, 2).toString());
                        txtPrecoFinal.setText(String.valueOf(preco));
                        break;
                    case 1:
                        if (tblSabor.getRowCount() == 2) {
                            txtNomePizza.setText("' " + tblSabor.getValueAt(0, 1).toString() + " ' e '" + tblSabor.getValueAt(1, 1).toString() + " ' ");
                            for (int i = 0; i <= tblSabor.getRowCount() - 1; i++) {
                                //    JOptionPane.showMessageDialog(null,i);
                                preco += Double.parseDouble(tblSabor.getValueAt(i, 2).toString());
                            }

                            preco = preco / 2;
                        }
                        if (tblSabor.getRowCount() == 1) {
                            txtNomePizza.setText(" ' " + tblSabor.getValueAt(0, 1).toString() + " '");
                            for (int i = 0; i <= tblSabor.getRowCount() - 1; i++) {
                                //    JOptionPane.showMessageDialog(null,i);
                                preco += Double.parseDouble(tblSabor.getValueAt(i, 2).toString());
                            }
                        }

                        txtPrecoFinal.setText(String.valueOf(preco));
                        break;
                }
            }
            borda = Double.parseDouble(txtPrecoBorda.getText());
            preco += borda;
            txtPrecoFinal.setText(String.valueOf(preco));
            idBorda = dao.pesquisarIdPorNome(saboBordRech, CbSaborBorda.getSelectedItem().toString());
            JOptionPane.showMessageDialog(null, idBorda);
        }

    }//GEN-LAST:event_CbSaborBordaActionPerformed

    private void RbSimBordaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RbSimBordaActionPerformed
        if (RbSimBorda.isSelected()) {
            CbSaborBorda.setSelectedIndex(0);
            CbSaborBorda.setEnabled(true);
            DefaultTableModel model = (DefaultTableModel) tblSabor.getModel();
            preco = 0;
            switch (CbQuantidadeSabor.getSelectedIndex()) {
                case 0:
                    txtNomePizza.setText(" ' " + tblSabor.getValueAt(0, 1).toString() + " '");
                    preco = Double.parseDouble(tblSabor.getValueAt(0, 2).toString());
                    txtPrecoFinal.setText(String.valueOf(preco));
                    break;
                case 1:
                    if (tblSabor.getRowCount() == 2) {
                        txtNomePizza.setText("' " + tblSabor.getValueAt(0, 1).toString() + " ' e '" + tblSabor.getValueAt(1, 1).toString() + " ' ");
                        for (int i = 0; i <= model.getRowCount() - 1; i++) {
                            //    JOptionPane.showMessageDialog(null,i);
                            preco += Double.parseDouble(tblSabor.getValueAt(i, 2).toString());
                        }

                        preco = preco / 2;
                    }
                    if (tblSabor.getRowCount() == 1) {
                        txtNomePizza.setText(" ' " + tblSabor.getValueAt(0, 1).toString() + " '");
                        for (int i = 0; i <= model.getRowCount() - 1; i++) {
                            //    JOptionPane.showMessageDialog(null,i);
                            preco += Double.parseDouble(tblSabor.getValueAt(i, 2).toString());
                        }
                    }

                    txtPrecoFinal.setText(String.valueOf(preco));
                    break;
            }
        }
    }//GEN-LAST:event_RbSimBordaActionPerformed

    private void RbNaoBordaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RbNaoBordaActionPerformed
        if (RbNaoBorda.isSelected()) {
            CbSaborBorda.setSelectedIndex(0);
            CbSaborBorda.setEnabled(false);
            txtPrecoBorda.setText("0");
            borda = Double.parseDouble(txtPrecoBorda.getText());
            DefaultTableModel model = (DefaultTableModel) tblSabor.getModel();
            preco = 0;
            switch (CbQuantidadeSabor.getSelectedIndex()) {
                case 0:
                    txtNomePizza.setText(" ' " + tblSabor.getValueAt(0, 1).toString() + " '");
                    preco = Double.parseDouble(tblSabor.getValueAt(0, 2).toString());
                    txtPrecoFinal.setText(String.valueOf(preco));
                    break;
                case 1:
                    if (tblSabor.getRowCount() == 2) {
                        txtNomePizza.setText("' " + tblSabor.getValueAt(0, 1).toString() + " ' e '" + tblSabor.getValueAt(1, 1).toString() + " ' ");
                        for (int i = 0; i <= model.getRowCount() - 1; i++) {
                            //    JOptionPane.showMessageDialog(null,i);
                            preco += Double.parseDouble(tblSabor.getValueAt(i, 2).toString());
                        }

                        preco = preco / 2;
                    }
                    if (tblSabor.getRowCount() == 1) {
                        txtNomePizza.setText(" ' " + tblSabor.getValueAt(0, 1).toString() + " '");
                        for (int i = 0; i <= model.getRowCount() - 1; i++) {
                            //    JOptionPane.showMessageDialog(null,i);
                            preco += Double.parseDouble(tblSabor.getValueAt(i, 2).toString());
                        }
                    }

                    txtPrecoFinal.setText(String.valueOf(preco));
                    break;
            }
            preco += borda;
            txtPrecoFinal.setText(String.valueOf(preco));
        }

    }//GEN-LAST:event_RbNaoBordaActionPerformed

    private void CbTamanhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CbTamanhoActionPerformed
        if (CbTamanho.getSelectedIndex() == 0) {
            btnAddSabor.setEnabled(false);
            btnDelSabor.setEnabled(false);
        } else {
            btnAddSabor.setEnabled(true);
            btnDelSabor.setEnabled(true);
            tamanho = CbTamanho.getSelectedItem().toString();
        }


    }//GEN-LAST:event_CbTamanhoActionPerformed

    private void lblImagemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblImagemMouseClicked
        if(evt.getClickCount()==2){
                JFileChooser arquivo = new JFileChooser();
        
        arquivo.setDialogTitle("Escolha uma Imagem");
        arquivo.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int op = arquivo.showOpenDialog(this);
        if (op == JFileChooser.APPROVE_OPTION) {
            File file = new File("Caminho");
            file = arquivo.getSelectedFile(); //Selecionadno o arquivo
            imagem = file.getAbsolutePath();
            String verifica = imagem.substring(imagem.length() - 4, imagem.length());
            if (verifica.equals(".jpg") || verifica.equals(".png") || verifica.equals(".JPG") || verifica.equals(".PNG")) {

                ImageIcon icon = new ImageIcon(arquivo.getSelectedFile().getAbsolutePath());
                lblImagem.setIcon(new ImageIcon(icon.getImage().getScaledInstance(lblImagem.getWidth(), lblImagem.getHeight(), icon.getIconWidth())));
                // JOptionPane.showMessageDialog(null,verifica);
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum arquivo válido", "Arquivo inválido", JOptionPane.OK_OPTION);
                ImageIcon icon = new ImageIcon("src/ProjetoImagem/imgCliqueAqui.png");
                lblImagem.setIcon(new ImageIcon(icon.getImage().getScaledInstance(lblImagem.getWidth(), lblImagem.getHeight(), lblImagem.getWidth())));
                imagem = "";
            }

        }
        }
    

        // TODO add your handling code here:
    }//GEN-LAST:event_lblImagemMouseClicked

    private void jLabel14AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jLabel14AncestorAdded
        ImageIcon icon = new ImageIcon("src/ProjetoImagem/gerenciarout.png");
        jLabel14.setIcon(new ImageIcon(icon.getImage().getScaledInstance(jLabel14.getWidth(), jLabel14.getHeight(), icon.getIconWidth())));

    }//GEN-LAST:event_jLabel14AncestorAdded

    private void btnDelIngredientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelIngredientesActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblIngredientes.getModel();
        try {
            model.removeRow(tblIngredientes.getSelectedRow());

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Por favor, selecione algum ingrediente", "Deletar Ingrediente", JOptionPane.OK_OPTION);

        }
        if (tblSabor.getRowCount() == numSabores && CbTamanho.getSelectedIndex() != 0 && tblIngredientes.getRowCount() > 0) {
            btnCadastrar.setEnabled(true);
        } else {
            btnCadastrar.setEnabled(false);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btnDelIngredientesActionPerformed

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        if (txtID.getText().equals("")) {
            txtID.setBackground(Color.pink);
            txtID.requestFocus();
        } else {
            txtID.setBackground(Color.white);
            if (imagem.equals("")) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione insira uma imagem", "Inserir Imagem", JOptionPane.OK_OPTION);
            } else {
                try {
                    int ID = Integer.parseInt(txtID.getText());
                    if (ID <= 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, digite algum ID válido", "ID inválido", JOptionPane.OK_OPTION);
                        txtID.setBackground(Color.pink);
                        txtID.requestFocus();
                        txtID.setText("");
                    } else {
                        txtID.setBackground(Color.white);
                        int tempo = 0;

                        if (cbTempo.getSelectedIndex() != 0) {
                            switch (cbTempo.getSelectedIndex()) {
                                case 1:
                                    tempo = 5 * 100;
                                    break;
                                case 2:
                                    tempo = 7 * 100;
                                    break;
                                case 3:
                                    tempo = 10 * 100;
                                    break;

                            }
                            String nomePizza = txtNomePizza.getText();
                            nomePizza = nomePizza.replace("'", "");
                            JOptionPane.showMessageDialog(null, nomePizza);
                            String modoDePreparo = areaPreparo.getText();
                            int quantidadeIngrediente[] = new int[tblIngredientes.getRowCount() + 1];
                            int idIngrediente[] = new int[tblIngredientes.getRowCount() + 1];
                            int idSabor[] = new int[tblSabor.getRowCount() + 1];
                            //COMEÇANDO A INSERIR
                            if (RbNaoBorda.isSelected()) {
                                idBorda = 1;
                            }
                            int x = tblIngredientes.getRowCount();
                            try {
                                for (int i = 0; i <= x - 1; i++) {
                                    quantidadeIngrediente[i] = Integer.parseInt(tblIngredientes.getValueAt(i, 2).toString());
                                    //  JOptionPane.showMessageDialog(null,quantidadeIngrediente[i]);
                                    idIngrediente[i] = Integer.parseInt(tblIngredientes.getValueAt(i, 0).toString());
                                    //JOptionPane.showMessageDialog(null,idIngrediente[i]);
                                    idSabor[0] = Integer.parseInt(tblSabor.getValueAt(0, 0).toString());
                                    if (tblSabor.getRowCount() == 2 && i == 1) {
                                        idSabor[1] = Integer.parseInt(tblSabor.getValueAt(1, 0).toString());
                                        pizza.setIdSaborPizza_fk(idSabor[1]);
                                        //JOptionPane.showMessageDialog(null,idSabor[1],"ID sabor",JOptionPane.OK_OPTION);
                                    } else {
                                        pizza.setIdSaborPizza_fk(idSabor[0]);
                                        // JOptionPane.showMessageDialog(null,idSabor[0],"ID sabor",JOptionPane.OK_OPTION);
                                    }
                                    pizza.setIdPizza(ID);
                                    // JOptionPane.showMessageDialog(null,pizza.getIdPizza());
                                    pizza.setTipoDePizza(tipo);
                                    // JOptionPane.showMessageDialog(null,pizza.getTipoDePizza());
                                    pizza.setTamanhoPizza(CbTamanho.getSelectedItem().toString());
                                    // JOptionPane.showMessageDialog(null,pizza.getTamanhoPizza());
                                    pizza.setQuantidadeSabores(Integer.parseInt(CbQuantidadeSabor.getSelectedItem().toString()));
                                    // JOptionPane.showMessageDialog(null,pizza.getQuantidadeSabores());
                                    pizza.setNomePizza(nomePizza);
                                    // JOptionPane.showMessageDialog(null,pizza.getNomePizza());
                                    pizza.setTempoDePreparo(tempo);
                                    // JOptionPane.showMessageDialog(null,pizza.getTempoDePreparo());
                                    pizza.setModoDePreparo(modoDePreparo);
                                    //JOptionPane.showMessageDialog(null,pizza.getModoDePreparo());
                                    pizza.setQuantidadeIngrediente(quantidadeIngrediente[i]);
                                    // JOptionPane.showMessageDialog(null,pizza.getQuantidadeIngrediente());
                                    pizza.setImagem(imagem);
                                    // JOptionPane.showMessageDialog(null,pizza.getImagem());
                                    pizza.setPrecoTotal(preco);
                                    // JOptionPane.showMessageDialog(null,pizza.getPrecoTotal());
                                    pizza.setIdSaborBorda_fk(idBorda);
                                    //JOptionPane.showMessageDialog(null,pizza.getIdSaborBorda_fk());
                                    pizza.setIdIngrediente_fk(idIngrediente[i]);
                                    // JOptionPane.showMessageDialog(null,pizza.getIdIngrediente_fk());
                                    try {
                                        dao.cadastrarPizzaProcedure(pizza);
                                        
                                        if(i==(x-1)){
                                        JOptionPane.showMessageDialog(null,"Cadastrado com sucesso","Cadastrar Pizza",JOptionPane.OK_OPTION);
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "erro na procedure");
                                    }

                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Deu erro no FOR");
                            }

                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione um tempo de preparo válido", "Tempo de preparo válido", JOptionPane.OK_OPTION);
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, digite algum ID válido", "ID inválido", JOptionPane.OK_OPTION);
                    txtID.setBackground(Color.pink);
                    txtID.requestFocus();
                    txtID.setText("");
                }
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void rbTipoSalgadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbTipoSalgadaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbTipoSalgadaActionPerformed

    private void rbTipoDoceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbTipoDoceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbTipoDoceActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        RelatórioDAO d= new RelatórioDAO();
        d.GerarRel();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CbQuantidadeSabor;
    private javax.swing.JComboBox<String> CbSaborBorda;
    private javax.swing.JComboBox<String> CbTamanho;
    private javax.swing.ButtonGroup GrupoDeBotao1;
    private javax.swing.ButtonGroup GrupoDeBotao2;
    private javax.swing.JRadioButton RbNaoBorda;
    private javax.swing.JRadioButton RbSimBorda;
    private javax.swing.JTextArea areaPreparo;
    private javax.swing.JButton btnAddIngredientes;
    private javax.swing.JButton btnAddSabor;
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnDelIngredientes;
    private javax.swing.JButton btnDelSabor;
    private javax.swing.JComboBox<String> cbTempo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblImagem;
    private javax.swing.JRadioButton rbTipoDoce;
    private javax.swing.JRadioButton rbTipoSalgada;
    private javax.swing.JTable tblIngredientes;
    private javax.swing.JTable tblSabor;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNomePizza;
    private javax.swing.JTextField txtPrecoBorda;
    private javax.swing.JTextField txtPrecoFinal;
    // End of variables declaration//GEN-END:variables
}
