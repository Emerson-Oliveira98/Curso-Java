/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ProjetoPizzaria.view;

import ProjetoPizzaria.DAO.SaborBordaRecheadaDAO;
import ProjetoPizzaria.modelo.SaborBordaRecheada;
import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Casa
 */
public class IFrmGerenciaSaborBordas extends javax.swing.JInternalFrame {

    /**
     * Creates new form IFrmDelSaborBordas
     */
    public IFrmGerenciaSaborBordas() {
        initComponents();
        getContentPane().setBackground(Color.WHITE);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSaborBorda = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtNomeSabor = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtValor = new javax.swing.JTextField();
        BtnConfirmar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        CkAlterarNome = new javax.swing.JCheckBox();
        CkAlterarValor = new javax.swing.JCheckBox();
        CkDeletarSabor = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Gerenciamento de Bordas");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Oque deseja fazer?");

        tblSaborBorda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Sabor da Borda", "Valor da Borda "
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSaborBorda.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblSaborBorda);
        if (tblSaborBorda.getColumnModel().getColumnCount() > 0) {
            tblSaborBorda.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblSaborBorda.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Nome do sabor:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Valor:");

        txtValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtValorActionPerformed(evt);
            }
        });

        BtnConfirmar.setText("Confirmar");
        BtnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnConfirmarActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Por favor, selecione alguma borda.");

        CkAlterarNome.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CkAlterarNome.setText("Alterar Nome do Sabor");
        CkAlterarNome.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                CkAlterarNomeStateChanged(evt);
            }
        });
        CkAlterarNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CkAlterarNomeActionPerformed(evt);
            }
        });

        CkAlterarValor.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CkAlterarValor.setText("Alterar Valor");
        CkAlterarValor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                CkAlterarValorStateChanged(evt);
            }
        });
        CkAlterarValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CkAlterarValorActionPerformed(evt);
            }
        });

        CkDeletarSabor.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CkDeletarSabor.setText("Deletar Sabor da Borda");
        CkDeletarSabor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                CkDeletarSaborStateChanged(evt);
            }
        });
        CkDeletarSabor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CkDeletarSaborActionPerformed(evt);
            }
        });

        jLabel4.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jLabel4AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNomeSabor, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(CkAlterarNome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CkAlterarValor)
                        .addGap(32, 32, 32)
                        .addComponent(CkDeletarSabor)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(214, 214, 214)
                .addComponent(BtnConfirmar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CkAlterarNome)
                    .addComponent(CkAlterarValor)
                    .addComponent(CkDeletarSabor))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNomeSabor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(BtnConfirmar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened

        SaborBordaRecheada sb = new SaborBordaRecheada();
        SaborBordaRecheadaDAO dao = new SaborBordaRecheadaDAO();
        dao.PesquisarInicial(sb, tblSaborBorda);
        txtNomeSabor.setEditable(false);
        txtValor.setEditable(false);
        BtnConfirmar.setEnabled(false);
        txtNomeSabor.setBackground(Color.lightGray);
        txtValor.setBackground(Color.lightGray);

    }//GEN-LAST:event_formInternalFrameOpened

    private void BtnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnConfirmarActionPerformed
      DefaultTableModel model = (DefaultTableModel)tblSaborBorda.getModel();
        
        if (!CkAlterarNome.isSelected() && !CkAlterarValor.isSelected() && !CkDeletarSabor.isSelected()) {
            JOptionPane.showMessageDialog(null, "Por favor, Selecione alguma opção", "Selecione Opção", JOptionPane.OK_OPTION);
        } else if (CkAlterarNome.isSelected() && CkAlterarValor.isSelected()) {
            if (txtNomeSabor.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do sabor", "Preencher nome do sabor", JOptionPane.OK_OPTION);
            } else if (txtValor.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o valor da borda", "Preencher valor", JOptionPane.OK_OPTION);
            } else {
                try {
                    double x = Double.parseDouble(txtValor.getText());
                    try {
                        if (x < 0) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha o campo preço corretamente", "Preenche preço", JOptionPane.OK_OPTION);
                            txtValor.setText("");
                            txtValor.requestFocus();
                        } else {
                            int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos \n Sabor: '" + tblSaborBorda.getValueAt(tblSaborBorda.getSelectedRow(), 1) + " ' \n Valor: '" + tblSaborBorda.getValueAt(tblSaborBorda.getSelectedRow(), 2) + " ' \n \n Pelos Seguintes Valores: \n Sabor: '" + txtNomeSabor.getText() + " ' \n Valor: '" + txtValor.getText() + " ' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                            if (r == 0) {
                                SaborBordaRecheada sb = new SaborBordaRecheada();
                                SaborBordaRecheadaDAO dao = new SaborBordaRecheadaDAO();
                                dao.AlterarNomeValor(sb, tblSaborBorda, txtNomeSabor, txtValor);
                                JOptionPane.showMessageDialog(null, "Sabor e valor alterados com sucesso", "Alterar Sabor e valor", JOptionPane.OK_OPTION);
                                CkAlterarNome.setSelected(false);
                                CkAlterarValor.setSelected(false);
                                CkAlterarNomeActionPerformed(evt);
                                CkAlterarValorActionPerformed(evt);
                                model.setRowCount(0);
                                dao.PesquisarInicial(sb, tblSaborBorda);
                            }
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, selecione alguma borda", "Selecionar borda", JOptionPane.OK_OPTION);

                    }
                } catch (Exception x) {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha o campo preço corretamente", "Preenche preço", JOptionPane.OK_OPTION);
                    txtValor.setText("");
                    txtValor.requestFocus();
                }

            }

        } else {
            if (CkDeletarSabor.isSelected()) {
                try {
                    int r = JOptionPane.showConfirmDialog(null, "Deseja realmente deletar a borda: ' " + tblSaborBorda.getValueAt(tblSaborBorda.getSelectedRow(), 1) + " '?", "Deletar Borda", JOptionPane.YES_NO_OPTION);
                    if (r == 0) {
                        SaborBordaRecheada sb = new SaborBordaRecheada();
                        SaborBordaRecheadaDAO dao = new SaborBordaRecheadaDAO();
                        dao.DeletarSabor(sb, tblSaborBorda);
                        JOptionPane.showMessageDialog(null, "Sabor de borda deletado com sucesso!", "Deletar Sabor", JOptionPane.OK_OPTION);
                         model.setRowCount(0);
                                dao.PesquisarInicial(sb, tblSaborBorda);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, selecione alguma borda", "Selecionar borda", JOptionPane.OK_OPTION);
                }
            }
            if (CkAlterarNome.isSelected()) {
                if (!txtNomeSabor.getText().equals("")) {
                    try {
                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar o sabor da borda: '" + tblSaborBorda.getValueAt(tblSaborBorda.getSelectedRow(), 1) + "'  por: '" + txtNomeSabor.getText() + " ' ?");
                        if (r == 0) {

                            SaborBordaRecheada sb = new SaborBordaRecheada();
                            SaborBordaRecheadaDAO dao = new SaborBordaRecheadaDAO();
                            dao.AlterarNomeSabor(sb, tblSaborBorda, txtNomeSabor);
                            JOptionPane.showMessageDialog(null, "Sabor alterado com sucesso", "Alterar Sabor", JOptionPane.OK_OPTION);
                            CkAlterarNome.setSelected(false);
                            CkAlterarNomeActionPerformed(evt);
                             model.setRowCount(0);
                                dao.PesquisarInicial(sb, tblSaborBorda);
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, selecione alguma borda", "Selecionar borda", JOptionPane.OK_OPTION);

                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha o campo nome do sabor", "Preencher campo", JOptionPane.OK_OPTION);
                }
            }
            if (CkAlterarValor.isSelected()) {
                if (!txtValor.getText().equals("")) {
                    try {
                        double x = Double.parseDouble(txtValor.getText());

                        try {
                            if (x < 0) {

                                JOptionPane.showMessageDialog(null, "Por favor, preencha o campo preço corretamente", "Preenche preço", JOptionPane.OK_OPTION);
                                txtValor.setText("");
                                txtValor.requestFocus();
                            } else {
                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente o valor da borda: '" + tblSaborBorda.getValueAt(tblSaborBorda.getSelectedRow(), 2) + " ' por: '" + txtValor.getText() + " '?", "Alterar Valor", JOptionPane.YES_NO_OPTION);
                                if (r == 0) {
                                    SaborBordaRecheada sb = new SaborBordaRecheada();
                                    SaborBordaRecheadaDAO dao = new SaborBordaRecheadaDAO();
                                    dao.AlterarValor(sb, tblSaborBorda, txtValor);
                                    JOptionPane.showMessageDialog(null, "Valor alterado com sucesso", "Alterar Valor", JOptionPane.OK_OPTION);
                                    CkAlterarValor.setSelected(false);
                                    CkAlterarValorActionPerformed(evt);
                                     model.setRowCount(0);
                                dao.PesquisarInicial(sb, tblSaborBorda);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione alguma borda", "Selecionar borda", JOptionPane.OK_OPTION);
                        }
                    } catch (Exception x) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o campo preço corretamente", "Preenche preço", JOptionPane.OK_OPTION);
                        txtValor.setText("");
                        txtValor.requestFocus();
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha o campo Valor", "Preencher valor", JOptionPane.OK_OPTION);
                }
            }
        }
    }//GEN-LAST:event_BtnConfirmarActionPerformed

    private void CkAlterarNomeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_CkAlterarNomeStateChanged


    }//GEN-LAST:event_CkAlterarNomeStateChanged

    private void CkAlterarValorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_CkAlterarValorStateChanged

    }//GEN-LAST:event_CkAlterarValorStateChanged

    private void CkDeletarSaborStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_CkDeletarSaborStateChanged


    }//GEN-LAST:event_CkDeletarSaborStateChanged

    private void CkAlterarNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CkAlterarNomeActionPerformed
        if (CkAlterarNome.isSelected()) {
            txtNomeSabor.setEditable(true);
            txtNomeSabor.setBackground(Color.white);
            CkDeletarSabor.setEnabled(false);
            CkDeletarSabor.setSelected(false);
            BtnConfirmar.setEnabled(true);
        } else if (!CkAlterarNome.isSelected()) {
            txtNomeSabor.setEditable(false);
            txtNomeSabor.setBackground(Color.lightGray);
            txtNomeSabor.setText("");

            if (!CkAlterarNome.isSelected() && !CkAlterarValor.isSelected()) {
                BtnConfirmar.setEnabled(false);
                CkDeletarSabor.setEnabled(true);
            }

        }

    }//GEN-LAST:event_CkAlterarNomeActionPerformed

    private void CkAlterarValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CkAlterarValorActionPerformed
        if (CkAlterarValor.isSelected()) {
            txtValor.setEditable(true);
            txtValor.setBackground(Color.white);
            CkDeletarSabor.setEnabled(false);
            CkDeletarSabor.setSelected(false);
            BtnConfirmar.setEnabled(true);
        } else if (!CkAlterarValor.isSelected()) {
            txtValor.setEditable(false);
            txtValor.setBackground(Color.lightGray);
            txtValor.setText("");
            if (!CkAlterarNome.isSelected() && !CkAlterarValor.isSelected()) {
                BtnConfirmar.setEnabled(false);
                CkDeletarSabor.setEnabled(true);
            }
        }

    }//GEN-LAST:event_CkAlterarValorActionPerformed

    private void CkDeletarSaborActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CkDeletarSaborActionPerformed
        if (CkDeletarSabor.isSelected()) {
            CkAlterarNome.setEnabled(false);
            CkAlterarNome.setSelected(false);
            CkAlterarValor.setEnabled(false);
            CkAlterarValor.setSelected(false);
            BtnConfirmar.setEnabled(true);
        } else if (!CkDeletarSabor.isSelected()) {
            CkAlterarNome.setEnabled(true);
            CkAlterarValor.setEnabled(true);
            BtnConfirmar.setEnabled(false);

        }
    }//GEN-LAST:event_CkDeletarSaborActionPerformed

    private void txtValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtValorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtValorActionPerformed

    private void jLabel4AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jLabel4AncestorAdded
        ImageIcon icon = new ImageIcon("src/ProjetoImagem/padrão.png");
    jLabel4.setIcon(new ImageIcon(icon.getImage().getScaledInstance(jLabel4.getWidth(),jLabel4.getHeight(), icon.getIconWidth()))); // TODO add your handling code here:
    }//GEN-LAST:event_jLabel4AncestorAdded


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnConfirmar;
    private javax.swing.JCheckBox CkAlterarNome;
    private javax.swing.JCheckBox CkAlterarValor;
    private javax.swing.JCheckBox CkDeletarSabor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblSaborBorda;
    private javax.swing.JTextField txtNomeSabor;
    private javax.swing.JTextField txtValor;
    // End of variables declaration//GEN-END:variables
}
