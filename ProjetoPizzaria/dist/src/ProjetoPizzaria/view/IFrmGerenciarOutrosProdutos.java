/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ProjetoPizzaria.view;

import ProjetoPizzaria.DAO.OutrosProdutosDAO;
import ProjetoPizzaria.modelo.OutrosProdutos;
import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Casa
 */
public class IFrmGerenciarOutrosProdutos extends javax.swing.JInternalFrame {

    /**
     * Creates new form IFrmGerenciarOutrosProdutos
     */
    public IFrmGerenciarOutrosProdutos() {
        initComponents();
        getContentPane().setBackground(Color.white);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblProdutos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtNomeProduto = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnConfirmar = new javax.swing.JButton();
        CkDeletarProduto = new javax.swing.JCheckBox();
        ckAlterarNomeProduto = new javax.swing.JCheckBox();
        ckAlterarPreco = new javax.swing.JCheckBox();
        ckAlterarQuantidade = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        txtNovoNomeProduto = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPreco = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtQuantidade = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtQuantMax = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtQuantMin = new javax.swing.JTextField();
        ckQuantMax = new javax.swing.JCheckBox();
        ckQuantMin = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Gerenciamento de Outros Produtos");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        tblProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome do Produto", "Preço", "Quantidade em Estoque", "Quantidade máxima", "Quantidade mínima"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblProdutos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblProdutos);
        if (tblProdutos.getColumnModel().getColumnCount() > 0) {
            tblProdutos.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblProdutos.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Digite o nome do Produto:");

        txtNomeProduto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNomeProdutoKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Oque deseja fazer?");

        btnConfirmar.setBackground(new java.awt.Color(255, 51, 51));
        btnConfirmar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnConfirmar.setForeground(new java.awt.Color(255, 255, 255));
        btnConfirmar.setText("Confirmar");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });

        CkDeletarProduto.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CkDeletarProduto.setText("Deletar Produto");
        CkDeletarProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CkDeletarProdutoActionPerformed(evt);
            }
        });

        ckAlterarNomeProduto.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ckAlterarNomeProduto.setText("Alterar Nome do Produto");
        ckAlterarNomeProduto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckAlterarNomeProdutoActionPerformed(evt);
            }
        });

        ckAlterarPreco.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ckAlterarPreco.setText("Alterar Preço do Produto");
        ckAlterarPreco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckAlterarPrecoActionPerformed(evt);
            }
        });

        ckAlterarQuantidade.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ckAlterarQuantidade.setText("Alterar Quantidade em Estoque");
        ckAlterarQuantidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckAlterarQuantidadeActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Novo Nome do Produto:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Preço:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Quantidade em estoque:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Quantidade máxima:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Quantidade mínima:");

        ckQuantMax.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ckQuantMax.setText("Alterar Quantidade Máxima");
        ckQuantMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckQuantMaxActionPerformed(evt);
            }
        });

        ckQuantMin.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ckQuantMin.setText("Alterar Quantidade Mínima");
        ckQuantMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckQuantMinActionPerformed(evt);
            }
        });

        jLabel8.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jLabel8AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNovoNomeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPreco, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtQuantMax, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtQuantMin, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNomeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CkDeletarProduto)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ckAlterarNomeProduto))
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addComponent(ckAlterarPreco)
                        .addGap(18, 18, 18)
                        .addComponent(ckAlterarQuantidade)
                        .addGap(18, 18, 18)
                        .addComponent(ckQuantMax)
                        .addGap(18, 18, 18)
                        .addComponent(ckQuantMin)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)))
            .addGroup(layout.createSequentialGroup()
                .addGap(474, 474, 474)
                .addComponent(btnConfirmar)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNomeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CkDeletarProduto)
                    .addComponent(ckAlterarNomeProduto)
                    .addComponent(ckAlterarPreco)
                    .addComponent(ckAlterarQuantidade)
                    .addComponent(ckQuantMax)
                    .addComponent(ckQuantMin))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNovoNomeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtPreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtQuantMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtQuantMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnConfirmar)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        OutrosProdutos op = new OutrosProdutos();
        OutrosProdutosDAO dao = new OutrosProdutosDAO();
        dao.pesquisaInicial(op, tblProdutos);
        btnConfirmar.setEnabled(false);
        txtNovoNomeProduto.setEditable(false);
        txtNovoNomeProduto.setBackground(Color.lightGray);
        txtQuantidade.setEditable(false);
        txtQuantidade.setBackground(Color.lightGray);
        txtPreco.setEditable(false);
        txtPreco.setBackground(Color.lightGray);
        txtQuantMax.setEditable(false);
        txtQuantMax.setBackground(Color.lightGray);
        txtQuantMin.setEditable(false);
        txtQuantMin.setBackground(Color.lightGray);
        
    }//GEN-LAST:event_formInternalFrameOpened
    
    private void txtNomeProdutoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomeProdutoKeyReleased
        OutrosProdutos op = new OutrosProdutos();
        OutrosProdutosDAO dao = new OutrosProdutosDAO();
        dao.pesquisarPorNome(op, tblProdutos, txtNomeProduto);
        
    }//GEN-LAST:event_txtNomeProdutoKeyReleased
    
    private void CkDeletarProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CkDeletarProdutoActionPerformed
        if (CkDeletarProduto.isSelected()) {
            ckAlterarQuantidade.setEnabled(false);
            ckAlterarQuantidade.setSelected(false);
            ckAlterarNomeProduto.setEnabled(false);
            ckAlterarNomeProduto.setSelected(false);
            ckAlterarPreco.setEnabled(false);
            ckAlterarPreco.setSelected(false);
            btnConfirmar.setEnabled(true);
            ckQuantMax.setEnabled(false);
            ckQuantMax.setSelected(false);
            ckQuantMin.setEnabled(false);
            ckQuantMin.setSelected(false);
            
        } else if (!CkDeletarProduto.isSelected()) {
            ckAlterarQuantidade.setEnabled(true);
            ckAlterarNomeProduto.setEnabled(true);
            ckQuantMax.setEnabled(true);
            ckQuantMin.setEnabled(true);
            ckAlterarPreco.setEnabled(true);
            btnConfirmar.setEnabled(false);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_CkDeletarProdutoActionPerformed
    
    private void ckAlterarNomeProdutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckAlterarNomeProdutoActionPerformed
        if (ckAlterarNomeProduto.isSelected()) {
            txtNovoNomeProduto.setEditable(true);
            txtNovoNomeProduto.setBackground(Color.white);
            btnConfirmar.setEnabled(true);
            CkDeletarProduto.setEnabled(false);
        } else if (!ckAlterarNomeProduto.isSelected()) {
            txtNovoNomeProduto.setEditable(false);
            txtNovoNomeProduto.setBackground(Color.lightGray);
            txtNovoNomeProduto.setText("");
            if (!ckAlterarNomeProduto.isSelected() && !ckAlterarQuantidade.isSelected() && !ckAlterarPreco.isSelected() && !ckQuantMax.isSelected() && !ckQuantMin.isSelected()) {
                CkDeletarProduto.setEnabled(true);
                btnConfirmar.setEnabled(false);
                
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_ckAlterarNomeProdutoActionPerformed
    
    private void ckAlterarPrecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckAlterarPrecoActionPerformed
        if (ckAlterarPreco.isSelected()) {
            txtPreco.setEditable(true);
            txtPreco.setBackground(Color.white);
            CkDeletarProduto.setEnabled(false);
            btnConfirmar.setEnabled(true);
        } else if (!ckAlterarPreco.isSelected()) {
            txtPreco.setEditable(false);
            txtPreco.setBackground(Color.lightGray);
            txtPreco.setText("");
            if (!ckAlterarNomeProduto.isSelected() && !ckAlterarQuantidade.isSelected() && !ckAlterarPreco.isSelected() && !ckQuantMax.isSelected() && !ckQuantMin.isSelected()) {
                CkDeletarProduto.setEnabled(true);
                btnConfirmar.setEnabled(false);
                
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_ckAlterarPrecoActionPerformed
    
    private void ckAlterarQuantidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckAlterarQuantidadeActionPerformed
        if (ckAlterarQuantidade.isSelected()) {
            txtQuantidade.setEditable(true);
            txtQuantidade.setBackground(Color.white);
            CkDeletarProduto.setEnabled(false);
            btnConfirmar.setEnabled(true);
        } else if (!ckAlterarQuantidade.isSelected()) {
            txtQuantidade.setEditable(false);
            txtQuantidade.setBackground(Color.lightGray);
            txtQuantidade.setText("");
            if (!ckAlterarNomeProduto.isSelected() && !ckAlterarQuantidade.isSelected() && !ckAlterarPreco.isSelected() && !ckQuantMax.isSelected() && !ckQuantMin.isSelected()) {
                CkDeletarProduto.setEnabled(true);
                btnConfirmar.setEnabled(false);
                
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_ckAlterarQuantidadeActionPerformed
    
    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblProdutos.getModel();
        if (ckAlterarNomeProduto.isSelected() && ckAlterarPreco.isSelected() && ckAlterarQuantidade.isSelected() && ckQuantMax.isSelected() && ckQuantMin.isSelected()) {
            if (!txtNovoNomeProduto.getText().equals("")) {
                txtNovoNomeProduto.setBackground(Color.white);
                try {
                    double preco = Double.parseDouble(txtPreco.getText());
                    if (preco >= 0) {
                        txtPreco.setBackground(Color.white);
                        try {
                            int quantidade = Integer.parseInt(txtQuantidade.getText());
                            if (quantidade >= 0) {
                                txtQuantidade.setBackground(Color.white);
                                try {
                                    int quantMax = Integer.parseInt(txtQuantMax.getText());
                                    if (quantMax > 0) {
                                        txtQuantMax.setBackground(Color.white);
                                        try {
                                            int quantMin = Integer.parseInt(txtQuantMin.getText());
                                            
                                            if (quantMin >= 0) {
                                                txtQuantMin.setBackground(Color.white);
                                                
                                                if (quantMin >= quantMax) {
                                                    JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                                    txtQuantMin.setText("");
                                                    txtQuantMin.setBackground(Color.pink);
                                                    txtQuantMin.requestFocus();
                                                } else if (quantMax < quantidade) {
                                                    JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                                    txtQuantMax.setText("");
                                                    txtQuantMax.setBackground(Color.pink);
                                                    txtQuantMax.requestFocus();
                                                } else if (quantMin > quantidade) {
                                                    JOptionPane.showMessageDialog(null, "A quantidade atual não pode ser maior que a quantidade mínima", "Quantidade atual inválida", JOptionPane.OK_OPTION);
                                                    txtQuantidade.setText("");
                                                    txtQuantidade.setBackground(Color.pink);
                                                    txtQuantidade.requestFocus();
                                                } else {
                                                    txtQuantidade.setBackground(Color.white);
                                                    txtQuantMax.setBackground(Color.white);
                                                    txtQuantMin.setBackground(Color.white);

                                                    //Confirmação antes do método
                                                    int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nNome: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1) + "' \nPreço: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2) + "' \nQuantidade: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3) + "' \nQuantidadeMáxima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4) + "' \nQuantidade mínima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5) + "' \n\nPelos Seguintes Dados: \n"
                                                            + "Nome: '" + txtNovoNomeProduto.getText() + "' \nPreço: '" + preco + "' \nQuantidade: '" + quantidade + "' \nQuantidade máxima: '" + quantMax + "' \nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                                    if (r == 0) {
                                                        //INICIANDO O MÉTODO
                                                        OutrosProdutos op = new OutrosProdutos();
                                                        OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                                        dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                                        JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                                        model.setRowCount(0);
                                                        dao.pesquisaInicial(op, tblProdutos);
                                                        
                                                        ckAlterarNomeProduto.setSelected(false);
                                                        ckAlterarNomeProdutoActionPerformed(null);
                                                        ckAlterarPreco.setSelected(false);
                                                        ckAlterarPrecoActionPerformed(null);
                                                        ckAlterarQuantidade.setSelected(false);
                                                        ckAlterarQuantidadeActionPerformed(null);
                                                        ckQuantMax.setSelected(false);
                                                        ckQuantMaxActionPerformed(null);
                                                        ckQuantMin.setSelected(false);
                                                        ckQuantMinActionPerformed(null);
                                                    }
                                                    
                                                }
                                                
                                            } else {
                                                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                                txtQuantMin.setText("");
                                                txtQuantMin.setBackground(Color.pink);
                                                txtQuantMin.requestFocus();
                                            }
                                        } catch (Exception e) {
                                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                            txtQuantMin.setText("");
                                            txtQuantMin.setBackground(Color.pink);
                                            txtQuantMin.requestFocus();
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMax.setText("");
                                        txtQuantMax.setBackground(Color.pink);
                                        txtQuantMax.requestFocus();
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMax.setText("");
                                    txtQuantMax.setBackground(Color.pink);
                                    txtQuantMax.requestFocus();
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setText("");
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                            txtQuantidade.setText("");
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.requestFocus();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                        txtPreco.setBackground(Color.pink);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                    txtPreco.setText("");
                    txtPreco.requestFocus();
                    txtPreco.setBackground(Color.pink);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do produto", "Preencher Nome", JOptionPane.OK_OPTION);
                txtNovoNomeProduto.setBackground(Color.pink);
                txtNovoNomeProduto.requestFocus();
            }
            
        } //PAREI AQUI 
        else if (ckAlterarNomeProduto.isSelected() && ckAlterarPreco.isSelected() && ckAlterarQuantidade.isSelected() && ckQuantMax.isSelected()) {
            if (!txtNovoNomeProduto.getText().equals("")) {
                txtNovoNomeProduto.setBackground(Color.white);
                try {
                    double preco = Double.parseDouble(txtPreco.getText());
                    if (preco >= 0) {
                        txtPreco.setBackground(Color.white);
                        try {
                            int quantidade = Integer.parseInt(txtQuantidade.getText());
                            if (quantidade >= 0) {
                                txtQuantidade.setBackground(Color.white);
                                try {
                                    int quantMax = Integer.parseInt(txtQuantMax.getText());
                                    if (quantMax > 0) {
                                        txtQuantMax.setBackground(Color.white);
                                        try {
                                            int quantMin = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5).toString());
                                            
                                            if (quantMin > quantMax) {
                                                JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade mínima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                                txtQuantMax.setText("");
                                                txtQuantMax.setBackground(Color.pink);
                                                txtQuantMax.requestFocus();
                                            } else if (quantMax < quantidade) {
                                                JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                                txtQuantMax.setText("");
                                                txtQuantMax.setBackground(Color.pink);
                                                txtQuantMax.requestFocus();
                                            } else if (quantMin > quantidade) {
                                                JOptionPane.showMessageDialog(null, "A quantidade atual não pode ser maior que a quantidade mínima", "Quantidade atual inválida", JOptionPane.OK_OPTION);
                                                txtQuantidade.setText("");
                                                txtQuantidade.setBackground(Color.pink);
                                                txtQuantidade.requestFocus();
                                            } else {
                                                txtQuantidade.setBackground(Color.white);
                                                txtQuantMax.setBackground(Color.white);

                                                //Confirmação antes do método
                                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nNome: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1) + "' \nPreço: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2) + "' \nQuantidade: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3) + "' \nQuantidadeMáxima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4) + "' \n\nPelos Seguintes Dados: \n"
                                                        + "Nome: '" + txtNovoNomeProduto.getText() + "' \nPreço: '" + preco + "' \nQuantidade: '" + quantidade + "' \nQuantidade máxima: '" + quantMax + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                                if (r == 0) {
                                                    //INICIANDO O MÉTODO
                                                    OutrosProdutos op = new OutrosProdutos();
                                                    OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                                    dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                                    JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                                    model.setRowCount(0);
                                                    dao.pesquisaInicial(op, tblProdutos);
                                                    
                                                    ckAlterarNomeProduto.setSelected(false);
                                                    ckAlterarNomeProdutoActionPerformed(null);
                                                    ckAlterarPreco.setSelected(false);
                                                    ckAlterarPrecoActionPerformed(null);
                                                    ckAlterarQuantidade.setSelected(false);
                                                    ckAlterarQuantidadeActionPerformed(null);
                                                    ckQuantMax.setSelected(false);
                                                    ckQuantMaxActionPerformed(null);
                                                }
                                                
                                            }
                                            
                                        } catch (Exception e) {
                                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar Produto", JOptionPane.OK_OPTION);
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMax.setText("");
                                        txtQuantMax.setBackground(Color.pink);
                                        txtQuantMax.requestFocus();
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMax.setText("");
                                    txtQuantMax.setBackground(Color.pink);
                                    txtQuantMax.requestFocus();
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setText("");
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                            txtQuantidade.setText("");
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.requestFocus();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                        txtPreco.setBackground(Color.pink);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                    txtPreco.setText("");
                    txtPreco.requestFocus();
                    txtPreco.setBackground(Color.pink);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do produto", "Preencher Nome", JOptionPane.OK_OPTION);
                txtNovoNomeProduto.setBackground(Color.pink);
                txtNovoNomeProduto.requestFocus();
            }
            
        } //PAREI AQUI
        else if (ckAlterarNomeProduto.isSelected() && ckAlterarPreco.isSelected() && ckAlterarQuantidade.isSelected() && ckQuantMin.isSelected()) {
            if (!txtNovoNomeProduto.getText().equals("")) {
                txtNovoNomeProduto.setBackground(Color.white);
                try {
                    double preco = Double.parseDouble(txtPreco.getText());
                    if (preco >= 0) {
                        txtPreco.setBackground(Color.white);
                        try {
                            int quantidade = Integer.parseInt(txtQuantidade.getText());
                            if (quantidade >= 0) {
                                txtQuantidade.setBackground(Color.white);
                                try {
                                    int quantMin = Integer.parseInt(txtQuantMax.getText());
                                    if (quantMin > 0) {
                                        txtQuantMax.setBackground(Color.white);
                                        try {
                                            int quantMax = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4).toString());
                                            
                                            if (quantMin >= 0) {
                                                txtQuantMin.setBackground(Color.white);
                                                
                                                if (quantMin > quantMax) {
                                                    JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                                    txtQuantMin.setText("");
                                                    txtQuantMin.setBackground(Color.pink);
                                                    txtQuantMin.requestFocus();
                                                } else if (quantMax < quantidade) {
                                                    JOptionPane.showMessageDialog(null, "A quantidade atual não pode ser maior que a quantidade máxima", "Quantidade atual inválida", JOptionPane.OK_OPTION);
                                                    txtQuantidade.setText("");
                                                    txtQuantidade.setBackground(Color.pink);
                                                    txtQuantidade.requestFocus();
                                                } else if (quantMin > quantidade) {
                                                    JOptionPane.showMessageDialog(null, "A quantidade atual não pode ser maior que a quantidade mínima", "Quantidade atual inválida", JOptionPane.OK_OPTION);
                                                    txtQuantidade.setText("");
                                                    txtQuantidade.setBackground(Color.pink);
                                                    txtQuantidade.requestFocus();
                                                } else {
                                                    txtQuantidade.setBackground(Color.white);
                                                    
                                                    txtQuantMin.setBackground(Color.white);

                                                    //Confirmação antes do método
                                                    int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nNome: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1) + "' \nPreço: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2) + "' \nQuantidade: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3) + "' \nQuantidade mínima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5) + "' \n\nPelos Seguintes Dados: \n"
                                                            + "Nome: '" + txtNovoNomeProduto.getText() + "' \nPreço: '" + preco + "' \nQuantidade: '" + quantidade + "' \nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                                    if (r == 0) {
                                                        //INICIANDO O MÉTODO
                                                        OutrosProdutos op = new OutrosProdutos();
                                                        OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                                        dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                                        JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                                        model.setRowCount(0);
                                                        dao.pesquisaInicial(op, tblProdutos);
                                                        
                                                    ckAlterarNomeProduto.setSelected(false);
                                                    ckAlterarNomeProdutoActionPerformed(null);
                                                    ckAlterarPreco.setSelected(false);
                                                    ckAlterarPrecoActionPerformed(null);
                                                    ckAlterarQuantidade.setSelected(false);
                                                    ckAlterarQuantidadeActionPerformed(null);
                                                    ckQuantMin.setSelected(false);
                                                        ckQuantMinActionPerformed(null);
                                                    }
                                                    
                                                }
                                                
                                            }
                                        } catch (Exception e) {
                                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar Produto", JOptionPane.OK_OPTION);
                                        }
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setText("");
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.requestFocus();
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMin.setText("");
                                    txtQuantMin.setBackground(Color.pink);
                                    txtQuantMin.requestFocus();
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setText("");
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                            txtQuantidade.setText("");
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.requestFocus();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                        txtPreco.setBackground(Color.pink);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                    txtPreco.setText("");
                    txtPreco.requestFocus();
                    txtPreco.setBackground(Color.pink);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do produto", "Preencher Nome", JOptionPane.OK_OPTION);
                txtNovoNomeProduto.setBackground(Color.pink);
                txtNovoNomeProduto.requestFocus();
            }
            
        } //PAREI AQUI
        else if (ckAlterarNomeProduto.isSelected() && ckAlterarQuantidade.isSelected() && ckQuantMax.isSelected() && ckQuantMin.isSelected()) {
            if (!txtNovoNomeProduto.getText().equals("")) {
                txtNovoNomeProduto.setBackground(Color.white);
                try {
                    int quantidade = Integer.parseInt(txtQuantidade.getText());
                    if (quantidade >= 0) {
                        txtQuantidade.setBackground(Color.white);
                        try {
                            int quantMax = Integer.parseInt(txtQuantMax.getText());
                            if (quantMax > 0) {
                                txtQuantMax.setBackground(Color.white);
                                try {
                                    int quantMin = Integer.parseInt(txtQuantMin.getText());
                                    
                                    if (quantMin >= 0) {
                                        txtQuantMin.setBackground(Color.white);
                                        
                                        try {
                                            double preco = Double.parseDouble(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2).toString());
                                            
                                            if (quantMin > quantMax) {
                                                JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                                txtQuantMin.setText("");
                                                txtQuantMin.setBackground(Color.pink);
                                                txtQuantMin.requestFocus();
                                            } else if (quantMax < quantidade) {
                                                JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                                txtQuantMax.setText("");
                                                txtQuantMax.setBackground(Color.pink);
                                                txtQuantMax.requestFocus();
                                            } else if (quantMin > quantidade) {
                                                JOptionPane.showMessageDialog(null, "A quantidade atual não pode ser maior que a quantidade mínima", "Quantidade atual inválida", JOptionPane.OK_OPTION);
                                                txtQuantidade.setText("");
                                                txtQuantidade.setBackground(Color.pink);
                                                txtQuantidade.requestFocus();
                                            } else {
                                                txtQuantidade.setBackground(Color.white);
                                                txtQuantMax.setBackground(Color.white);
                                                txtQuantMin.setBackground(Color.white);

                                                //Confirmação antes do método
                                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nNome: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1) + "' \nQuantidade: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3) + "' \nQuantidadeMáxima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4) + "' \nQuantidade mínima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5) + "' \n\nPelos Seguintes Dados: \n"
                                                        + "Nome: '" + txtNovoNomeProduto.getText() + "' \nQuantidade: '" + quantidade + "' \nQuantidade máxima: '" + quantMax + "' \nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                                if (r == 0) {
                                                    //INICIANDO O MÉTODO
                                                    OutrosProdutos op = new OutrosProdutos();
                                                    OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                                    dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                                    JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                                    model.setRowCount(0);
                                                    dao.pesquisaInicial(op, tblProdutos);
                                                        ckAlterarNomeProduto.setSelected(false);
                                                        ckAlterarNomeProdutoActionPerformed(null);
                                                        ckAlterarQuantidade.setSelected(false);
                                                        ckAlterarQuantidadeActionPerformed(null);
                                                        ckQuantMax.setSelected(false);
                                                        ckQuantMaxActionPerformed(null);
                                                        ckQuantMin.setSelected(false);
                                                        ckQuantMinActionPerformed(null);
                                                }
                                                
                                            }
                                        } catch (Exception e) {
                                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar Produto", JOptionPane.OK_OPTION);
                                        }
                                        
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setText("");
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.requestFocus();
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMin.setText("");
                                    txtQuantMin.setBackground(Color.pink);
                                    txtQuantMin.requestFocus();
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setText("");
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.requestFocus();
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                            txtQuantMax.setText("");
                            txtQuantMax.setBackground(Color.pink);
                            txtQuantMax.requestFocus();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                        txtQuantidade.setText("");
                        txtQuantidade.setBackground(Color.pink);
                        txtQuantidade.requestFocus();
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                    txtQuantidade.setText("");
                    txtQuantidade.setBackground(Color.pink);
                    txtQuantidade.requestFocus();
                }
                
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do produto", "Preencher Nome", JOptionPane.OK_OPTION);
                txtNovoNomeProduto.setBackground(Color.pink);
                txtNovoNomeProduto.requestFocus();
            }
            
        } //PAREI AQUI
        else if (ckAlterarPreco.isSelected() && ckAlterarQuantidade.isSelected() && ckQuantMax.isSelected() && ckQuantMin.isSelected()) {
            try {
                double preco = Double.parseDouble(txtPreco.getText());
                if (preco >= 0) {
                    txtPreco.setBackground(Color.white);
                    
                    try {
                        int quantidade = Integer.parseInt(txtQuantidade.getText());
                        if (quantidade >= 0) {
                            txtQuantidade.setBackground(Color.white);
                            try {
                                int quantMax = Integer.parseInt(txtQuantMax.getText());
                                if (quantMax > 0) {
                                    txtQuantMax.setBackground(Color.white);
                                    try {
                                        int quantMin = Integer.parseInt(txtQuantMin.getText());
                                        
                                        if (quantMin >= 0) {
                                            txtQuantMin.setBackground(Color.white);
                                            
                                            if (quantMin > quantMax) {
                                                JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                                txtQuantMin.setText("");
                                                txtQuantMin.setBackground(Color.pink);
                                                txtQuantMin.requestFocus();
                                            } else if (quantMax < quantidade) {
                                                JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                                txtQuantMax.setText("");
                                                txtQuantMax.setBackground(Color.pink);
                                                txtQuantMax.requestFocus();
                                            } else if (quantMin > quantidade) {
                                                JOptionPane.showMessageDialog(null, "A quantidade atual não pode ser maior que a quantidade mínima", "Quantidade atual inválida", JOptionPane.OK_OPTION);
                                                txtQuantidade.setText("");
                                                txtQuantidade.setBackground(Color.pink);
                                                txtQuantidade.requestFocus();
                                            } else {
                                                txtQuantidade.setBackground(Color.white);
                                                txtQuantMax.setBackground(Color.white);
                                                txtQuantMin.setBackground(Color.white);

                                                //Confirmação antes do método
                                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos:  \nPreço: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2) + "' \nQuantidade: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3) + "' \nQuantidade Máxima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4) + "' \nQuantidade mínima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5) + "' \n\nPelos Seguintes Dados: \n"
                                                        + " \nPreço: '" + preco + "' \nQuantidade: '" + quantidade + "' \nQuantidade máxima: '" + quantMax + "' \nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                                if (r == 0) {
                                                    //INICIANDO O MÉTODO
                                                    String nome = tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1).toString();
                                                    txtNovoNomeProduto.setText(nome);
                                                    OutrosProdutos op = new OutrosProdutos();
                                                    OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                                    dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                                    JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                                    model.setRowCount(0);
                                                    dao.pesquisaInicial(op, tblProdutos);
                                                   
                                                        ckAlterarPreco.setSelected(false);
                                                        ckAlterarPrecoActionPerformed(null);
                                                        ckAlterarQuantidade.setSelected(false);
                                                        ckAlterarQuantidadeActionPerformed(null);
                                                        ckQuantMax.setSelected(false);
                                                        ckQuantMaxActionPerformed(null);
                                                        ckQuantMin.setSelected(false);
                                                        ckQuantMinActionPerformed(null); 
                                                }
                                                
                                            }
                                            
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                            txtQuantMin.setText("");
                                            txtQuantMin.setBackground(Color.pink);
                                            txtQuantMin.requestFocus();
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setText("");
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.requestFocus();
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMax.setText("");
                                    txtQuantMax.setBackground(Color.pink);
                                    txtQuantMax.requestFocus();
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setText("");
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.requestFocus();
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                            txtQuantidade.setText("");
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.requestFocus();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                        txtQuantidade.setText("");
                        txtQuantidade.setBackground(Color.pink);
                        txtQuantidade.requestFocus();
                    }
                    
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                    txtPreco.setText("");
                    txtPreco.requestFocus();
                    txtPreco.setBackground(Color.pink);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                txtPreco.setText("");
                txtPreco.requestFocus();
                txtPreco.setBackground(Color.pink);
            }
            
        } //PAREI AQUI
        else if (ckAlterarNomeProduto.isSelected() && ckAlterarPreco.isSelected() && ckQuantMax.isSelected()) {
            if (!txtNovoNomeProduto.getText().equals("")) {
                txtNovoNomeProduto.setBackground(Color.white);
                try {
                    double preco = Double.parseDouble(txtPreco.getText());
                    if (preco >= 0) {
                        txtPreco.setBackground(Color.white);
                        try {
                            int quantMax = Integer.parseInt(txtQuantMax.getText());
                            if (quantMax > 0) {
                                txtQuantMax.setBackground(Color.white);
                                
                                try {
                                    int quantidade, quantMin;
                                    quantidade = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3).toString());
                                    quantMin = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5).toString());
                                    if (quantMax <= quantMin) {
                                        JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade mínima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMax.setBackground(Color.pink);
                                        txtQuantMax.setText("");
                                        txtQuantMax.requestFocus();
                                    } else if (quantMax < quantidade) {
                                        JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMax.setBackground(Color.pink);
                                        txtQuantMax.setText("");
                                        txtQuantMax.requestFocus();
                                    } else {
                                        txtQuantMax.setBackground(Color.white);

                                        //Confirmação antes do método
                                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nNome:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1) + "' \nPreço: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2) + "' \nQuantidade Máxima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4) + "' \n\nPelos Seguintes Dados: \n"
                                                + "\nNome: '" + txtNovoNomeProduto.getText() + "' \nPreço: '" + preco + "' \nQuantidade máxima: '" + quantMax + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                        if (r == 0) {
                                            //INICIANDO O MÉTODO

                                            OutrosProdutos op = new OutrosProdutos();
                                            OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                            dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                            JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                            model.setRowCount(0);
                                            dao.pesquisaInicial(op, tblProdutos);
                                            ckAlterarNomeProduto.setSelected(false);
                                                        ckAlterarNomeProdutoActionPerformed(null);
                                                        ckAlterarPreco.setSelected(false);
                                                        ckAlterarPrecoActionPerformed(null);
                                                        ckQuantMax.setSelected(false);
                                                        ckQuantMaxActionPerformed(null);
                                                       
                                        }
                                        
                                    }
                                    
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar produto", JOptionPane.OK_OPTION);
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setText("");
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.requestFocus();
                            }
                            
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                            txtQuantMax.setText("");
                            txtQuantMax.setBackground(Color.pink);
                            txtQuantMax.requestFocus();
                        }
                        
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                        txtPreco.setBackground(Color.pink);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                    txtPreco.setText("");
                    txtPreco.requestFocus();
                    txtPreco.setBackground(Color.pink);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do produto", "Preencher Nome", JOptionPane.OK_OPTION);
                txtNovoNomeProduto.setBackground(Color.pink);
                txtNovoNomeProduto.requestFocus();
            }
            
        } //PAREI AQUI
        else if (ckAlterarNomeProduto.isSelected() && ckAlterarPreco.isSelected() && ckQuantMin.isSelected()) {
            if (!txtNovoNomeProduto.getText().equals("")) {
                txtNovoNomeProduto.setBackground(Color.white);
                try {
                    double preco = Double.parseDouble(txtPreco.getText());
                    if (preco >= 0) {
                        txtPreco.setBackground(Color.white);
                        try {
                            int quantMin = Integer.parseInt(txtQuantMin.getText());
                            if (quantMin > 0) {
                                txtQuantMin.setBackground(Color.white);
                                
                                try {
                                    int quantidade, quantMax;
                                    quantidade = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3).toString());
                                    quantMax = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4).toString());
                                    if (quantMin >= quantMax) {
                                        JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.setText("");
                                        txtQuantMin.requestFocus();
                                    } else if (quantMin > quantidade) {
                                        JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.setText("");
                                        txtQuantMin.requestFocus();
                                    } else {
                                        txtQuantMin.setBackground(Color.white);

                                        //Confirmação antes do método
                                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nNome:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1) + "' \nPreço: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2) + "' \nQuantidade Mínima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5) + "' \n\nPelos Seguintes Dados: \n"
                                                + "\nNome: '" + txtNovoNomeProduto.getText() + "' \nPreço: '" + preco + "' \nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                        if (r == 0) {
                                            //INICIANDO O MÉTODO

                                            OutrosProdutos op = new OutrosProdutos();
                                            OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                            dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                            JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                            model.setRowCount(0);
                                            dao.pesquisaInicial(op, tblProdutos);
                                            
                                             ckAlterarNomeProduto.setSelected(false);
                                             ckAlterarNomeProdutoActionPerformed(null);
                                             ckAlterarPreco.setSelected(false);
                                             ckAlterarPrecoActionPerformed(null);
                                             ckQuantMin.setSelected(false);
                                             ckQuantMinActionPerformed(null);
                                            
                                        }
                                        
                                    }
                                    
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar produto", JOptionPane.OK_OPTION);
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setText("");
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.requestFocus();
                            }
                            
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                            txtQuantMin.setText("");
                            txtQuantMin.setBackground(Color.pink);
                            txtQuantMin.requestFocus();
                        }
                        
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                        txtPreco.setBackground(Color.pink);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                    txtPreco.setText("");
                    txtPreco.requestFocus();
                    txtPreco.setBackground(Color.pink);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do produto", "Preencher Nome", JOptionPane.OK_OPTION);
                txtNovoNomeProduto.setBackground(Color.pink);
                txtNovoNomeProduto.requestFocus();
            }
            
        } //PAREI AQUI
        else if (ckAlterarNomeProduto.isSelected() && ckAlterarQuantidade.isSelected() && ckQuantMax.isSelected()) {
            if (!txtNovoNomeProduto.getText().equals("")) {
                txtNovoNomeProduto.setBackground(Color.white);
                try {
                    int quantidade = Integer.parseInt(txtQuantidade.getText());
                    if (quantidade >= 0) {
                        txtQuantidade.setBackground(Color.white);
                        try {
                            int quantMax = Integer.parseInt(txtQuantMax.getText());
                            if (quantMax > 0) {
                                txtQuantMax.setBackground(Color.white);
                                try {
                                    int quantMin;
                                    double preco;
                                    
                                    quantMin = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5).toString());
                                    preco = Double.parseDouble(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2).toString());
                                    
                                    if (quantMax <= quantMin) {
                                        JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade mínima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMax.setBackground(Color.pink);
                                        txtQuantMax.setText("");
                                        txtQuantMax.requestFocus();
                                    } else if (quantMax < quantidade) {
                                        JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMax.setBackground(Color.pink);
                                        txtQuantMax.setText("");
                                        txtQuantMax.requestFocus();
                                    } else {
                                        txtQuantMax.setBackground(Color.white);

                                        //Confirmação antes do método
                                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nNome:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1) + "' \nQuantidade: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3) + "' \nQuantidade Máxima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4) + "' \n\nPelos Seguintes Dados: \n"
                                                + "\nNome: '" + txtNovoNomeProduto.getText() + "' \nQuantidade: '" + quantidade + "' \nQuantidade máxima: '" + quantMax + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                        if (r == 0) {
                                            //INICIANDO O MÉTODO

                                            OutrosProdutos op = new OutrosProdutos();
                                            OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                            dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                            JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                            model.setRowCount(0);
                                            dao.pesquisaInicial(op, tblProdutos);
                                            
                                        
                                                        ckAlterarNomeProduto.setSelected(false);
                                                        ckAlterarNomeProdutoActionPerformed(null);
                                                        ckAlterarQuantidade.setSelected(false);
                                                        ckAlterarQuantidadeActionPerformed(null);
                                                        ckQuantMax.setSelected(false);
                                                        ckQuantMaxActionPerformed(null);
                                                        
                                                        
                                                       
                                        }
                                        
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar produto", JOptionPane.OK_OPTION);
                                    
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setText("");
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.requestFocus();
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                            txtQuantMax.setText("");
                            txtQuantMax.setBackground(Color.pink);
                            txtQuantMax.requestFocus();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                        txtQuantidade.setText("");
                        txtQuantidade.setBackground(Color.pink);
                        txtQuantidade.requestFocus();
                        
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                    txtQuantidade.setText("");
                    txtQuantidade.setBackground(Color.pink);
                    txtQuantidade.requestFocus();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do produto", "Preencher Nome", JOptionPane.OK_OPTION);
                txtNovoNomeProduto.setBackground(Color.pink);
                txtNovoNomeProduto.requestFocus();
            }
        } //PAREI AQUI
        else if (ckAlterarNomeProduto.isSelected() && ckAlterarQuantidade.isSelected() && ckQuantMin.isSelected()) {
            if (!txtNovoNomeProduto.getText().equals("")) {
                txtNovoNomeProduto.setBackground(Color.white);
                try {
                    int quantidade = Integer.parseInt(txtQuantidade.getText());
                    if (quantidade >= 0) {
                        txtQuantidade.setBackground(Color.white);
                        try {
                            int quantMin = Integer.parseInt(txtQuantMin.getText());
                            if (quantMin >= 0) {
                                txtQuantMin.setBackground(Color.white);
                                try {
                                    int quantMax;
                                    double preco;
                                    
                                    quantMax = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4).toString());
                                    preco = Double.parseDouble(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2).toString());
                                    
                                    if (quantMax <= quantMin) {
                                        JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.setText("");
                                        txtQuantMin.requestFocus();
                                    } else if (quantMin > quantidade) {
                                        JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade atual", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.setText("");
                                        txtQuantMin.requestFocus();
                                    } else {
                                        txtQuantMin.setBackground(Color.white);

                                        //Confirmação antes do método
                                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nNome:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1) + "' \nQuantidade: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3) + "' \nQuantidade mínima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5) + "' \n\nPelos Seguintes Dados: \n"
                                                + "\nNome: '" + txtNovoNomeProduto.getText() + "' \nQuantidade: '" + quantidade + "' \nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                        if (r == 0) {
                                            //INICIANDO O MÉTODO

                                            OutrosProdutos op = new OutrosProdutos();
                                            OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                            dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                            JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                            model.setRowCount(0);
                                            dao.pesquisaInicial(op, tblProdutos);
                                            ckAlterarNomeProduto.setSelected(false);
                                            ckAlterarNomeProdutoActionPerformed(null);
                                            ckAlterarQuantidade.setSelected(false);
                                            ckAlterarQuantidadeActionPerformed(null);
                                            ckQuantMin.setSelected(false);
                                            ckQuantMinActionPerformed(null);
                                            
                                        }
                                        
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar produto", JOptionPane.OK_OPTION);
                                    
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setText("");
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.requestFocus();
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                            txtQuantMin.setText("");
                            txtQuantMin.setBackground(Color.pink);
                            txtQuantMin.requestFocus();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                        txtQuantidade.setText("");
                        txtQuantidade.setBackground(Color.pink);
                        txtQuantidade.requestFocus();
                        
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                    txtQuantidade.setText("");
                    txtQuantidade.setBackground(Color.pink);
                    txtQuantidade.requestFocus();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do produto", "Preencher Nome", JOptionPane.OK_OPTION);
                txtNovoNomeProduto.setBackground(Color.pink);
                txtNovoNomeProduto.requestFocus();
            }
            
        } //PAREI AQUI
        else if (ckAlterarNomeProduto.isSelected() && ckQuantMax.isSelected() && ckQuantMin.isSelected()) {
            if (!txtNovoNomeProduto.getText().equals("")) {
                txtNovoNomeProduto.setBackground(Color.white);
                try {
                    int quantMax = Integer.parseInt(txtQuantMax.getText());
                    if (quantMax > 0) {
                        txtQuantMax.setBackground(Color.white);
                        
                        try {
                            int quantMin = Integer.parseInt(txtQuantMin.getText());
                            if (quantMin >= 0) {
                                txtQuantMin.setBackground(Color.white);
                                
                                try {
                                    double preco;
                                    int quantidade;
                                    preco = Double.parseDouble(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2).toString());
                                    quantidade = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3).toString());
                                    
                                    if (quantMin > quantidade) {
                                        JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade atual", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setText("");
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.requestFocus();
                                    } else if (quantMin > quantMax) {
                                        JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setText("");
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.requestFocus();
                                    } else if (quantMax < quantidade) {
                                        JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade máxima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMax.setText("");
                                        txtQuantMax.setBackground(Color.pink);
                                        txtQuantMax.requestFocus();
                                        
                                    } else {
                                        txtQuantMax.setBackground(Color.white);
                                        txtQuantMin.setBackground(Color.white);

                                        //Confirmação antes do método
                                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nNome:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1) + "' \nQuantidade máxima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4) + "' \nQuantidade mínima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5) + "' \n\nPelos Seguintes Dados: \n"
                                                + "\nNome: '" + txtNovoNomeProduto.getText() + "' \nQuantidade máxima: '" + quantMax + "' \nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                        if (r == 0) {
                                            //INICIANDO O MÉTODO

                                            OutrosProdutos op = new OutrosProdutos();
                                            OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                            dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                            JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                            model.setRowCount(0);
                                            dao.pesquisaInicial(op, tblProdutos);
                                            
                                            ckAlterarNomeProduto.setSelected(false);
                                            ckAlterarNomeProdutoActionPerformed(null);
                                            ckQuantMax.setSelected(false);
                                            ckQuantMaxActionPerformed(null);
                                            ckQuantMin.setSelected(false);
                                            CkDeletarProdutoActionPerformed(null);
                                        }
                                        
                                    }
                                    
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar Produto", JOptionPane.OK_OPTION);
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setText("");
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.requestFocus();
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                            txtQuantMin.setText("");
                            txtQuantMin.setBackground(Color.pink);
                            txtQuantMin.requestFocus();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                        txtQuantMax.setText("");
                        txtQuantMax.setBackground(Color.pink);
                        txtQuantMax.requestFocus();
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                    txtQuantMax.setText("");
                    txtQuantMax.setBackground(Color.pink);
                    txtQuantMax.requestFocus();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do produto", "Preencher Nome", JOptionPane.OK_OPTION);
                txtNovoNomeProduto.setBackground(Color.pink);
                txtNovoNomeProduto.requestFocus();
            }
            
        } //PAREI AQUI
        else if (ckAlterarPreco.isSelected() && ckAlterarQuantidade.isSelected() && ckQuantMax.isSelected()) {
            try {
                double preco = Double.parseDouble(txtPreco.getText());
                if (preco >= 0) {
                    txtPreco.setBackground(Color.white);
                    try {
                        int quantidade = Integer.parseInt(txtQuantidade.getText());
                        if (quantidade >= 0) {
                            txtQuantidade.setBackground(Color.white);
                            try {
                                int quantMax = Integer.parseInt(txtQuantMax.getText());
                                if (quantMax > 0) {
                                    txtQuantMax.setBackground(Color.white);
                                    try {
                                        int quantMin = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5).toString());
                                        
                                        if (quantMax <= quantMin) {
                                            JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade mínima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                            txtQuantMax.setBackground(Color.pink);
                                            txtQuantMax.setText("");
                                            txtQuantMax.requestFocus();
                                        } else if (quantMax < quantidade) {
                                            JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                            txtQuantMax.setBackground(Color.pink);
                                            txtQuantMax.setText("");
                                            txtQuantMax.requestFocus();
                                        } else if (quantidade < quantMin) {
                                            JOptionPane.showMessageDialog(null, "A quantidade atual não pode ser menor que a quantidade mínima", "Quantidade atual inválida", JOptionPane.OK_OPTION);
                                            txtQuantidade.setBackground(Color.pink);
                                            txtQuantidade.setText("");
                                            txtQuantidade.requestFocus();
                                        } else {
                                            txtQuantidade.setBackground(Color.white);
                                            txtQuantMax.setBackground(Color.white);

                                            //Confirmação antes do método
                                            int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nPreço:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2) + "' \nQuantidade: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3) + "' \nQuantidade máxima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4) + "' \n\nPelos Seguintes Dados: \n"
                                                    + "\nPreço: '" + preco + "' \nQuantidade atual: '" + quantidade + "' \nQuantidade máxima: '" + quantMax + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                            if (r == 0) {
                                                //INICIANDO O MÉTODO
                                                txtNovoNomeProduto.setText(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1).toString());
                                                OutrosProdutos op = new OutrosProdutos();
                                                OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                                dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                                JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                                model.setRowCount(0);
                                                dao.pesquisaInicial(op, tblProdutos);
                                                txtNovoNomeProduto.setText("");
                                                
                                                ckAlterarPreco.setSelected(false);
                                                ckAlterarPrecoActionPerformed(null);
                                                ckAlterarQuantidade.setSelected(false);
                                                ckAlterarQuantidadeActionPerformed(null);
                                                ckQuantMax.setSelected(false);
                                                ckQuantMaxActionPerformed(null);
  
                                            }
                                            
                                        }
                                        
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar Produto", JOptionPane.OK_OPTION);
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMax.setText("");
                                    txtQuantMax.setBackground(Color.pink);
                                    txtQuantMax.requestFocus();
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setText("");
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.requestFocus();
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                            txtQuantidade.setText("");
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.requestFocus();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                        txtQuantidade.setText("");
                        txtQuantidade.setBackground(Color.pink);
                        txtQuantidade.requestFocus();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                    txtPreco.setText("");
                    txtPreco.requestFocus();
                    txtPreco.setBackground(Color.pink);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                txtPreco.setText("");
                txtPreco.requestFocus();
                txtPreco.setBackground(Color.pink);
            }
        } //PAREI AQUI
        else if (ckAlterarPreco.isSelected() && ckAlterarQuantidade.isSelected() && ckQuantMin.isSelected()) {
            try {
                double preco = Double.parseDouble(txtPreco.getText());
                if (preco >= 0) {
                    txtPreco.setBackground(Color.white);
                    try {
                        int quantidade = Integer.parseInt(txtQuantidade.getText());
                        if (quantidade >= 0) {
                            txtQuantidade.setBackground(Color.white);
                            try {
                                int quantMin = Integer.parseInt(txtQuantMin.getText());
                                if (quantMin >= 0) {
                                    txtQuantMin.setBackground(Color.white);
                                    try {
                                        int quantMax = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4).toString());
                                        
                                        if (quantMax <= quantMin) {
                                            JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                            txtQuantMin.setBackground(Color.pink);
                                            txtQuantMin.setText("");
                                            txtQuantMin.requestFocus();
                                        } else if (quantMin > quantidade) {
                                            JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade atual", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                            txtQuantMin.setBackground(Color.pink);
                                            txtQuantMin.setText("");
                                            txtQuantMin.requestFocus();
                                        } else if (quantidade > quantMax) {
                                            JOptionPane.showMessageDialog(null, "A quantidade atual não pode ser maior que a quantidade máxima", "Quantidade atual inválida", JOptionPane.OK_OPTION);
                                            txtQuantidade.setBackground(Color.pink);
                                            txtQuantidade.setText("");
                                            txtQuantidade.requestFocus();
                                        } else {
                                            txtQuantidade.setBackground(Color.white);
                                            txtQuantMin.setBackground(Color.white);

                                            //Confirmação antes do método
                                            int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nPreço:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2) + "' \nQuantidade: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3) + "' \nQuantidade mínima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5) + "' \n\nPelos Seguintes Dados: \n"
                                                    + "\nPreço: '" + preco + "' \nQuantidade atual: '" + quantidade + "' \nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                            if (r == 0) {
                                                //INICIANDO O MÉTODO
                                                txtNovoNomeProduto.setText(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1).toString());
                                                OutrosProdutos op = new OutrosProdutos();
                                                OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                                dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                                JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                                model.setRowCount(0);
                                                dao.pesquisaInicial(op, tblProdutos);
                                                txtNovoNomeProduto.setText("");
                                                 
                                                ckAlterarPreco.setSelected(false);
                                                ckAlterarPrecoActionPerformed(null);
                                                ckAlterarQuantidade.setSelected(false);
                                                ckAlterarQuantidadeActionPerformed(null);
                                                ckQuantMin.setSelected(false);
                                                ckQuantMinActionPerformed(null);
                                            }
                                            
                                        }
                                        
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar Produto", JOptionPane.OK_OPTION);
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMin.setText("");
                                    txtQuantMin.setBackground(Color.pink);
                                    txtQuantMin.requestFocus();
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setText("");
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.requestFocus();
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                            txtQuantidade.setText("");
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.requestFocus();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                        txtQuantidade.setText("");
                        txtQuantidade.setBackground(Color.pink);
                        txtQuantidade.requestFocus();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                    txtPreco.setText("");
                    txtPreco.requestFocus();
                    txtPreco.setBackground(Color.pink);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                txtPreco.setText("");
                txtPreco.requestFocus();
                txtPreco.setBackground(Color.pink);
            }
        } //PAREI AQUI
        else if (ckAlterarPreco.isSelected() && ckQuantMax.isSelected() && ckQuantMin.isSelected()) {
            try {
                double preco = Double.parseDouble(txtPreco.getText());
                if (preco >= 0) {
                    txtPreco.setBackground(Color.white);
                    try {
                        int quantMax = Integer.parseInt(txtQuantMax.getText());
                        if (quantMax > 0) {
                            txtQuantMax.setBackground(Color.white);
                            try {
                                int quantMin = Integer.parseInt(txtQuantMax.getText());
                                if (quantMin >= 0) {
                                    txtQuantMin.setBackground(Color.white);
                                    try {
                                        int quantidade = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3).toString());
                                        
                                        if (quantMax <= quantMin) {
                                            JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                            txtQuantMin.setBackground(Color.pink);
                                            txtQuantMin.setText("");
                                            txtQuantMin.requestFocus();
                                        } else if (quantMin > quantidade) {
                                            JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade atual", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                            txtQuantMin.setBackground(Color.pink);
                                            txtQuantMin.setText("");
                                            txtQuantMin.requestFocus();
                                        } else if (quantidade > quantMax) {
                                            JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                            txtQuantMax.setBackground(Color.pink);
                                            txtQuantMax.setText("");
                                            txtQuantMax.requestFocus();
                                        } else {
                                            txtQuantMin.setBackground(Color.white);
                                            txtQuantMax.setBackground(Color.white);

                                            //Confirmação antes do método
                                            int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nPreço:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2) + "' \nQuantidade: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3) + "' \nQuantidade mínima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5) + "' \n\nPelos Seguintes Dados: \n"
                                                    + "\nPreço: '" + preco + "' \nQuantidade atual: '" + quantidade + "' \nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                            if (r == 0) {
                                                //INICIANDO O MÉTODO
                                                txtNovoNomeProduto.setText(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1).toString());
                                                OutrosProdutos op = new OutrosProdutos();
                                                OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                                dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                                JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                                model.setRowCount(0);
                                                dao.pesquisaInicial(op, tblProdutos);
                                                txtNovoNomeProduto.setText("");
  
                                                ckAlterarPreco.setSelected(false);
                                                ckAlterarPrecoActionPerformed(null);
                                                ckQuantMax.setSelected(false);
                                                ckQuantMaxActionPerformed(null);
                                                ckQuantMin.setSelected(false);
                                                ckQuantMinActionPerformed(null);
                                            }
                                            
                                        }
                                        
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar Produto", JOptionPane.OK_OPTION);
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMin.setText("");
                                    txtQuantMin.setBackground(Color.pink);
                                    txtQuantMin.requestFocus();
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setText("");
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.requestFocus();
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                            txtQuantMax.setText("");
                            txtQuantMax.setBackground(Color.pink);
                            txtQuantMax.requestFocus();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                        txtQuantMax.setText("");
                        txtQuantMax.setBackground(Color.pink);
                        txtQuantMax.requestFocus();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                    txtPreco.setText("");
                    txtPreco.requestFocus();
                    txtPreco.setBackground(Color.pink);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                txtPreco.setText("");
                txtPreco.requestFocus();
                txtPreco.setBackground(Color.pink);
            }
        } //PAREI AQUI
        else if (ckAlterarQuantidade.isSelected() && ckQuantMax.isSelected() && ckQuantMin.isSelected()) {
            try {
                int quantidade = Integer.parseInt(txtQuantidade.getText());
                if (quantidade >= 0) {
                    txtQuantidade.setBackground(Color.white);
                    try {
                        int quantMax = Integer.parseInt(txtQuantMax.getText());
                        if (quantMax > 0) {
                            txtQuantMax.setBackground(Color.white);
                            try {
                                int quantMin = Integer.parseInt(txtQuantMin.getText());
                                if (quantMin > 0) {
                                    txtQuantMin.setBackground(Color.white);
                                    try {
                                        double preco = Double.parseDouble(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2).toString());
                                        if (quantMax <= quantMin) {
                                            JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade mínima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                            txtQuantMax.setText("");
                                            txtQuantMax.setBackground(Color.pink);
                                            txtQuantMax.requestFocus();
                                        } else if (quantMax < quantidade) {
                                            JOptionPane.showMessageDialog(null, "A quantidade atual não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                            txtQuantidade.setText("");
                                            txtQuantidade.setBackground(Color.pink);
                                            txtQuantidade.requestFocus();
                                        } else if (quantidade < quantMin) {
                                            JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser menor que a quantidade atual", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                            txtQuantMin.setText("");
                                            txtQuantMin.setBackground(Color.pink);
                                            txtQuantMin.requestFocus();
                                        } else {
                                            txtQuantidade.setBackground(Color.white);
                                            txtQuantMax.setBackground(Color.white);
                                            txtQuantMin.setBackground(Color.white);

                                            //Confirmação antes do método
                                            int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nQuantidade:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3) + "' \nQuantidade máxima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4) + "' \nQuantidade mínima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5) + "' \n\nPelos Seguintes Dados: \n"
                                                    + "\nQuantidade atual: '" + quantidade + "' \nQuantidade máxima: '" + quantMax + "' \nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                            if (r == 0) {
                                                //INICIANDO O MÉTODO
                                                txtNovoNomeProduto.setText(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1).toString());
                                                OutrosProdutos op = new OutrosProdutos();
                                                OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                                dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                                JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                                model.setRowCount(0);
                                                dao.pesquisaInicial(op, tblProdutos);
                                                txtNovoNomeProduto.setText("");
                                                
                                               ckAlterarQuantidade.setSelected(false);
                                                ckAlterarQuantidadeActionPerformed(null);
                                                ckQuantMax.setSelected(false);
                                                ckQuantMaxActionPerformed(null);
                                                ckQuantMin.setSelected(false);
                                                ckQuantMinActionPerformed(null);
                                            }
                                            
                                        }
                                        
                                    } catch (Exception e) {
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMin.setText("");
                                    txtQuantMin.setBackground(Color.pink);
                                    txtQuantMin.requestFocus();
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setText("");
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.requestFocus();
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                            txtQuantMax.setText("");
                            txtQuantMax.setBackground(Color.pink);
                            txtQuantMax.requestFocus();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                        txtQuantMax.setText("");
                        txtQuantMax.setBackground(Color.pink);
                        txtQuantMax.requestFocus();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                    txtQuantidade.setText("");
                    txtQuantidade.setBackground(Color.pink);
                    txtQuantidade.requestFocus();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                txtQuantidade.setText("");
                txtQuantidade.setBackground(Color.pink);
                txtQuantidade.requestFocus();
            }
            
        } //PAREI AQUI
        else if (ckAlterarNomeProduto.isSelected() && ckAlterarPreco.isSelected() && ckAlterarQuantidade.isSelected()) {
            try {
                int quantMax, quantMin;
                quantMax = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4).toString());
                quantMin = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5).toString());
                
                if (!txtNovoNomeProduto.getText().equals("")) {
                    txtNovoNomeProduto.setBackground(Color.white);
                    try {
                        Double p = Double.parseDouble(txtPreco.getText());
                        if (p < 0) {
                            JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        } else {
                            txtPreco.setBackground(Color.white);
                            
                            try {
                                int q = Integer.parseInt(txtQuantidade.getText());
                                if (q <= 0) {
                                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                                    txtQuantidade.setText("");
                                    txtQuantidade.setBackground(Color.pink);
                                    txtQuantidade.requestFocus();
                                } else {
                                    txtQuantidade.setBackground(Color.white);
                                }
                                try {
                                    if (q < quantMin) {
                                        JOptionPane.showMessageDialog(null, "A quantidade atual não pode ser menor que a quantidade mínima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                        txtQuantidade.setBackground(Color.pink);
                                        txtQuantidade.setText("");
                                        txtQuantidade.requestFocus();
                                    } else if (q > quantMax) {
                                        JOptionPane.showMessageDialog(null, "A quantidade em estoque não pode ser maior que a quantidade em máxima", "Quantidade atual inválida", JOptionPane.OK_OPTION);
                                        txtQuantidade.setBackground(Color.pink);
                                        txtQuantidade.setText("");
                                        txtQuantidade.requestFocus();
                                    } else {
                                        txtQuantidade.setBackground(Color.white);

                                        //Confirmação
                                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \n Nome: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1) + "' \n Preço: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2) + "' \n Quantidade: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3) + "' \n \n Pelos Seguintes valores: \n \n"
                                                + "Nome: '" + txtNovoNomeProduto.getText() + "' \n Preço:'" + p + "' \n Quantidade:'" + q + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                        if (r == 0) {

                                            //INSTANCIANDO O MÉTODO
                                            OutrosProdutos op = new OutrosProdutos();
                                            OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                            dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, p, q, quantMax, quantMin);
                                            JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                            ckAlterarNomeProduto.setSelected(false);
                                            ckAlterarNomeProdutoActionPerformed(evt);
                                            ckAlterarPreco.setSelected(false);
                                            ckAlterarPrecoActionPerformed(evt);
                                            ckAlterarQuantidade.setSelected(false);
                                            ckAlterarQuantidadeActionPerformed(evt);
                                            txtNomeProduto.setText("");
                                            model.setRowCount(0);
                                            dao.pesquisaInicial(op, tblProdutos);
                                        }
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecione algum produto", JOptionPane.OK_OPTION);
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setText("");
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                            }
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                        txtPreco.setBackground(Color.pink);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do produto", "Preencher Nome", JOptionPane.OK_OPTION);
                    txtNovoNomeProduto.setBackground(Color.pink);
                    txtNovoNomeProduto.requestFocus();
                }
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar Produto", JOptionPane.OK_OPTION);
            }
            
        } //PAREI AQUI
        else if (ckAlterarNomeProduto.isSelected() && ckQuantMax.isSelected()) {
            if (!txtNovoNomeProduto.getText().equals("")) {
                txtNovoNomeProduto.setBackground(Color.white);
                try {
                    int quantMax = Integer.parseInt(txtQuantMax.getText());
                    if (quantMax > 0) {
                        txtQuantMax.setBackground(Color.white);
                        try {
                            int quantidade, quantMin;
                            double preco;
                            quantidade = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3).toString());
                            quantMin = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5).toString());
                            preco = Double.parseDouble(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2).toString());
                            if (quantMax <= quantMin) {
                                JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade mínima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setText("");
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.requestFocus();
                            } else if (quantMax < quantidade) {
                                JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setText("");
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.requestFocus();
                            } else {
                                txtQuantMax.setBackground(Color.white);

                                //Confirmação antes do método
                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nNome:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1) + "' \nQuantidade máxima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4) + "' \n\nPelos Seguintes Dados: \n"
                                        + "\nNome: '" + txtNovoNomeProduto.getText() + "' \nQuantidade máxima: '" + quantMax + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                if (r == 0) {
                                    //INICIANDO O MÉTODO
                                    OutrosProdutos op = new OutrosProdutos();
                                    OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                    dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                    JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                    model.setRowCount(0);
                                    dao.pesquisaInicial(op, tblProdutos);
                                    
                                 ckAlterarNomeProduto.setSelected(false);
                                    ckAlterarNomeProdutoActionPerformed(null);
                                    
   //não esta funcionando 
                                    ckQuantMax.setSelected(false);
                                    ckQuantMaxActionPerformed(evt);
                                         
                                }
                                
                            }
                            
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar Produto", JOptionPane.OK_OPTION);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                        txtQuantMax.setText("");
                        txtQuantMax.setBackground(Color.pink);
                        txtQuantMax.requestFocus();
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                    txtQuantMax.setText("");
                    txtQuantMax.setBackground(Color.pink);
                    txtQuantMax.requestFocus();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do produto", "Preencher Nome", JOptionPane.OK_OPTION);
                txtNovoNomeProduto.setBackground(Color.pink);
                txtNovoNomeProduto.requestFocus();
            }
            
        } //parei aqui
        else if (ckAlterarNomeProduto.isSelected() && ckQuantMin.isSelected()) {
            if (!txtNovoNomeProduto.getText().equals("")) {
                txtNovoNomeProduto.setBackground(Color.white);
                try {
                    int quantMin = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5).toString());
                    if (quantMin >= 0) {
                        txtQuantMin.setBackground(Color.white);
                        try {
                            int quantidade, quantMax;
                            double preco;
                            quantidade = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3).toString());
                            quantMax = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4).toString());
                            preco = Double.parseDouble(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2).toString());
                            if (quantMax <= quantMin) {
                                JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setText("");
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.requestFocus();
                            } else if (quantMin > quantidade) {
                                JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade atual", "Quantidade mínima  inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setText("");
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.requestFocus();
                            } else {
                                txtQuantMin.setBackground(Color.white);

                                //Confirmação antes do método
                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nNome:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1) + "' \nQuantidade mínima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5) + "' \n\nPelos Seguintes Dados: \n"
                                        + "\nNome: '" + txtNovoNomeProduto.getText() + "' \nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                if (r == 0) {
                                    //INICIANDO O MÉTODO
                                    OutrosProdutos op = new OutrosProdutos();
                                    OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                    dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                    JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                    model.setRowCount(0);
                                    dao.pesquisaInicial(op, tblProdutos);
                                    ckAlterarNomeProduto.setSelected(false);
                                    ckAlterarNomeProdutoActionPerformed(null);
                                    ckQuantMin.setSelected(false);
                                    ckQuantMinActionPerformed(null);
                                }
                                
                            }
                            
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar Produto", JOptionPane.OK_OPTION);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                        txtQuantMin.setText("");
                        txtQuantMin.setBackground(Color.pink);
                        txtQuantMin.requestFocus();
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                    txtQuantMin.setText("");
                    txtQuantMin.setBackground(Color.pink);
                    txtQuantMin.requestFocus();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do produto", "Preencher Nome", JOptionPane.OK_OPTION);
                txtNovoNomeProduto.setBackground(Color.pink);
                txtNovoNomeProduto.requestFocus();
            }
            
        } //parei aqui
        else if (ckAlterarPreco.isSelected() && ckQuantMax.isSelected()) {
            try {
                double preco = Double.parseDouble(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2).toString());
                if (preco >= 0) {
                    txtPreco.setBackground(Color.white);
                    
                    try {
                        int quantMax = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4).toString());
                        if (quantMax > 0) {
                            txtQuantMax.setBackground(Color.white);
                            try {
                                int quantidade, quantMin;
                                
                                quantidade = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3).toString());
                                quantMin = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5).toString());
                                if (quantMax <= quantMin) {
                                    JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade mínima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMax.setText("");
                                    txtQuantMax.setBackground(Color.pink);
                                    txtQuantMax.requestFocus();
                                } else if (quantMax < quantidade) {
                                    JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMax.setText("");
                                    txtQuantMax.setBackground(Color.pink);
                                    txtQuantMax.requestFocus();
                                } else {
                                    txtQuantMax.setBackground(Color.white);

                                    //Confirmação antes do método
                                    int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nPreço:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2) + "' \nQuantidade máxima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4) + "' \n\nPelos Seguintes Dados: \n"
                                            + "\nPreço: '" + preco + "' \nQuantidade máxima: '" + quantMax + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                    if (r == 0) {
                                        //INICIANDO O MÉTODO
                                        txtNovoNomeProduto.setText(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1).toString());
                                        OutrosProdutos op = new OutrosProdutos();
                                        OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                        dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                        JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                        model.setRowCount(0);
                                        dao.pesquisaInicial(op, tblProdutos);
                                        txtNovoNomeProduto.setText("");
                                        ckAlterarPreco.setSelected(false);
                                        ckAlterarPrecoActionPerformed(null);
                                        ckQuantMax.setSelected(false);
                                        ckQuantMaxActionPerformed(null);
                                    }
                                    
                                }
                                
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar Produto", JOptionPane.OK_OPTION);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                            txtQuantMax.setText("");
                            txtQuantMax.setBackground(Color.pink);
                            txtQuantMax.requestFocus();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                        txtQuantMax.setText("");
                        txtQuantMax.setBackground(Color.pink);
                        txtQuantMax.requestFocus();
                    }
                    
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                    txtPreco.setText("");
                    txtPreco.requestFocus();
                    txtPreco.setBackground(Color.pink);
                    
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                txtPreco.setText("");
                txtPreco.requestFocus();
                txtPreco.setBackground(Color.pink);
            }
            
        } //PAREI AQUI 
        else if (ckAlterarPreco.isSelected() && ckQuantMin.isSelected()) {
            try {
                double preco = Double.parseDouble(txtPreco.getText());
                if (preco >= 0) {
                    txtPreco.setBackground(Color.white);
                    
                    try {
                        int quantMin = Integer.parseInt(txtQuantMin.getText());
                        if (quantMin >= 0) {
                            txtQuantMin.setBackground(Color.white);
                            try {
                                int quantidade, quantMax;
                                
                                quantidade = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3).toString());
                                quantMax = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4).toString());
                                if (quantMax <= quantMin) {
                                    JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMin.setText("");
                                    txtQuantMin.setBackground(Color.pink);
                                    txtQuantMin.requestFocus();
                                } else if (quantMin > quantidade) {
                                    JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade atual", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMin.setText("");
                                    txtQuantMin.setBackground(Color.pink);
                                    txtQuantMin.requestFocus();
                                } else {
                                    txtQuantMin.setBackground(Color.white);

                                    //Confirmação antes do método
                                    int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nPreço:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2) + "' \nQuantidade mínima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5) + "' \n\nPelos Seguintes Dados: \n"
                                            + "\nPreço: '" + preco + "' \nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                    if (r == 0) {
                                        //INICIANDO O MÉTODO
                                        txtNovoNomeProduto.setText(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1).toString());
                                        OutrosProdutos op = new OutrosProdutos();
                                        OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                        dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                        JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                        model.setRowCount(0);
                                        dao.pesquisaInicial(op, tblProdutos);
                                        txtNovoNomeProduto.setText("");
                                        txtNomeProduto.setText("");
                                        ckAlterarPreco.setSelected(false);
                                        ckAlterarPrecoActionPerformed(null);
                                        ckQuantMin.setSelected(false);
                                        ckQuantMinActionPerformed(null);
                                        
                                    }
                                    
                                }
                                
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar Produto", JOptionPane.OK_OPTION);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                            txtQuantMin.setText("");
                            txtQuantMin.setBackground(Color.pink);
                            txtQuantMin.requestFocus();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                        txtQuantMin.setText("");
                        txtQuantMin.setBackground(Color.pink);
                        txtQuantMin.requestFocus();
                    }
                    
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                    txtPreco.setText("");
                    txtPreco.requestFocus();
                    txtPreco.setBackground(Color.pink);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, insira um preço válido", "Preço inválido", JOptionPane.OK_OPTION);
                txtPreco.setText("");
                txtPreco.requestFocus();
                txtPreco.setBackground(Color.pink);
            }
            
        } //PAREI AQUI
        else if (ckAlterarQuantidade.isSelected() && ckQuantMax.isSelected()) {
            try {
                int quantidade = Integer.parseInt(txtQuantidade.getText());
                if (quantidade > 0) {
                    txtQuantidade.setBackground(Color.white);
                    try {
                        int quantMax = Integer.parseInt(txtQuantMax.getText());
                        if (quantMax >= 0) {
                            txtQuantMax.setBackground(Color.white);
                            
                            try {
                                int quantMin;
                                double preco;
                                quantMin = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5).toString());
                                preco = Double.parseDouble(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2).toString());
                                
                                if (quantMax <= quantMin) {
                                    JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade mínima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMax.setText("");
                                    txtQuantMax.setBackground(Color.pink);
                                    txtQuantMax.requestFocus();
                                } else if (quantMax < quantidade) {
                                    JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMax.setText("");
                                    txtQuantMax.setBackground(Color.pink);
                                    txtQuantMax.requestFocus();
                                } else {
                                    txtQuantMax.setBackground(Color.white);

                                    //Confirmação antes do método
                                    int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nQuantidade:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3) + "' \nQuantidade mínima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4) + "' \n\nPelos Seguintes Dados: \n"
                                            + "\nQuantidade: '" + quantidade + "' \nQuantidade máxima: '" + quantMax + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                    if (r == 0) {
                                        //INICIANDO O MÉTODO
                                        txtNovoNomeProduto.setText(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1).toString());
                                        OutrosProdutos op = new OutrosProdutos();
                                        OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                        dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                        JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                        model.setRowCount(0);
                                        dao.pesquisaInicial(op, tblProdutos);
                                        txtNovoNomeProduto.setText("");
                                        ckAlterarQuantidade.setSelected(false);
                                        ckAlterarQuantidadeActionPerformed(null);
                                        ckQuantMax.setSelected(false);
                                        ckQuantMaxActionPerformed(null);
                                    }
                                    
                                }
                                
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar Produto", JOptionPane.OK_OPTION);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                            txtQuantMax.setText("");
                            txtQuantMax.setBackground(Color.pink);
                            txtQuantMax.requestFocus();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                        txtQuantMax.setText("");
                        txtQuantMax.setBackground(Color.pink);
                        txtQuantMax.requestFocus();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                    txtQuantidade.setText("");
                    txtQuantidade.setBackground(Color.pink);
                    txtQuantidade.requestFocus();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                txtQuantidade.setText("");
                txtQuantidade.setBackground(Color.pink);
                txtQuantidade.requestFocus();
            }
        } //PAREI AQUI
        else if (ckAlterarQuantidade.isSelected() && ckQuantMin.isSelected()) {
            try {
                int quantidade = Integer.parseInt(txtQuantidade.getText());
                if (quantidade >= 0) {
                    txtQuantidade.setBackground(Color.white);
                    try {
                        int quantMin = Integer.parseInt(txtQuantMin.getText());
                        if (quantMin >= 0) {
                            txtQuantMin.setBackground(Color.white);
                            try {
                                int quantMax;
                                double preco;
                                quantMax = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4).toString());
                                preco = Double.parseDouble(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2).toString());
                                
                                if (quantMax <= quantMin) {
                                    JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMin.setText("");
                                    txtQuantMin.setBackground(Color.pink);
                                    txtQuantMin.requestFocus();
                                } else if (quantMin > quantidade) {
                                    JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade atual", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMin.setText("");
                                    txtQuantMin.setBackground(Color.pink);
                                    txtQuantMin.requestFocus();
                                 
                                }
                                else if(quantidade>quantMax){
                                    JOptionPane.showMessageDialog(null,"A quantidade atual não pode ser maior que a quantidade máxima","Quantidade atual inválida",JOptionPane.OK_OPTION);
                                    txtQuantidade.setBackground(Color.pink);
                                    txtQuantidade.setText("");
                                    txtQuantidade.requestFocus();
                                }else {
                                    txtQuantMin.setBackground(Color.white);
                                    txtQuantidade.setBackground(Color.white);
                                    //Confirmação antes do método
                                    int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nQuantidade:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3) + "' \nQuantidade mínima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5) + "' \n\nPelos Seguintes Dados: \n"
                                            + "\nQuantidade: '" + quantidade + "' \nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                    if (r == 0) {
                                        //INICIANDO O MÉTODO
                                        txtNovoNomeProduto.setText(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1).toString());
                                        OutrosProdutos op = new OutrosProdutos();
                                        OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                        dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                        JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                        model.setRowCount(0);
                                        dao.pesquisaInicial(op, tblProdutos);
                                        txtNovoNomeProduto.setText("");
                                        ckAlterarQuantidade.setSelected(false);
                                        ckAlterarQuantidadeActionPerformed(null);
                                        ckQuantMin.setSelected(false);
                                        ckQuantMinActionPerformed(null);
                                        txtNomeProduto.setText("");
                                        model.setRowCount(0);
                                        dao.pesquisaInicial(op, tblProdutos);
                                    }
                                    
                                }
                                
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar Produto", JOptionPane.OK_OPTION);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                            txtQuantMin.setText("");
                            txtQuantMin.setBackground(Color.pink);
                            txtQuantMin.requestFocus();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                        txtQuantMin.setText("");
                        txtQuantMin.setBackground(Color.pink);
                        txtQuantMin.requestFocus();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                    txtQuantidade.setText("");
                    txtQuantidade.setBackground(Color.pink);
                    txtQuantidade.requestFocus();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                txtQuantidade.setText("");
                txtQuantidade.setBackground(Color.pink);
                txtQuantidade.requestFocus();
            }
        } else if (ckQuantMax.isSelected() && ckQuantMin.isSelected()) {
            try {
                int quantMax = Integer.parseInt(txtQuantMax.getText());
                if (quantMax > 0) {
                    txtQuantMax.setBackground(Color.white);
                    try {
                        int quantMin = Integer.parseInt(txtQuantMin.getText());
                        if (quantMin >= 0) {
                            txtQuantMin.setBackground(Color.white);
                            try {
                                int quantidade;
                                double preco;
                                quantidade = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3).toString());
                                preco = Double.parseDouble(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2).toString());
                                
                                if (quantMax <= quantMin) {
                                    JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade mínima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMax.setText("");
                                    txtQuantMax.setBackground(Color.pink);
                                    txtQuantMax.requestFocus();
                                } else if (quantMax < quantidade) {
                                    JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMax.setText("");
                                    txtQuantMax.setBackground(Color.pink);
                                    txtQuantMax.requestFocus();                                    
                                } else if (quantMin > quantidade) {
                                    JOptionPane.showMessageDialog(null, "A quntidade mínima não pode ser maior que a quantidade atual", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMin.setText("");
                                    txtQuantMin.setBackground(Color.pink);
                                    txtQuantMin.requestFocus();
                                } else {
                                    txtQuantMin.setBackground(Color.white);
                                    txtQuantMax.setBackground(Color.white);

                                    //Confirmação antes do método
                                    int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nQuantidade máxima:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4) + "' \nQuantidade mínima: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5) + "' \n\nPelos Seguintes Dados: \n"
                                            + "\nQuantidade máxima: '" + quantMax + "' \nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                    if (r == 0) {
                                        //INICIANDO O MÉTODO
                                        txtNovoNomeProduto.setText(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1).toString());
                                        OutrosProdutos op = new OutrosProdutos();
                                        OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                        dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                        JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                        model.setRowCount(0);
                                        dao.pesquisaInicial(op, tblProdutos);
                                        txtNovoNomeProduto.setText("");
                                        
                                        ckQuantMax.setSelected(false);
                                        ckQuantMaxActionPerformed(null);
                                        ckQuantMin.setSelected(false);
                                        ckQuantMinActionPerformed(null);
                                    }
                                }
                                
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar Produto", JOptionPane.OK_OPTION);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                            txtQuantMin.setText("");
                            txtQuantMin.setBackground(Color.pink);
                            txtQuantMin.requestFocus();
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                        txtQuantMin.setText("");
                        txtQuantMin.setBackground(Color.pink);
                        txtQuantMin.requestFocus();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                    txtQuantMax.setText("");
                    txtQuantMax.setBackground(Color.pink);
                    txtQuantMax.requestFocus();
                    
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                txtQuantMax.setText("");
                txtQuantMax.setBackground(Color.pink);
                txtQuantMax.requestFocus();
            }
            
        } //PAREI AQUI 
        else if (ckAlterarNomeProduto.isSelected() && ckAlterarPreco.isSelected()) {
            try {
                int quantidade, quantMax, quantMin;
                quantMax = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4).toString());
                quantMin = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5).toString());
                quantidade = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3).toString());
                
                if (!txtNovoNomeProduto.getText().equals("")) {
                    txtNovoNomeProduto.setBackground(Color.white);
                    try {
                        double p = Double.parseDouble(txtPreco.getText());
                        if (p < 0) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha o campo preço corretamente", "Preço inválido", JOptionPane.OK_OPTION);
                            txtPreco.setText("");
                            txtPreco.setBackground(Color.pink);
                            txtPreco.requestFocus();
                        } else {
                            txtPreco.setBackground(Color.white);
                            try {
                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \n Nome: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1) + "' \n Preço: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2) + "' \n \n pelos seguintes valores: \n"
                                        + "\n Nome: '" + txtNovoNomeProduto.getText() + "\n Preço: '" + p + "'?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                if (r == 0) {
                                    OutrosProdutos op = new OutrosProdutos();
                                    OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                    dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, p, quantidade, quantMax, quantMin);
                                    JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                    ckAlterarNomeProduto.setSelected(false);
                                    ckAlterarNomeProdutoActionPerformed(evt);
                                    ckAlterarPreco.setSelected(false);
                                    ckAlterarPrecoActionPerformed(evt);
                                    txtNomeProduto.setText("");
                                    model.setRowCount(0);
                                    dao.pesquisaInicial(op, tblProdutos);
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Alterar dados", JOptionPane.OK_OPTION);
                            }
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o campo preço corretamente", "Preço inválido", JOptionPane.OK_OPTION);
                        txtPreco.setText("");
                        txtPreco.setBackground(Color.pink);
                        txtPreco.requestFocus();
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha o campo nome do produto", "Preencher nome", JOptionPane.OK_OPTION);
                    txtNovoNomeProduto.setText("");
                    txtNovoNomeProduto.requestFocus();
                    txtNovoNomeProduto.setBackground(Color.pink);
                }
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar Produto", JOptionPane.OK_OPTION);
            }
            
        } else if (ckAlterarNomeProduto.isSelected() && ckAlterarQuantidade.isSelected()) {
            try {
                int quantMax, quantMin;
                double preco;
                quantMax = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4).toString());
                quantMin = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5).toString());
                preco = Double.parseDouble(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2).toString());
                
                if (!txtNovoNomeProduto.getText().equals("")) {
                    txtNovoNomeProduto.setBackground(Color.white);
                    try {
                        int q = Integer.parseInt(txtQuantidade.getText());
                        if (q < 0) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamenta", "Preencher quantidade", JOptionPane.OK_OPTION);
                            txtQuantidade.setText("");
                            txtQuantidade.requestFocus();
                            txtQuantidade.setBackground(Color.pink);
                        } else {
                            txtQuantidade.setBackground(Color.white);
                            
                            if (q < quantMin) {
                                JOptionPane.showMessageDialog(null, "A quantidade atual não pode ser menor que a quantidade mínima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.setText("");
                                txtQuantidade.requestFocus();
                            } else if (q > quantMax) {
                                JOptionPane.showMessageDialog(null, "A quantidade em estoque não pode ser maior que a quantidade em máxima", "Quantidade atual inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.setText("");
                                txtQuantidade.requestFocus();
                            } else {
                                txtQuantidade.setBackground(Color.white);
                                
                                try {
                                    int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os dados: \n Nome: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1) + "' \n Quantidade: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3) + "' \n\n Pelos seguintes valores: \n Nome: '"
                                            + txtNovoNomeProduto.getText() + "' \n Quantidade:'" + q + "'?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                    if (r == 0) {
                                        OutrosProdutos op = new OutrosProdutos();
                                        OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                        dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, q, quantMax, quantMin);
                                        JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                        ckAlterarNomeProduto.setSelected(false);
                                        ckAlterarNomeProdutoActionPerformed(evt);
                                        ckAlterarQuantidade.setSelected(false);
                                        ckAlterarQuantidadeActionPerformed(evt);
                                        txtNomeProduto.setText("");
                                        model.setRowCount(0);
                                        dao.pesquisaInicial(op, tblProdutos);
                                    }
                                    
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecioner Produto", JOptionPane.OK_OPTION);
                                }
                            }
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamenta", "Preencher quantidade", JOptionPane.OK_OPTION);
                        txtQuantidade.setText("");
                        txtQuantidade.requestFocus();
                        txtQuantidade.setBackground(Color.pink);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha o novo nome do produto", "Preencher Nome", JOptionPane.OK_OPTION);
                    txtNovoNomeProduto.requestFocus();
                    txtNovoNomeProduto.setBackground(Color.pink);
                }
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar produto", JOptionPane.OK_OPTION);
            }
            
        } else if (ckAlterarPreco.isSelected() && ckAlterarQuantidade.isSelected()) {
            try {
                int quantMax, quantMin;
                String nome;
                quantMax = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4).toString());
                quantMin = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5).toString());
                nome = tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1).toString();
                
                try {
                    int q = Integer.parseInt(txtQuantidade.getText());
                    if (q < 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamenta", "Preencher quantidade", JOptionPane.OK_OPTION);
                        txtQuantidade.setText("");
                        txtQuantidade.requestFocus();
                        txtQuantidade.setBackground(Color.pink);
                    } else {
                        txtQuantidade.setBackground(Color.white);
                        try {
                            double p = Double.parseDouble(txtPreco.getText());
                            if (p < 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, preencha o campo preço corretamente", "Preço inválido", JOptionPane.OK_OPTION);
                                txtPreco.setText("");
                                txtPreco.setBackground(Color.pink);
                                txtPreco.requestFocus();
                            } else {
                                txtPreco.setBackground(Color.white);
                                if (q < quantMin) {
                                    JOptionPane.showMessageDialog(null, "A quantidade atual não pode ser menor que a quantidade mínima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                    txtQuantidade.setBackground(Color.pink);
                                    txtQuantidade.setText("");
                                    txtQuantidade.requestFocus();
                                } else if (q > quantMax) {
                                    JOptionPane.showMessageDialog(null, "A quantidade em estoque não pode ser maior que a quantidade em máxima", "Quantidade atual inválida", JOptionPane.OK_OPTION);
                                    txtQuantidade.setBackground(Color.pink);
                                    txtQuantidade.setText("");
                                    txtQuantidade.requestFocus();
                                } else {
                                    txtQuantidade.setBackground(Color.white);
                                    
                                    try {
                                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \n Preço:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2) + "' \n Quantidade:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3) + "' \n\n Pelos seguintes valores: \n Preço:'" + p + "'\n Quantidade'" + q + "'?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                        
                                        if (r == 0) {
                                            OutrosProdutos op = new OutrosProdutos();
                                            OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                            dao.alterarPrecoQuantidade(op, tblProdutos, p, q);
                                            JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                            ckAlterarPreco.setSelected(false);
                                            ckAlterarPrecoActionPerformed(evt);
                                            ckAlterarQuantidade.setSelected(false);
                                            ckAlterarQuantidadeActionPerformed(evt);
                                            txtNovoNomeProduto.setText("");
                                            model.setRowCount(0);
                                            dao.pesquisaInicial(op, tblProdutos);
                                            
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecioner Produto", JOptionPane.OK_OPTION);
                                    }
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha o campo preço corretamente", "Preço inválido", JOptionPane.OK_OPTION);
                            txtPreco.setText("");
                            txtPreco.setBackground(Color.pink);
                            txtPreco.requestFocus();
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamenta", "Preencher quantidade", JOptionPane.OK_OPTION);
                    txtQuantidade.setText("");
                    txtQuantidade.requestFocus();
                    txtQuantidade.setBackground(Color.pink);
                }
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar produto", JOptionPane.OK_OPTION);
            }
            
        } else if (ckAlterarNomeProduto.isSelected()) {
            if (!txtNovoNomeProduto.getText().equals("")) {
                txtNovoNomeProduto.setBackground(Color.white);
                try {
                    int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar o nome do produto:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1) + "' por: '" + txtNovoNomeProduto.getText() + "'?", "Alterar Nome", JOptionPane.YES_NO_OPTION);
                    if (r == 0) {
                        OutrosProdutos op = new OutrosProdutos();
                        OutrosProdutosDAO dao = new OutrosProdutosDAO();
                        dao.alterarNome(op, tblProdutos, txtNovoNomeProduto);
                        txtNomeProduto.setText("");
                        ckAlterarNomeProduto.setSelected(false);
                        ckAlterarNomeProdutoActionPerformed(null);
                        JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                        model.setRowCount(0);
                        dao.pesquisaInicial(op, tblProdutos);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar produto", JOptionPane.OK_OPTION);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o novo nome do produto", "Preencher Nome", JOptionPane.OK_OPTION);
                txtNovoNomeProduto.requestFocus();
                txtNovoNomeProduto.setBackground(Color.pink);
            }
        } else if (ckAlterarPreco.isSelected()) {
            try {
                double p = Double.parseDouble(txtPreco.getText());
                if (p < 0) {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha o campo preço corretamente", "Preço inválido", JOptionPane.OK_OPTION);
                    txtPreco.setText("");
                    txtPreco.setBackground(Color.pink);
                    txtPreco.requestFocus();
                } else {
                    txtPreco.setBackground(Color.white);
                    try {
                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar o preço de:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2) + "' do produto:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1) + "' \n pelo preço:'" + p + "'?", "Alterar Preço", JOptionPane.YES_NO_OPTION);
                        if (r == 0) {
                            OutrosProdutos op = new OutrosProdutos();
                            OutrosProdutosDAO dao = new OutrosProdutosDAO();
                            dao.alterarPreco(op, tblProdutos, p);
                            ckAlterarPreco.setSelected(false);
                            ckAlterarPrecoActionPerformed(null);
                            
                            JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar produto", JOptionPane.OK_OPTION);
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o campo preço corretamente", "Preço inválido", JOptionPane.OK_OPTION);
                txtPreco.setText("");
                txtPreco.setBackground(Color.pink);
                txtPreco.requestFocus();
            }
        } else if (ckAlterarQuantidade.isSelected()) {
            try {
                int quantMax, quantMin;
                String nome;
                double preco;
                quantMax = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4).toString());
                quantMin = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5).toString());
                nome = tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1).toString();
                
                try {
                    int q = Integer.parseInt(txtQuantidade.getText());
                    if (q < 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamenta", "Preencher quantidade", JOptionPane.OK_OPTION);
                        txtQuantidade.setText("");
                        txtQuantidade.requestFocus();
                        txtQuantidade.setBackground(Color.pink);
                    } else {
                        txtQuantidade.setBackground(Color.white);
                        
                        if (q < quantMin) {
                            JOptionPane.showMessageDialog(null, "A quantidade atual não pode ser menor que a quantidade mínima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.setText("");
                            txtQuantidade.requestFocus();
                        } else if (q > quantMax) {
                            JOptionPane.showMessageDialog(null, "A quantidade em estoque não pode ser maior que a quantidade em máxima", "Quantidade atual inválida", JOptionPane.OK_OPTION);
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.setText("");
                            txtQuantidade.requestFocus();
                        } else {
                            txtQuantidade.setBackground(Color.white);
                            
                            try {
                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar a quantidade de:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3) + "' do produto:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1) + "' \n pela quantidade:'" + q + "'?", "Alterar quantidade", JOptionPane.YES_NO_OPTION);
                                if (r == 0) {
                                    OutrosProdutos op = new OutrosProdutos();
                                    OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                    dao.alterarQuantidade(op, tblProdutos, q);
                                    ckAlterarQuantidade.setSelected(false);
                                    ckAlterarQuantidadeActionPerformed(evt);
                                    
                                    JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                    txtNomeProduto.setText("");
                                    txtNovoNomeProduto.setText("");
                                    model.setRowCount(0);
                                    dao.pesquisaInicial(op, tblProdutos);
                                    
                                }
                                
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar produto", JOptionPane.OK_OPTION);
                            }
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamenta", "Preencher quantidade", JOptionPane.OK_OPTION);
                    txtQuantidade.setText("");
                    txtQuantidade.requestFocus();
                    txtQuantidade.setBackground(Color.pink);
                }
                
            } catch (Exception e) {
            }
        } else if (ckQuantMax.isSelected()) {
            try {
                int quantMax = Integer.parseInt(txtQuantMax.getText());
                if (quantMax > 0) {
                    txtQuantMax.setBackground(Color.white);
                    try {
                        int quantMin, quantidade;
                        double preco;
                        quantMin = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5).toString());
                        quantidade = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3).toString());
                        preco = Double.parseDouble(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2).toString());
                        
                        if (quantMax <= quantMin) {
                            JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade mínima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                            txtQuantMax.setText("");
                            txtQuantMax.setBackground(Color.pink);
                            txtQuantMax.requestFocus();
                        } else if (quantMax < quantidade) {
                            JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                            txtQuantMax.setText("");
                            txtQuantMax.setBackground(Color.pink);
                            txtQuantMax.requestFocus();
                        } else {
                            txtQuantMax.setBackground(Color.white);

                            //Confirmação antes do método
                            int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nQuantidade máxima:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4) + "' \n\nPelos Seguintes Dados: \n"
                                    + "\nQuantidade máxima: '" + quantMax + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                            if (r == 0) {
                                //INICIANDO O MÉTODO
                                txtNovoNomeProduto.setText(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1).toString());
                                OutrosProdutos op = new OutrosProdutos();
                                OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                model.setRowCount(0);
                                dao.pesquisaInicial(op, tblProdutos);
                                txtNovoNomeProduto.setText("");
                                ckQuantMax.setSelected(false);
                                ckQuantMaxActionPerformed(null);
                            }
                        }
                        
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar produto", JOptionPane.OK_OPTION);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                    txtQuantMax.setText("");
                    txtQuantMax.setBackground(Color.pink);
                    txtQuantMax.requestFocus();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                txtQuantMax.setText("");
                txtQuantMax.setBackground(Color.pink);
                txtQuantMax.requestFocus();
            }
        } else if (ckQuantMin.isSelected()) {
            try {
                int quantMin = Integer.parseInt(txtQuantMin.getText());
                if (quantMin >= 0) {
                    txtQuantMin.setBackground(Color.white);
                    try {
                        int quantMax, quantidade;
                        double preco;
                        quantMax = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 4).toString());
                        quantidade = Integer.parseInt(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 3).toString());
                        preco = Double.parseDouble(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 2).toString());
                        
                        if (quantMax <= quantMin) {
                            JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                            txtQuantMin.setText("");
                            txtQuantMin.setBackground(Color.pink);
                            txtQuantMin.requestFocus();
                        } else if (quantMin > quantidade) {
                            JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade atual", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                            txtQuantMin.setText("");
                            txtQuantMin.setBackground(Color.pink);
                            txtQuantMin.requestFocus();
                        } else {
                            txtQuantMin.setBackground(Color.white);

                            //Confirmação antes do método
                            int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \nQuantidade mínima:'" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 5) + "' \n\nPelos Seguintes Dados: \n"
                                    + "\nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                            if (r == 0) {
                                //INICIANDO O MÉTODO
                                txtNovoNomeProduto.setText(tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1).toString());
                                OutrosProdutos op = new OutrosProdutos();
                                OutrosProdutosDAO dao = new OutrosProdutosDAO();
                                dao.alterarDados(op, tblProdutos, txtNovoNomeProduto, preco, quantidade, quantMax, quantMin);
                                JOptionPane.showMessageDialog(null, "Dados alterar com sucesso!", "Alterar Dados", JOptionPane.OK_OPTION);
                                model.setRowCount(0);
                                txtNomeProduto.setText("");
                                dao.pesquisaInicial(op, tblProdutos);
                                txtNovoNomeProduto.setText("");
                                ckQuantMin.setSelected(false);
                                ckQuantMinActionPerformed(null);
                            }
                        }
                        
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar produto", JOptionPane.OK_OPTION);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                    txtQuantMin.setText("");
                    txtQuantMin.setBackground(Color.pink);
                    txtQuantMin.requestFocus();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, insira uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                txtQuantMin.setText("");
                txtQuantMin.setBackground(Color.pink);
                txtQuantMin.requestFocus();
            }
            
        }
        if (CkDeletarProduto.isSelected()) {
            try {
                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente deletar o produto: '" + tblProdutos.getValueAt(tblProdutos.getSelectedRow(), 1) + " ' ?", "Deletar Produto", JOptionPane.YES_NO_OPTION);
                if (r == 0) {
                    OutrosProdutos op = new OutrosProdutos();
                    OutrosProdutosDAO dao = new OutrosProdutosDAO();
                    dao.deletarProduto(op, tblProdutos);
                    JOptionPane.showMessageDialog(null, "Produto deletado com sucesso", "Deletar Produto", JOptionPane.OK_OPTION);
                    CkDeletarProduto.setSelected(false);
                    CkDeletarProdutoActionPerformed(evt);
                    txtNomeProduto.setText("");
                    model.setRowCount(0);
                    dao.pesquisaInicial(op, tblProdutos);
                    
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum produto", "Selecionar Produto", JOptionPane.OK_OPTION);
            }
        }
    }//GEN-LAST:event_btnConfirmarActionPerformed
    
    private void ckQuantMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckQuantMaxActionPerformed
        if (ckQuantMax.isSelected()) {
            txtQuantMax.setEditable(true);
            txtQuantMax.setBackground(Color.white);
            CkDeletarProduto.setEnabled(false);
            btnConfirmar.setEnabled(true);
        } else if (!ckQuantMax.isSelected()) {
            txtQuantMax.setEditable(true);
            txtQuantMax.setBackground(Color.lightGray);
            txtQuantMax.setText("");
            if (!ckAlterarNomeProduto.isSelected() && !ckAlterarQuantidade.isSelected() && !ckAlterarPreco.isSelected() && !ckQuantMax.isSelected() && !ckQuantMin.isSelected()) {
                CkDeletarProduto.setEnabled(true);
                btnConfirmar.setEnabled(false);
                
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_ckQuantMaxActionPerformed
    
    private void ckQuantMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckQuantMinActionPerformed
        if (ckQuantMin.isSelected()) {
            txtQuantMin.setEditable(true);
            txtQuantMin.setBackground(Color.white);
            CkDeletarProduto.setEnabled(false);
            btnConfirmar.setEnabled(true);
            
        } else if (!ckQuantMin.isSelected()) {
            txtQuantMin.setEditable(true);
            txtQuantMin.setBackground(Color.lightGray);
            txtQuantMin.setText("");
            if (!ckAlterarNomeProduto.isSelected() && !ckAlterarQuantidade.isSelected() && !ckAlterarPreco.isSelected() && !ckQuantMax.isSelected() && !ckQuantMin.isSelected()) {
                CkDeletarProduto.setEnabled(true);
                btnConfirmar.setEnabled(false);
                
            }
            
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_ckQuantMinActionPerformed

    private void jLabel8AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jLabel8AncestorAdded
       ImageIcon icon = new ImageIcon("src/ProjetoImagem/tabela.png");
    jLabel8.setIcon(new ImageIcon(icon.getImage().getScaledInstance(jLabel8.getWidth(),jLabel8.getHeight(), icon.getIconWidth())));  // TODO add your handling code here:
    }//GEN-LAST:event_jLabel8AncestorAdded

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CkDeletarProduto;
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JCheckBox ckAlterarNomeProduto;
    private javax.swing.JCheckBox ckAlterarPreco;
    private javax.swing.JCheckBox ckAlterarQuantidade;
    private javax.swing.JCheckBox ckQuantMax;
    private javax.swing.JCheckBox ckQuantMin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblProdutos;
    private javax.swing.JTextField txtNomeProduto;
    private javax.swing.JTextField txtNovoNomeProduto;
    private javax.swing.JTextField txtPreco;
    private javax.swing.JTextField txtQuantMax;
    private javax.swing.JTextField txtQuantMin;
    private javax.swing.JTextField txtQuantidade;
    // End of variables declaration//GEN-END:variables
}
