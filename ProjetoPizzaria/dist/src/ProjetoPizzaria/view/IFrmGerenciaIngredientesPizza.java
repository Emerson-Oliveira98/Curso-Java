/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ProjetoPizzaria.view;

import ProjetoPizzaria.DAO.IngredientesPizzaDAO;
import ProjetoPizzaria.modelo.IngredientesPizza;
import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Casa
 */
public class IFrmGerenciaIngredientesPizza extends javax.swing.JInternalFrame {

    /**
     * Creates new form IFrmGerenciaIngredientesPizza
     */
    public IFrmGerenciaIngredientesPizza() {
        initComponents();
        getContentPane().setBackground(Color.WHITE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GrupoDeBotao1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        txtNomeIngrediente = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        lblNomeIngrediente = new javax.swing.JLabel();
        txtNovoNomeIngrediente = new javax.swing.JTextField();
        BtnConfirmar = new javax.swing.JButton();
        CbTipoDeMedida = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtQuantidade = new javax.swing.JTextField();
        CkDeletarIngrediente = new javax.swing.JCheckBox();
        ckAlterarNome = new javax.swing.JCheckBox();
        ckAlterarTipo = new javax.swing.JCheckBox();
        ckAlterarQuantidade = new javax.swing.JCheckBox();
        ckQuantMin = new javax.swing.JCheckBox();
        ckQuantMax = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtQuantMin = new javax.swing.JTextField();
        txtQuantMax = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblIngredientes = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setTitle("Gerenciamento de Ingredientes");
        setPreferredSize(new java.awt.Dimension(1200, 600));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Digite o nome do Ingrediente:");

        txtNomeIngrediente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNomeIngredienteKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("O que deseja fazer?");

        lblNomeIngrediente.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblNomeIngrediente.setText("Novo nome do ingrediente:");

        BtnConfirmar.setBackground(new java.awt.Color(255, 51, 51));
        BtnConfirmar.setForeground(new java.awt.Color(255, 255, 255));
        BtnConfirmar.setText("Confirmar");
        BtnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnConfirmarActionPerformed(evt);
            }
        });

        CbTipoDeMedida.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CbTipoDeMedida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Gramas", "Mili-Litros", "Unidades" }));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Tipo de Medida:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Quantidade em Estoque:");

        CkDeletarIngrediente.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        CkDeletarIngrediente.setText("Deletar Ingrediente");
        CkDeletarIngrediente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CkDeletarIngredienteActionPerformed(evt);
            }
        });

        ckAlterarNome.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ckAlterarNome.setText("Alterar nome do ingrediente");
        ckAlterarNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckAlterarNomeActionPerformed(evt);
            }
        });

        ckAlterarTipo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ckAlterarTipo.setText("Alterar tipo de medida");
        ckAlterarTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckAlterarTipoActionPerformed(evt);
            }
        });

        ckAlterarQuantidade.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ckAlterarQuantidade.setText("Alterar Quantidade em estoque");
        ckAlterarQuantidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckAlterarQuantidadeActionPerformed(evt);
            }
        });

        ckQuantMin.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ckQuantMin.setText("Alterar Quantidade MIN");
        ckQuantMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckQuantMinActionPerformed(evt);
            }
        });

        ckQuantMax.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ckQuantMax.setText("Alterar Quantidade MAX");
        ckQuantMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckQuantMaxActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Quantidade Mínima:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Quantidade Máxima:");

        jLabel7.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jLabel7AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        tblIngredientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome do Ingrediente", "Tipo de Medida", "Quantidade em estoque", "Quantidade MAX", "Quantidade MIN"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblIngredientes.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblIngredientes);
        if (tblIngredientes.getColumnModel().getColumnCount() > 0) {
            tblIngredientes.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblIngredientes.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(10, 10, 10)
                                        .addComponent(txtNomeIngrediente, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                    .addComponent(jLabel3)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(CbTipoDeMedida, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                    .addComponent(lblNomeIngrediente)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(txtNovoNomeIngrediente, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addGap(18, 18, 18)
                                                .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(41, 41, 41)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtQuantMin))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtQuantMax, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(0, 417, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(CkDeletarIngrediente)
                                .addGap(18, 18, 18)
                                .addComponent(ckAlterarNome)
                                .addGap(18, 18, 18)
                                .addComponent(ckAlterarTipo)
                                .addGap(18, 18, 18)
                                .addComponent(ckAlterarQuantidade)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ckQuantMax)
                                .addGap(30, 30, 30)
                                .addComponent(ckQuantMin)))
                        .addGap(18, 18, 18))))
            .addGroup(layout.createSequentialGroup()
                .addGap(498, 498, 498)
                .addComponent(BtnConfirmar)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1))
                    .addComponent(txtNomeIngrediente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckAlterarNome)
                    .addComponent(ckAlterarTipo)
                    .addComponent(ckAlterarQuantidade)
                    .addComponent(CkDeletarIngrediente)
                    .addComponent(ckQuantMin)
                    .addComponent(ckQuantMax))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNomeIngrediente)
                    .addComponent(txtNovoNomeIngrediente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(CbTipoDeMedida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtQuantMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtQuantMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BtnConfirmar)
                .addContainerGap(67, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        txtQuantidade.setEditable(false);
        txtQuantidade.setBackground(Color.lightGray);
        txtNovoNomeIngrediente.setEditable(false);
        txtNovoNomeIngrediente.setBackground(Color.lightGray);
        BtnConfirmar.setEnabled(false);
        CbTipoDeMedida.setEnabled(false);
        txtQuantMax.setEditable(false);
        txtQuantMax.setBackground(Color.lightGray);
        txtQuantMin.setEditable(false);
        txtQuantMin.setBackground(Color.lightGray);
        IngredientesPizza ingPizza = new IngredientesPizza();
        IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
        dao.PesquisarTudo(ingPizza, tblIngredientes);
    }//GEN-LAST:event_formInternalFrameOpened

    private void BtnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnConfirmarActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblIngredientes.getModel();
        if (!ckAlterarNome.isSelected() && !ckAlterarQuantidade.isSelected() && !ckAlterarTipo.isSelected() && !CkDeletarIngrediente.isSelected() && !ckQuantMax.isSelected() && !ckQuantMin.isSelected()) {
            JOptionPane.showMessageDialog(null, "Por favor, selecione alguma opção", "Selecionar Opção", JOptionPane.OK_OPTION);
        } // CINCO UPDATES
        else if (ckAlterarNome.isSelected() && ckAlterarQuantidade.isSelected() && ckAlterarTipo.isSelected() && ckQuantMax.isSelected() && ckQuantMin.isSelected()) {
            if (txtNovoNomeIngrediente.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o novo nome do ingrediente", "Preencher nome", JOptionPane.OK_OPTION);
                txtNovoNomeIngrediente.setBackground(Color.pink);
            } else if (CbTipoDeMedida.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de medida", "Selecionar medida", JOptionPane.OK_OPTION);
            } else {
                txtNovoNomeIngrediente.setBackground(Color.white);
                try {
                    int quantidade = Integer.parseInt(txtQuantidade.getText());
                    if (quantidade < 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade", "Quantidade inválida", JOptionPane.OK_OPTION);
                        txtQuantidade.setBackground(Color.pink);
                        txtQuantidade.setText("");
                        txtQuantidade.requestFocus();
                    } else {
                        txtQuantidade.setBackground(Color.white);

                        try {
                            int quantMax = Integer.parseInt(txtQuantMax.getText());

                            if (quantMax <= 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade máxima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.setText("");
                                txtQuantMax.requestFocus();
                            } else {
                                txtQuantMax.setBackground(Color.white);
                                try {
                                    int quantMin = Integer.parseInt(txtQuantMin.getText());
                                    if (quantMin < 0) {
                                        JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade mínima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.setText("");
                                        txtQuantMin.requestFocus();
                                    } else {
                                        txtQuantMin.setBackground(Color.white);

                                        if (quantMin > quantMax) {
                                            JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                            txtQuantMin.setBackground(Color.pink);
                                            txtQuantMin.setText("");
                                            txtQuantMin.requestFocus();
                                        } else if (quantidade > quantMax) {
                                            JOptionPane.showMessageDialog(null, "A quantidade não pode ser maior que a quantidade máxima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                            txtQuantidade.setBackground(Color.pink);
                                            txtQuantidade.setText("");
                                            txtQuantidade.requestFocus();
                                        } else if (quantidade < quantMin) {
                                            JOptionPane.showMessageDialog(null, "A quantidade não pode ser menor que a quantidade mínima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                            txtQuantidade.setBackground(Color.pink);
                                            txtQuantidade.setText("");
                                            txtQuantidade.requestFocus();
                                        } else {
                                            txtQuantidade.setBackground(Color.white);
                                            txtQuantMin.setBackground(Color.white);
                                            //CONFIRMAÇÃO ANTES DO MÉTODO
                                            int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \n \n Nome: ' " + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 1).toString() + " ' \n Tipo: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 2).toString() + " ' \n Quantidade: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString() + " '  \n Quantidade máxima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString() + " ' \n  Quantidade mínima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString() + " ' \n Pelos Valores: \n\n"
                                                    + "Nome: '" + txtNovoNomeIngrediente.getText() + " ' \n Tipo: ' " + CbTipoDeMedida.getSelectedItem().toString() + " ' \n Quantidade: ' " + quantidade + " ' \n Quantidade máxáxim : ' " + quantMax + " ' \n Quantidade mínima: ' " + quantMin + " ' ?", "Alterar dados", JOptionPane.YES_NO_OPTION);
                                            if (r == 0) {
                                                //INICIANDO O MÉTODO
                                                try {
                                                    IngredientesPizza ingPizza = new IngredientesPizza();
                                                    IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                                    dao.AlterarNome_Tipo_Quantidade_QuantMax_QuantMin(ingPizza, tblIngredientes, txtNovoNomeIngrediente, CbTipoDeMedida, quantidade, quantMax, quantMin);
                                                    JOptionPane.showMessageDialog(null, "Alterações efetuadas com sucesso", "Alterar dados", JOptionPane.OK_OPTION);
                                                } catch (Exception e) {
                                                    JOptionPane.showMessageDialog(null, "Por favor, selecione alguma linha", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                                                }
                                            }
                                        }
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade mínima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMin.setBackground(Color.pink);
                                    txtQuantMin.setText("");
                                    txtQuantMin.requestFocus();
                                }
                            }

                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade máxima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                            txtQuantMax.setBackground(Color.pink);
                            txtQuantMax.setText("");
                            txtQuantMax.requestFocus();
                        }
                    }

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade", "Quantidade inválida", JOptionPane.OK_OPTION);
                    txtQuantidade.setBackground(Color.pink);
                    txtQuantidade.setText("");
                    txtQuantidade.requestFocus();
                }
            }
            // QUATRO UPDATES (1)
        } else if (ckAlterarNome.isSelected() && ckAlterarQuantidade.isSelected() && ckAlterarTipo.isSelected() && ckQuantMax.isSelected()) {
            if (txtNovoNomeIngrediente.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o novo nome do ingrediente", "Preencher nome", JOptionPane.OK_OPTION);
                txtNovoNomeIngrediente.setBackground(Color.pink);
            } else if (CbTipoDeMedida.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de medida", "Selecionar medida", JOptionPane.OK_OPTION);
            } else {

                try {
                    int quantidade = Integer.parseInt(txtQuantidade.getText());
                    if (quantidade < 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade", "Quantidade inválida", JOptionPane.OK_OPTION);
                        txtQuantidade.setBackground(Color.pink);
                        txtQuantidade.setText("");
                        txtQuantidade.requestFocus();
                    } else {
                        txtQuantidade.setBackground(Color.white);

                        try {
                            int quantMax = Integer.parseInt(txtQuantMax.getText());

                            if (quantMax <= 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade máxima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.setText("");
                                txtQuantMax.requestFocus();
                            } else {
                                txtQuantMax.setBackground(Color.white);
                                try {
                                    int quantMin = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString());
                                    if (quantMin < 0) {
                                        JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade mínima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.setText("");
                                        txtQuantMin.requestFocus();
                                    } else if (quantMax < quantMin) {
                                        JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser maior que a quantidade mínima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMax.setBackground(Color.pink);
                                        txtQuantMax.setText("");
                                        txtQuantMax.requestFocus();
                                    } else if (quantidade > quantMax) {
                                        JOptionPane.showMessageDialog(null, "A quantidade não pode ser maior que a quantidade máxima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                        txtQuantidade.setBackground(Color.pink);
                                        txtQuantidade.setText("");
                                        txtQuantidade.requestFocus();
                                    } else if (quantidade < quantMin) {
                                        JOptionPane.showMessageDialog(null, "A quantidade não pode ser menor que a quantidade mínima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                        txtQuantidade.setBackground(Color.pink);
                                        txtQuantidade.setText("");
                                        txtQuantidade.requestFocus();
                                    } else {
                                        txtQuantidade.setBackground(Color.white);
                                        txtQuantMax.setBackground(Color.white);
                                        //CONFIRMAÇÃO ANTES DO MÉTODO
                                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \n \n Nome: ' " + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 1).toString() + " ' \n Tipo: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 2).toString() + " ' \n Quantidade: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString() + " '  \n Quantidade máxima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString() + " ' \n Pelos Valores: \n\n"
                                                + "Nome: '" + txtNovoNomeIngrediente.getText() + " ' \n Tipo: ' " + CbTipoDeMedida.getSelectedItem().toString() + " ' \n Quantidade: ' " + quantidade + " ' \n Quantidade máxáxim : ' " + quantMax + " ' ?", "Alterar dados", JOptionPane.YES_NO_OPTION);
                                        if (r == 0) {
                                            //INICIANDO O MÉTODO

                                            IngredientesPizza ingPizza = new IngredientesPizza();
                                            IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                            dao.AlterarNome_Tipo_Quantidade_QuantMax(ingPizza, tblIngredientes, txtNovoNomeIngrediente, CbTipoDeMedida, quantidade, quantMax);
                                            JOptionPane.showMessageDialog(null, "Alterações efetuadas com sucesso", "Alterar dados", JOptionPane.OK_OPTION);

                                        }
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione alguma linha", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                                }
                            }

                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade máxima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                            txtQuantMax.setBackground(Color.pink);
                            txtQuantMax.setText("");
                            txtQuantMax.requestFocus();
                        }
                    }

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade", "Quantidade inválida", JOptionPane.OK_OPTION);
                    txtQuantidade.setBackground(Color.pink);
                    txtQuantidade.setText("");
                    txtQuantidade.requestFocus();
                }
            }

        } //QUATRO UPDATES (2)
        else if (ckAlterarNome.isSelected() && ckAlterarQuantidade.isSelected() && ckAlterarTipo.isSelected() && ckQuantMin.isSelected()) {
            if (txtNovoNomeIngrediente.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o novo nome do ingrediente", "Preencher nome", JOptionPane.OK_OPTION);
                txtNovoNomeIngrediente.setBackground(Color.pink);
            } else if (CbTipoDeMedida.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de medida", "Selecionar medida", JOptionPane.OK_OPTION);
            } else {
                txtNovoNomeIngrediente.setBackground(Color.white);
                try {
                    int quantidade = Integer.parseInt(txtQuantidade.getText());
                    if (quantidade < 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade", "Quantidade inválida", JOptionPane.OK_OPTION);
                        txtQuantidade.setBackground(Color.pink);
                        txtQuantidade.setText("");
                        txtQuantidade.requestFocus();
                    } else {
                        txtQuantidade.setBackground(Color.white);

                        try {
                            int quantMin = Integer.parseInt(txtQuantMin.getText());
                            if (quantMin < 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade mínima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.setText("");
                                txtQuantMin.requestFocus();
                            } else {
                                txtQuantMin.setBackground(Color.white);
                                try {
                                    int quantMax = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString());

                                    if (quantMin > quantMax) {
                                        JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.setText("");
                                        txtQuantMin.requestFocus();
                                    } else if (quantidade > quantMax) {
                                        JOptionPane.showMessageDialog(null, "A quantidade não pode ser maior que a quantidade máxima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                        txtQuantidade.setBackground(Color.pink);
                                        txtQuantidade.setText("");
                                        txtQuantidade.requestFocus();
                                    } else if (quantidade < quantMin) {
                                        JOptionPane.showMessageDialog(null, "A quantidade não pode ser menor que a quantidade mínima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                        txtQuantidade.setBackground(Color.pink);
                                        txtQuantidade.setText("");
                                        txtQuantidade.requestFocus();
                                    } else {
                                        txtQuantidade.setBackground(Color.white);
                                        txtQuantMin.setBackground(Color.white);
                                        //CONFIRMAÇÃO ANTES DO MÉTODO
                                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \n \n Nome: ' " + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 1).toString() + " ' \n Tipo: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 2).toString() + " ' \n Quantidade: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString() + " ' \n  Quantidade mínima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString() + " ' \n Pelos Valores: \n\n"
                                                + "Nome: '" + txtNovoNomeIngrediente.getText() + " ' \n Tipo: ' " + CbTipoDeMedida.getSelectedItem().toString() + " ' \n Quantidade: ' " + quantidade + " ' \n Quantidade mínima: ' " + quantMin + " ' ?", "Alterar dados", JOptionPane.YES_NO_OPTION);
                                        if (r == 0) {
                                            //INICIANDO O MÉTODO
                                            try {
                                                IngredientesPizza ingPizza = new IngredientesPizza();
                                                IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                                dao.AlterarNome_Tipo_Quantidade_QuantMin(ingPizza, tblIngredientes, txtNovoNomeIngrediente, CbTipoDeMedida, quantidade, quantMin);
                                                JOptionPane.showMessageDialog(null, "Alterações efetuadas com sucesso", "Alterar dados", JOptionPane.OK_OPTION);
                                            } catch (Exception e) {
                                                JOptionPane.showMessageDialog(null, "Por favor, selecione alguma linha", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                                            }
                                        }
                                    }

                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione um ingrediente", "Selecionar um ingrediente", JOptionPane.OK_OPTION);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade mínima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                            txtQuantMin.setBackground(Color.pink);
                            txtQuantMin.setText("");
                            txtQuantMin.requestFocus();
                        }
                    }

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade", "Quantidade inválida", JOptionPane.OK_OPTION);
                    txtQuantidade.setBackground(Color.pink);
                    txtQuantidade.setText("");
                    txtQuantidade.requestFocus();
                }
            }
        } // QUATRO UPDATES(3)
        else if (ckAlterarNome.isSelected() && ckAlterarTipo.isSelected() && ckQuantMax.isSelected() && ckQuantMin.isSelected()) {
            if (txtNovoNomeIngrediente.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do ingrediente", "Preencher Nome", JOptionPane.OK_OPTION);
                txtNovoNomeIngrediente.setBackground(Color.pink);
                txtNovoNomeIngrediente.requestFocus();
            } else if (CbTipoDeMedida.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de medida", "Selecionar medida", JOptionPane.OK_OPTION);
            } else {
                txtNovoNomeIngrediente.setBackground(Color.white);
                try {
                    int quantMax = Integer.parseInt(txtQuantMax.getText());

                    if (quantMax <= 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade máxima", "Quantidade inválida", JOptionPane.OK_OPTION);
                        txtQuantMax.setBackground(Color.pink);
                        txtQuantMax.setText("");
                        txtQuantMax.requestFocus();
                    } else {
                        txtQuantMax.setBackground(Color.white);
                        try {
                            int quantMin = Integer.parseInt(txtQuantMin.getText());
                            if (quantMin <= 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade mínima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.setText("");
                                txtQuantMin.requestFocus();
                            } else {
                                txtQuantMin.setBackground(Color.white);
                                try {
                                    int quantidade = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString());

                                    if (quantMin > quantMax) {
                                        JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.setText("");
                                        txtQuantMin.requestFocus();
                                    } else if (quantMax < quantidade) {
                                        JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade atual", "Quantidade inválida", JOptionPane.OK_OPTION);
                                        txtQuantMax.setBackground(Color.pink);
                                        txtQuantMax.setText("");
                                        txtQuantMax.requestFocus();
                                    } else if (quantMin > quantidade) {
                                        JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade atual", "Quantidade inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.setText("");
                                        txtQuantMin.requestFocus();
                                    } else {
                                        txtQuantMin.setBackground(Color.white);
                                        txtQuantMax.setBackground(Color.white);
                                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \n \n Nome: ' " + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 1).toString() + " ' \n Tipo: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 2).toString() + " ' \n Quantidade máxima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString() + " ' \n  Quantidade mínima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString() + " ' \n Pelos Valores: \n\n"
                                                + "Nome: '" + txtNovoNomeIngrediente.getText() + " ' \n Tipo: ' " + CbTipoDeMedida.getSelectedItem().toString() + " ' \n Quantidade Máxima: ' " + quantMax + " ' \n Quantidade mínima: ' " + quantMin + " ' ?", "Alterar dados", JOptionPane.YES_NO_OPTION);
                                        if (r == 0) {
                                            //INICIANDO O MÉTODO
                                            try {
                                                IngredientesPizza ingPizza = new IngredientesPizza();
                                                IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                                dao.AlterarNome_Tipo_QuantMax_QuantMin(ingPizza, tblIngredientes, txtNovoNomeIngrediente, CbTipoDeMedida, quantMax, quantMin);
                                                JOptionPane.showMessageDialog(null, "Alterações efetuadas com sucesso", "Alterar dados", JOptionPane.OK_OPTION);
                                            } catch (Exception e) {
                                                JOptionPane.showMessageDialog(null, "Por favor, selecione alguma linha", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                                            }
                                        }
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum ingrediente", "Selecionar Ingrediente", JOptionPane.OK_OPTION);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade mínima", "Quantidade inválida", JOptionPane.OK_OPTION);
                            txtQuantMin.setBackground(Color.pink);
                            txtQuantMin.setText("");
                            txtQuantMin.requestFocus();
                        }

                    }

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade máxima", "Quantidade inválida", JOptionPane.OK_OPTION);
                    txtQuantMax.setBackground(Color.pink);
                    txtQuantMax.setText("");
                    txtQuantMax.requestFocus();
                }
            }

        } //QUATRO UPDATES (4)
        else if (ckAlterarNome.isSelected() && ckAlterarQuantidade.isSelected() && ckQuantMax.isSelected() && ckQuantMin.isSelected()) {
            if (txtNovoNomeIngrediente.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o novo nome do ingrediente", "Preencher nome", JOptionPane.OK_OPTION);
                txtNovoNomeIngrediente.setBackground(Color.pink);
            } else {
                txtNovoNomeIngrediente.setBackground(Color.white);
                try {
                    int quantidade = Integer.parseInt(txtQuantidade.getText());
                    if (quantidade < 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade", "Quantidade inválida", JOptionPane.OK_OPTION);
                        txtQuantidade.setBackground(Color.pink);
                        txtQuantidade.setText("");
                        txtQuantidade.requestFocus();
                    } else {
                        txtQuantidade.setBackground(Color.white);

                        try {
                            int quantMax = Integer.parseInt(txtQuantMax.getText());

                            if (quantMax <= 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade máxima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.setText("");
                                txtQuantMax.requestFocus();
                            } else {
                                txtQuantMax.setBackground(Color.white);
                                try {
                                    int quantMin = Integer.parseInt(txtQuantMin.getText());
                                    if (quantMin < 0) {
                                        JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade mínima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.setText("");
                                        txtQuantMin.requestFocus();
                                    } else {
                                        txtQuantMin.setBackground(Color.white);

                                        if (quantMin > quantMax) {
                                            JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                            txtQuantMin.setBackground(Color.pink);
                                            txtQuantMin.setText("");
                                            txtQuantMin.requestFocus();
                                        } else if (quantidade > quantMax) {
                                            JOptionPane.showMessageDialog(null, "A quantidade não pode ser maior que a quantidade máxima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                            txtQuantidade.setBackground(Color.pink);
                                            txtQuantidade.setText("");
                                            txtQuantidade.requestFocus();
                                        } else if (quantidade < quantMin) {
                                            JOptionPane.showMessageDialog(null, "A quantidade não pode ser menor que a quantidade mínima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                            txtQuantidade.setBackground(Color.pink);
                                            txtQuantidade.setText("");
                                            txtQuantidade.requestFocus();
                                        } else {
                                            txtQuantidade.setBackground(Color.white);
                                            txtQuantMin.setBackground(Color.white);
                                            //CONFIRMAÇÃO ANTES DO MÉTODO
                                            int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \n \n Nome: ' " + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 1).toString() + " ' \nQuantidade: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString() + " '  \nQuantidade máxima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString() + " ' \nQuantidade mínima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString() + " ' \n Pelos Valores: \n\n"
                                                    + "Nome: '" + txtNovoNomeIngrediente.getText() + " ' \nQuantidade: ' " + quantidade + " ' \nQuantidade máxáxim : ' " + quantMax + " ' \nQuantidade mínima: ' " + quantMin + " ' ?", "Alterar dados", JOptionPane.YES_NO_OPTION);
                                            if (r == 0) {
                                                //INICIANDO O MÉTODO
                                                try {
                                                    IngredientesPizza ingPizza = new IngredientesPizza();
                                                    IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                                    dao.AlterarNome_Quantidade_QuantMax_QuantMin(ingPizza, tblIngredientes, txtNovoNomeIngrediente, quantidade, quantMax, quantMin);
                                                    JOptionPane.showMessageDialog(null, "Alterações efetuadas com sucesso", "Alterar dados", JOptionPane.OK_OPTION);
                                                } catch (Exception e) {
                                                    JOptionPane.showMessageDialog(null, "Por favor, selecione alguma linha", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                                                }
                                            }
                                        }
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade mínima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMin.setBackground(Color.pink);
                                    txtQuantMin.setText("");
                                    txtQuantMin.requestFocus();
                                }
                            }

                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade máxima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                            txtQuantMax.setBackground(Color.pink);
                            txtQuantMax.setText("");
                            txtQuantMax.requestFocus();
                        }
                    }

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade", "Quantidade inválida", JOptionPane.OK_OPTION);
                    txtQuantidade.setBackground(Color.pink);
                    txtQuantidade.setText("");
                    txtQuantidade.requestFocus();
                }
            }
        } //QUATRO UPDATES (5)    
        else if (ckAlterarQuantidade.isSelected() && ckAlterarTipo.isSelected() && ckQuantMax.isSelected() && ckQuantMin.isSelected()) {
            if (CbTipoDeMedida.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de medida", "Selecionar medida", JOptionPane.OK_OPTION);
            } else {

                try {
                    int quantidade = Integer.parseInt(txtQuantidade.getText());
                    if (quantidade < 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade", "Quantidade inválida", JOptionPane.OK_OPTION);
                        txtQuantidade.setBackground(Color.pink);
                        txtQuantidade.setText("");
                        txtQuantidade.requestFocus();
                    } else {
                        txtQuantidade.setBackground(Color.white);

                        try {
                            int quantMax = Integer.parseInt(txtQuantMax.getText());

                            if (quantMax <= 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade máxima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.setText("");
                                txtQuantMax.requestFocus();
                            } else {
                                txtQuantMax.setBackground(Color.white);
                                try {
                                    int quantMin = Integer.parseInt(txtQuantMin.getText());
                                    if (quantMin < 0) {
                                        JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade mínima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.setText("");
                                        txtQuantMin.requestFocus();
                                    } else {
                                        txtQuantMin.setBackground(Color.white);

                                        if (quantMin > quantMax) {
                                            JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                            txtQuantMin.setBackground(Color.pink);
                                            txtQuantMin.setText("");
                                            txtQuantMin.requestFocus();
                                        } else if (quantidade > quantMax) {
                                            JOptionPane.showMessageDialog(null, "A quantidade não pode ser maior que a quantidade máxima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                            txtQuantidade.setBackground(Color.pink);
                                            txtQuantidade.setText("");
                                            txtQuantidade.requestFocus();
                                        } else if (quantidade < quantMin) {
                                            JOptionPane.showMessageDialog(null, "A quantidade não pode ser menor que a quantidade mínima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                            txtQuantidade.setBackground(Color.pink);
                                            txtQuantidade.setText("");
                                            txtQuantidade.requestFocus();
                                        } else {
                                            txtQuantidade.setBackground(Color.white);
                                            txtQuantMin.setBackground(Color.white);
                                            //CONFIRMAÇÃO ANTES DO MÉTODO
                                            int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \n \n Tipo: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 2).toString() + " ' \n Quantidade: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString() + " '  \n Quantidade máxima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString() + " ' \n  Quantidade mínima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString() + "' \n\n Pelos Valores: \n"
                                                    + " \n Tipo: ' " + CbTipoDeMedida.getSelectedItem().toString() + " ' \n Quantidade: ' " + quantidade + " ' \n Quantidade máxáxim : ' " + quantMax + " ' \n Quantidade mínima: ' " + quantMin + " ' ?", "Alterar dados", JOptionPane.YES_NO_OPTION);
                                            if (r == 0) {
                                                //INICIANDO O MÉTODO
                                                try {
                                                    IngredientesPizza ingPizza = new IngredientesPizza();
                                                    IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                                    dao.AlterarTipo_Quantidade_QuantMax_QuantMin(ingPizza, tblIngredientes, CbTipoDeMedida, quantidade, quantMax, quantMin);
                                                    JOptionPane.showMessageDialog(null, "Alterações efetuadas com sucesso", "Alterar dados", JOptionPane.OK_OPTION);
                                                } catch (Exception e) {
                                                    JOptionPane.showMessageDialog(null, "Por favor, selecione alguma linha", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                                                }
                                            }
                                        }
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade mínima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMin.setBackground(Color.pink);
                                    txtQuantMin.setText("");
                                    txtQuantMin.requestFocus();
                                }
                            }

                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade máxima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                            txtQuantMax.setBackground(Color.pink);
                            txtQuantMax.setText("");
                            txtQuantMax.requestFocus();
                        }
                    }

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha corretamente a quantidade", "Quantidade inválida", JOptionPane.OK_OPTION);
                    txtQuantidade.setBackground(Color.pink);
                    txtQuantidade.setText("");
                    txtQuantidade.requestFocus();
                }
            }
        } // TRES UPDATES (1)
        else if (ckAlterarNome.isSelected() && ckAlterarTipo.isSelected() && ckQuantMax.isSelected()) {
            if (txtNovoNomeIngrediente.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o novo nome do ingrediente", "Preencher nome", JOptionPane.OK_OPTION);
                txtNovoNomeIngrediente.setBackground(Color.pink);
                txtNovoNomeIngrediente.requestFocus();
            } else if (CbTipoDeMedida.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de medida", "Selecionar medida", JOptionPane.OK_OPTION);
            } else {
                txtNovoNomeIngrediente.setBackground(Color.white);
                try {
                    int quantMax = Integer.parseInt(txtQuantMax.getText());
                    if (quantMax <= 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha a quantidade máxima corretamente", "Quantidade inválida", JOptionPane.OK_OPTION);
                        txtQuantMax.setBackground(Color.pink);
                        txtQuantMax.setText("");
                        txtQuantMax.requestFocus();
                    } else {
                        try {
                            int quantidade, quantMin;
                            quantidade = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString());
                            quantMin = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString());

                            if (quantMax < quantMin) {
                                JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade mínima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.setText("");
                                txtQuantMax.requestFocus();
                            } else if (quantidade > quantMax) {
                                JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.setText("");
                                txtQuantMax.requestFocus();
                            } else {
                                txtQuantMax.setBackground(Color.white);
                                //VERIFICAÇÃO ANTES DE INICIAR O MÉTODO
                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \n \n Nome: ' " + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 1).toString() + " ' \n Tipo: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 2).toString() + " ' \n Quantidade máxima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString() + " ' \n Pelos Valores: \n\n"
                                        + "Nome: '" + txtNovoNomeIngrediente.getText() + " ' \n Tipo: ' " + CbTipoDeMedida.getSelectedItem().toString() + " ' \n Quantidade Máxima: ' " + quantMax + " ' ?", "Alterar dados", JOptionPane.YES_NO_OPTION);
                                if (r == 0) {
                                    //INICIANDO O MÉTODO
                                    try {
                                        IngredientesPizza ingPizza = new IngredientesPizza();
                                        IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                        dao.AlterarNome_Tipo_QuantMax(ingPizza, tblIngredientes, txtNovoNomeIngrediente, CbTipoDeMedida, quantMax);
                                        JOptionPane.showMessageDialog(null, "Alterações efetuadas com sucesso", "Alterar dados", JOptionPane.OK_OPTION);
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Por favor, selecione alguma linha", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                                    }
                                }
                            }

                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum ingrediente", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha a quantidade máxima corretamente", "Quantidade inválida", JOptionPane.OK_OPTION);
                    txtQuantMax.setBackground(Color.pink);
                    txtQuantMax.setText("");
                    txtQuantMax.requestFocus();
                }
            }
        } // TRES UPDATES (2)
        else if (ckAlterarNome.isSelected() && ckAlterarTipo.isSelected() && ckQuantMax.isSelected()) {
            if (txtNovoNomeIngrediente.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o novo nome do ingrediente", "Preencher nome", JOptionPane.OK_OPTION);
                txtNovoNomeIngrediente.setBackground(Color.pink);
                txtNovoNomeIngrediente.requestFocus();
            } else if (CbTipoDeMedida.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de medida", "Selecionar medida", JOptionPane.OK_OPTION);
            } else {
                txtNovoNomeIngrediente.setBackground(Color.white);
                try {
                    int quantMin = Integer.parseInt(txtQuantMax.getText());
                    if (quantMin <= 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha a quantidade mínima corretamente", "Quantidade inválida", JOptionPane.OK_OPTION);
                        txtQuantMin.setBackground(Color.pink);
                        txtQuantMin.setText("");
                        txtQuantMin.requestFocus();
                    } else {
                        try {
                            int quantidade, quantMax;
                            quantidade = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString());
                            quantMax = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString());

                            if (quantMax < quantMin) {
                                JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.setText("");
                                txtQuantMin.requestFocus();
                            } else if (quantidade < quantMin) {
                                JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade atual", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.setText("");
                                txtQuantMin.requestFocus();
                            } else {
                                txtQuantMin.setBackground(Color.white);
                                //VERIFICAÇÃO ANTES DE INICIAR O MÉTODO
                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \n \n Nome: ' " + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 1).toString() + " ' \n Tipo: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 2).toString() + " ' \n Quantidade mínima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString() + " ' \n Pelos Valores: \n\n"
                                        + "Nome: '" + txtNovoNomeIngrediente.getText() + " ' \n Tipo: ' " + CbTipoDeMedida.getSelectedItem().toString() + " ' \n Quantidade Mínima: ' " + quantMin + " ' ?", "Alterar dados", JOptionPane.YES_NO_OPTION);
                                if (r == 0) {
                                    //INICIANDO O MÉTODO
                                    try {
                                        IngredientesPizza ingPizza = new IngredientesPizza();
                                        IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                        dao.AlterarNome_Tipo_QuantMin(ingPizza, tblIngredientes, txtNovoNomeIngrediente, CbTipoDeMedida, quantMin);
                                        JOptionPane.showMessageDialog(null, "Alterações efetuadas com sucesso", "Alterar dados", JOptionPane.OK_OPTION);
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Por favor, selecione alguma linha", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                                    }
                                }
                            }

                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum ingrediente", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha a quantidade mínima corretamente", "Quantidade inválida", JOptionPane.OK_OPTION);
                    txtQuantMin.setBackground(Color.pink);
                    txtQuantMin.setText("");
                    txtQuantMin.requestFocus();
                }
            }
        } //TRES UPDATES (3)
        else if (ckAlterarNome.isSelected() && ckAlterarQuantidade.isSelected() && ckQuantMax.isSelected()) {
            if (txtNovoNomeIngrediente.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o novo nome do ingrediente", "Preencher nome", JOptionPane.OK_OPTION);
                txtNovoNomeIngrediente.setBackground(Color.pink);
                txtNovoNomeIngrediente.requestFocus();
            } else {
                txtNovoNomeIngrediente.setBackground(Color.white);
                try {
                    int quantidade = Integer.parseInt(txtQuantidade.getText());
                    if (quantidade < 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, digite a quantidade atual corretamente", "Quantidade inválida", JOptionPane.OK_OPTION);
                        txtQuantidade.setBackground(Color.pink);
                        txtQuantidade.setText("");
                        txtQuantidade.requestFocus();
                    } else {
                        txtQuantidade.setBackground(Color.white);
                        try {
                            int quantMax = Integer.parseInt(txtQuantMax.getText());
                            if (quantMax <= 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, digite a quantidade máxima corretamente", "Quantidade maxima inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.setText("");
                                txtQuantMax.requestFocus();
                            } else {
                                try {
                                    int quantMin = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString());

                                    if (quantMin > quantMax) {
                                        JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade mínima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMax.setBackground(Color.pink);
                                        txtQuantMax.setText("");
                                        txtQuantMax.requestFocus();
                                    } else if (quantidade > quantMax) {
                                        JOptionPane.showMessageDialog(null, "A quantidade não pode ser maior que a quantidade máxima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                        txtQuantidade.setBackground(Color.pink);
                                        txtQuantidade.setText("");
                                        txtQuantidade.requestFocus();
                                    } else if (quantidade < quantMin) {
                                        JOptionPane.showMessageDialog(null, "A quantidade não pode ser menor que a quantidade mínima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                        txtQuantidade.setBackground(Color.pink);
                                        txtQuantidade.setText("");
                                        txtQuantidade.requestFocus();
                                    } else {
                                        txtQuantidade.setBackground(Color.white);
                                        txtQuantMax.setBackground(Color.white);
                                        //CONFIRMAÇÃO ANTES DO MÉTODO
                                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \n \n Nome: ' " + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 1).toString() + " '\n Quantidade: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString() + " ' \n  Quantidade máxima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString() + " ' \n Pelos Valores: \n\n"
                                                + "Nome: '" + txtNovoNomeIngrediente.getText() + " ' \nQuantidade: ' " + quantidade + " ' \n Quantidade máxima: ' " + quantMax + " ' ?", "Alterar dados", JOptionPane.YES_NO_OPTION);
                                        if (r == 0) {
                                            //INICIANDO O MÉTODO
                                            try {
                                                IngredientesPizza ingPizza = new IngredientesPizza();
                                                IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                                dao.AlterarNome_Quantidade_QuantMax(ingPizza, tblIngredientes, txtNovoNomeIngrediente, quantidade, quantMax);
                                                JOptionPane.showMessageDialog(null, "Alterações efetuadas com sucesso", "Alterar dados", JOptionPane.OK_OPTION);
                                            } catch (Exception e) {
                                                JOptionPane.showMessageDialog(null, "Por favor, selecione alguma linha", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                                            }
                                        }

                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum ingrediente", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite a quantidade máxima corretamente", "Quantidade maxima inválida", JOptionPane.OK_OPTION);
                            txtQuantMax.setBackground(Color.pink);
                            txtQuantMax.setText("");
                            txtQuantMax.requestFocus();
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, digite a quantidade atual corretamente", "Quantidade inválida", JOptionPane.OK_OPTION);
                    txtQuantidade.setBackground(Color.pink);
                    txtQuantidade.setText("");
                    txtQuantidade.requestFocus();
                }
            }
        } // TRES UPDATES(5)
        else if (ckAlterarNome.isSelected() && ckQuantMax.isSelected() && ckQuantMin.isSelected()) {
            if (txtNovoNomeIngrediente.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o novo nome do ingrediente", "Preencher nome", JOptionPane.OK_OPTION);
                txtNovoNomeIngrediente.setBackground(Color.pink);
                txtNovoNomeIngrediente.requestFocus();
            } else {
                txtNovoNomeIngrediente.setBackground(Color.white);
                try {
                    int quantMax = Integer.parseInt(txtQuantMax.getText());
                    if (quantMax <= 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, digite a quantidade máxima corretamente", "Quantidade maxima inválida", JOptionPane.OK_OPTION);
                        txtQuantMax.setBackground(Color.pink);
                        txtQuantMax.setText("");
                        txtQuantMax.requestFocus();
                    } else {
                        txtQuantMax.setBackground(Color.white);
                        try {
                            int quantMin = Integer.parseInt(txtQuantMin.getText());
                            if (quantMin < 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, digite a quantidade mínima corretamente", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.setText("");
                                txtQuantMin.requestFocus();
                            } else {
                                txtQuantMin.setBackground(Color.white);
                                try {
                                    int quantidade = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString());
                                    if (quantMax < quantMin) {
                                        JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade mínima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMax.setBackground(Color.pink);
                                        txtQuantMax.setText("");
                                        txtQuantMax.requestFocus();
                                    } else if (quantMin > quantidade) {
                                        JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade atual", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.setText("");
                                        txtQuantMin.requestFocus();
                                    } else if (quantMax < quantidade) {
                                        JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMax.setBackground(Color.pink);
                                        txtQuantMax.setText("");
                                        txtQuantMax.requestFocus();
                                    } else {
                                        // CONFIRMAÇÃO ANTES DA CRIAÇÃO DO MÉTODO
                                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os dados: \n \nNome: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 1).toString() + "'\nQuantidade máxima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString() + "'\nQuantidade mínima:'" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString() + "' \n \n"
                                                + "Pelos seguintes valores: \n \n  Nome:'" + txtNovoNomeIngrediente.getText() + "' \nQuantidade máxima:'" + quantMax + "'\nQuantidade mínima:'" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                        if (r == 0) {
                                            //INICIANDO O MÉTODO
                                            try {
                                                IngredientesPizza ingPizza = new IngredientesPizza();
                                                IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                                dao.AlterarNome_QuantMax_QuantMin(ingPizza, tblIngredientes, txtNovoNomeIngrediente, quantMax, quantMin);
                                                JOptionPane.showMessageDialog(null, "Alterações efetuadas com sucesso", "Alterar dados", JOptionPane.OK_OPTION);
                                            } catch (Exception e) {
                                                JOptionPane.showMessageDialog(null, "Por favor, selecione alguma linha", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                                            }
                                        }
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum ingrediente", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite a quantidade mínima corretamente", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                            txtQuantMin.setBackground(Color.pink);
                            txtQuantMin.setText("");
                            txtQuantMin.requestFocus();
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, digite a quantidade máxima corretamente", "Quantidade maxima inválida", JOptionPane.OK_OPTION);
                    txtQuantMax.setBackground(Color.pink);
                    txtQuantMax.setText("");
                    txtQuantMax.requestFocus();
                }
            }

        } //TRES UPDATES(6)
        else if (ckAlterarTipo.isSelected() && ckAlterarQuantidade.isSelected() && ckQuantMax.isSelected()) {
            if (CbTipoDeMedida.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de medida", "Selecionar medida", JOptionPane.OK_OPTION);

            } else {
                try {
                    int quantidade = Integer.parseInt(txtQuantidade.getText());
                    if (quantidade < 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                        txtQuantidade.setBackground(Color.pink);
                        txtQuantidade.setText("");
                        txtQuantidade.requestFocus();
                    } else {
                        txtQuantidade.setBackground(Color.white);
                        try {
                            int quantMax = Integer.parseInt(txtQuantMax.getText());
                            if (quantMax <= 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.setText("");
                                txtQuantMax.requestFocus();
                            } else {
                                txtQuantMax.setBackground(Color.white);
                                try {
                                    int quantMin = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString());
                                    if (quantMax < quantMin) {
                                        JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade mínima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMax.setBackground(Color.pink);
                                        txtQuantMax.setText("");
                                        txtQuantMax.requestFocus();
                                    } else if (quantidade > quantMax) {
                                        JOptionPane.showMessageDialog(null, "A quantidade atual não pode ser maior que a quantidade máxima", "Quantidade atual inválida", JOptionPane.OK_OPTION);
                                        txtQuantidade.setBackground(Color.pink);
                                        txtQuantidade.setText("");
                                        txtQuantidade.requestFocus();
                                    } else if (quantidade < quantMin) {
                                        JOptionPane.showMessageDialog(null, "A quantidade atual não pode ser menor que a quantidade mínima", "Quantidade atual inválida", JOptionPane.OK_OPTION);
                                        txtQuantidade.setBackground(Color.pink);
                                        txtQuantidade.setText("");
                                        txtQuantidade.requestFocus();
                                    } else {
                                        txtQuantidade.setBackground(Color.white);
                                        txtQuantMax.setBackground(Color.white);

                                        //Confirmação antes de iniciar o método
                                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os seguintes dados: \n\n Tipo: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 2).toString() + "' \n Quantidade: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString() + "' \n Quantidade máxima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString() + "' \n \n Pelos seguintes valores: \n \n"
                                                + "Tipo: '" + CbTipoDeMedida.getSelectedItem() + "' \nQuantidade: '" + txtQuantidade.getText() + "' \nQuantidade máxima: '" + txtQuantMax.getText() + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);

                                        if (r == 0) {
                                            //INICIANDO O MÉTODO
                                            try {
                                                IngredientesPizza ingPizza = new IngredientesPizza();
                                                IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                                dao.AlterarTipo_Quantidade_QuantMax(ingPizza, tblIngredientes, CbTipoDeMedida, quantidade, quantMax);
                                                JOptionPane.showMessageDialog(null, "Alterações efetuadas com sucesso", "Alterar dados", JOptionPane.OK_OPTION);
                                            } catch (Exception e) {
                                                JOptionPane.showMessageDialog(null, "Por favor, selecione alguma linha", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                                            }
                                        }
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum ingrediente", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                            txtQuantMax.setBackground(Color.pink);
                            txtQuantMax.setText("");
                            txtQuantMax.requestFocus();
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                    txtQuantidade.setBackground(Color.pink);
                    txtQuantidade.setText("");
                    txtQuantidade.requestFocus();
                }
            }
        } // TRES UPDATES (7)
        else if (ckAlterarTipo.isSelected() && ckAlterarQuantidade.isSelected() && ckQuantMin.isSelected()) {
            if (CbTipoDeMedida.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de medida", "Selecionar medida", JOptionPane.OK_OPTION);
            } else {
                try {
                    int quantidade = Integer.parseInt(txtQuantidade.getText());
                    if (quantidade < 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                        txtQuantidade.setBackground(Color.pink);
                        txtQuantidade.setText("");
                        txtQuantidade.requestFocus();
                    } else {
                        txtQuantidade.setBackground(Color.white);
                        try {
                            int quantMin = Integer.parseInt(txtQuantMin.getText());
                            if (quantMin < 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.setText("");
                                txtQuantMin.requestFocus();
                            } else {
                                try {
                                    int quantMax = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString());
                                    if (quantMin > quantMax) {
                                        JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade maxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.setText("");
                                        txtQuantMin.requestFocus();
                                    } else if (quantidade < quantMin) {
                                        JOptionPane.showMessageDialog(null, "A quantidade atual não pode ser menor que a quantidade mínima", "Quantidade atual inválida", JOptionPane.OK_OPTION);
                                        txtQuantidade.setBackground(Color.pink);
                                        txtQuantidade.setText("");
                                        txtQuantidade.requestFocus();
                                    } else if (quantidade > quantMax) {
                                        JOptionPane.showMessageDialog(null, "A quantidade atual não pode ser maior que a quantidade máxima", "Quantidade atual inválida", JOptionPane.OK_OPTION);
                                        txtQuantidade.setBackground(Color.pink);
                                        txtQuantidade.setText("");
                                        txtQuantidade.requestFocus();
                                    } else {
                                        txtQuantidade.setBackground(Color.white);
                                        txtQuantMin.setBackground(Color.white);

                                        //CONFIRMAÇÃO ANTES DE INICIAR O MÉTODO
                                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os seguintes campos: \n\nTipo: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 2).toString() + "' \nQuantidade: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString() + "' \n \n Quantidade mínima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString() + "' \n \n Pelos seguintes valores: \n\n"
                                                + "Tipo: '" + CbTipoDeMedida.getSelectedItem() + "' \nQuantidade: '" + txtQuantidade.getText() + "' \n Quantidade mínima: '" + txtQuantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                        if (r == 0) {
                                            //INICIANDO O MÉTODO
                                            try {
                                                IngredientesPizza ingPizza = new IngredientesPizza();
                                                IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                                dao.AlterarTipo_Quantidade_QuantMin(ingPizza, tblIngredientes, CbTipoDeMedida, quantidade, quantMin);
                                                JOptionPane.showMessageDialog(null, "Alterações efetuadas com sucesso", "Alterar dados", JOptionPane.OK_OPTION);
                                            } catch (Exception e) {
                                                JOptionPane.showMessageDialog(null, "Por favor, selecione alguma linha", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                                            }
                                        }
                                    }
                                } catch (Exception e) {
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                            txtQuantMin.setBackground(Color.pink);
                            txtQuantMin.setText("");
                            txtQuantMin.requestFocus();
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                    txtQuantidade.setBackground(Color.pink);
                    txtQuantidade.setText("");
                    txtQuantidade.requestFocus();
                }
            }

        } //TRES UPDATES (8)
        else if (ckAlterarTipo.isSelected() && ckQuantMin.isSelected() && ckQuantMax.isSelected()) {
            if (CbTipoDeMedida.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de medida", "Selecionar medida", JOptionPane.OK_OPTION);
            } else {
                try {
                    int quantMax = Integer.parseInt(txtQuantMax.getText());
                    if (quantMax <= 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                        txtQuantMax.setBackground(Color.pink);
                        txtQuantMax.setText("");
                        txtQuantMax.requestFocus();
                    } else {
                        txtQuantMax.setBackground(Color.white);
                        try {
                            int quantMin = Integer.parseInt(txtQuantMin.getText());
                            if (quantMin < 0) {
                                JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.setText("");
                                txtQuantMin.requestFocus();
                            } else {
                                try {
                                    int quantidade = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString());
                                    if (quantMax < quantMin) {
                                        JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade mínima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMax.setBackground(Color.pink);
                                        txtQuantMax.setText("");
                                        txtQuantMax.requestFocus();
                                    } else if (quantMax < quantidade) {
                                        JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMax.setBackground(Color.pink);
                                        txtQuantMax.setText("");
                                        txtQuantMax.requestFocus();
                                    } else if (quantMin > quantidade) {
                                        JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade atual", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.setText("");
                                        txtQuantMin.requestFocus();
                                    } else {
                                        txtQuantMin.setBackground(Color.white);
                                        txtQuantMax.setBackground(Color.white);

                                        //CONFIRMAÇÃO ANTES DE INICIAR O MÉTODO
                                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os seguintes dados: \n\nTipo: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 2).toString() + "'\nQuantidade máxima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString() + "'\nQuantidade mínima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString() + "' \n \nPelos Seguintes Valores:\n\n"
                                                + "Tipo: '" + CbTipoDeMedida.getSelectedItem() + "'\nQuantidade máxima: '" + quantMax + "'\nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                        if (r == 0) {
                                            //INICIANDO O MÉTODO
                                            try {
                                                IngredientesPizza ingPizza = new IngredientesPizza();
                                                IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                                dao.AlterarTipo_QuantMax_QuantMin(ingPizza, tblIngredientes, CbTipoDeMedida, quantMax, quantMin);
                                                JOptionPane.showMessageDialog(null, "Alterações efetuadas com sucesso", "Alterar dados", JOptionPane.OK_OPTION);
                                            } catch (Exception e) {
                                                JOptionPane.showMessageDialog(null, "Por favor, selecione alguma linha", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                                            }
                                        }
                                    }
                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum ingrediente", "Selecionar Ingrediente", JOptionPane.OK_OPTION);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                            txtQuantMin.setBackground(Color.pink);
                            txtQuantMin.setText("");
                            txtQuantMin.requestFocus();
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                    txtQuantMax.setBackground(Color.pink);
                    txtQuantMax.setText("");
                    txtQuantMax.requestFocus();
                }
            }

        } // TRES UPDATES(9)
        else if (ckAlterarQuantidade.isSelected() && ckQuantMax.isSelected() && ckQuantMin.isSelected()) {
            try {
                int quantidade = Integer.parseInt(txtQuantidade.getText());
                if (quantidade < 0) {
                    JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                    txtQuantidade.setBackground(Color.pink);
                    txtQuantidade.setText("");
                    txtQuantidade.requestFocus();
                } else {
                    txtQuantidade.setBackground(Color.white);
                    try {
                        int quantMax = Integer.parseInt(txtQuantMax.getText());
                        if (quantMax <= 0) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade máxima válida", "Quantidade  máxima inválida", JOptionPane.OK_OPTION);
                            txtQuantMax.setBackground(Color.pink);
                            txtQuantMax.setText("");
                            txtQuantMax.requestFocus();
                        } else {
                            txtQuantMax.setBackground(Color.white);
                            try {
                                int quantMin = Integer.parseInt(txtQuantMin.getText());
                                if (quantMin < 0) {
                                    JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade mínima válida", "Quantidade  mínima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMin.setBackground(Color.pink);
                                    txtQuantMin.setText("");
                                    txtQuantMin.requestFocus();
                                } else {
                                    txtQuantMin.setBackground(Color.white);
                                    if (quantMin > quantMax) {
                                        JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.setText("");
                                        txtQuantMin.requestFocus();
                                    } else if (quantMin > quantidade) {
                                        JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade atual", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMin.setBackground(Color.pink);
                                        txtQuantMin.setText("");
                                        txtQuantMin.requestFocus();
                                    } else if (quantMax < quantidade) {
                                        JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                        txtQuantMax.setBackground(Color.pink);
                                        txtQuantMax.setText("");
                                        txtQuantMax.requestFocus();
                                    } else {
                                        txtQuantMin.setBackground(Color.white);
                                        txtQuantMax.setBackground(Color.white);

                                        //CONFIRMAÇÃO ANTES DA INICIAÇÃO DO MÉTODO
                                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \n\nQuantidade: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString() + "'\nQuantidade Máxima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString() + "'\nQuantidade mínima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString() + "' \n\nPelos Seguintes Valores:\n\n"
                                                + "Quantidade: '" + quantidade + "' \nQuantidade máxima: '" + quantMax + "' \nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);

                                        if (r == 0) {
                                            //INICIAÇAO DO MÉTODO
                                            try {
                                                IngredientesPizza ingPizza = new IngredientesPizza();
                                                IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                                dao.AlterarQuantidade_QuantMax_QuantMin(ingPizza, tblIngredientes, quantidade, quantMax, quantMin);
                                                JOptionPane.showMessageDialog(null, "Alterações efetuadas com sucesso", "Alterar dados", JOptionPane.OK_OPTION);
                                            } catch (Exception e) {
                                                JOptionPane.showMessageDialog(null, "Por favor, selecione alguma linha", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                                            }
                                        }
                                    }

                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade mínima válida", "Quantidade  mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.setText("");
                                txtQuantMin.requestFocus();
                            }
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade máxima válida", "Quantidade  máxima inválida", JOptionPane.OK_OPTION);
                        txtQuantMax.setBackground(Color.pink);
                        txtQuantMax.setText("");
                        txtQuantMax.requestFocus();
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                txtQuantidade.setBackground(Color.pink);
                txtQuantidade.setText("");
                txtQuantidade.requestFocus();
            }
        } else if (ckAlterarNome.isSelected() && ckAlterarQuantidade.isSelected() && ckAlterarTipo.isSelected()) {
            if (txtNovoNomeIngrediente.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o novo nome do ingrediente", "Preencher nome", JOptionPane.OK_OPTION);
                txtNovoNomeIngrediente.setBackground(Color.pink);
                txtNovoNomeIngrediente.requestFocus();
            } else if (CbTipoDeMedida.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de medida", "Selecionar medida", JOptionPane.OK_OPTION);
            } else {
                txtNovoNomeIngrediente.setBackground(Color.white);
                try {
                    int q = Integer.parseInt(txtQuantidade.getText());
                    if (q < 0) {

                        JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                        txtQuantidade.setText("");
                        txtQuantidade.requestFocus();
                        txtQuantidade.setBackground(Color.pink);
                    } else {
                        txtQuantidade.setBackground(Color.white);
                        try {

                            int max, min;
                            max = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString());
                            min = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString());

                            int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos: \n Nome: ' " + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 1) + " ' \n Quantidade: ' " + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3) + " ' \n Tipo: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 2) + "' \n  \n Pelos seguintes valores: \n Nome: '"
                                    + txtNovoNomeIngrediente.getText() + " ' \n Quantidade : '" + txtQuantidade.getText() + " ' \n Tipo: '" + CbTipoDeMedida.getSelectedItem().toString() + " ' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);

                            if (q > max) {
                                JOptionPane.showMessageDialog(null, "A quantidade informada é maior que a quantidade máxima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                                txtQuantidade.setText("");
                            } else if (q < min) {
                                JOptionPane.showMessageDialog(null, "A quantidade informada é menor que a quantidade mínima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                                txtQuantidade.setText("");
                            } else if (r == 0) {
                                IngredientesPizza ingpizza = new IngredientesPizza();
                                IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                dao.AlterarNome_Quantidade_Tipo(ingpizza, tblIngredientes, txtNovoNomeIngrediente, txtQuantidade, CbTipoDeMedida);
                                JOptionPane.showMessageDialog(null, "Alterações realizadas com sucesso", "Alterar dados", JOptionPane.OK_OPTION);
                                ckAlterarQuantidade.setSelected(false);
                                ckAlterarNome.setSelected(false);
                                ckAlterarTipo.setSelected(false);
                                txtNomeIngrediente.setText("");
                                ckAlterarNomeActionPerformed(evt);
                                ckAlterarQuantidadeActionPerformed(evt);
                                ckAlterarTipoActionPerformed(evt);
                                model.setRowCount(0);
                                dao.PesquisarTudo(ingpizza, tblIngredientes);
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum ingrediente", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                    txtQuantidade.setText("");
                    txtQuantidade.requestFocus();
                    txtQuantidade.setBackground(Color.pink);
                }

            }
        } else if (ckAlterarNome.isSelected() && ckAlterarQuantidade.isSelected()) {
            if (txtNovoNomeIngrediente.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o novo nome do ingrediente", "Preencher nome", JOptionPane.OK_OPTION);
                txtNovoNomeIngrediente.setBackground(Color.pink);
            } else {
                txtNovoNomeIngrediente.setBackground(Color.white);
                try {
                    int q = Integer.parseInt(txtQuantidade.getText());
                    if (q < 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                        txtQuantidade.setText("");
                        txtQuantidade.requestFocus();
                        txtQuantidade.setBackground(Color.pink);
                    } else {
                        txtQuantidade.setBackground(Color.white);
                        try {
                            int max, min;
                            max = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString());
                            min = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString());

                            int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos \n Nome: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 1) + " ' \n Quantidade: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3) + " ' \n \n Pelos seguintes valores: \n Nome : ' "
                                    + txtNovoNomeIngrediente.getText() + " ' \n Quantidade: '" + txtQuantidade.getText() + " ' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);

                            if (q > max) {
                                JOptionPane.showMessageDialog(null, "A quantidade informada é maior que a quantidade máxima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                                txtQuantidade.setText("");
                            } else if (q < min) {
                                JOptionPane.showMessageDialog(null, "A quantidade informada é menor que a quantidade mínima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                                txtQuantidade.setText("");
                            } else if (r == 0) {
                                IngredientesPizza ingpizza = new IngredientesPizza();
                                IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                dao.AlterarNome_Quantidade(ingpizza, tblIngredientes, txtQuantidade, txtNovoNomeIngrediente);
                                JOptionPane.showMessageDialog(null, "Alterações realizadas com sucesso", "Alterar dados", JOptionPane.OK_OPTION);
                                ckAlterarNome.setSelected(false);
                                ckAlterarQuantidade.setSelected(false);
                                txtNomeIngrediente.setText("");
                                ckAlterarNomeActionPerformed(evt);
                                ckAlterarQuantidadeActionPerformed(evt);
                                model.setRowCount(0);
                                dao.PesquisarTudo(ingpizza, tblIngredientes);
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum ingrediente", "Selecionar ingrediente", JOptionPane.OK_OPTION);

                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                    txtQuantidade.setText("");
                    txtQuantidade.requestFocus();
                    txtQuantidade.setBackground(Color.pink);
                }

            }
        } else if (ckAlterarNome.isSelected() && ckAlterarTipo.isSelected()) {
            if (txtNovoNomeIngrediente.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o nome do ingrediente", "Preencher Nome", JOptionPane.OK_OPTION);
                txtNovoNomeIngrediente.setBackground(Color.pink);
            } else if (CbTipoDeMedida.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de medida", "Selecionar Medida", JOptionPane.OK_OPTION);
            } else {
                txtNovoNomeIngrediente.setBackground(Color.white);
                try {
                    int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos \n Nome: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 1) + " ' \n Tipo: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 2) + " ' \n \n Pelos Valores: \n Nome: '" + txtNovoNomeIngrediente.getText() + " ' \n Tipo: '" + CbTipoDeMedida.getSelectedItem() + " ' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);

                    if (r == 0) {
                        IngredientesPizza ingpizza = new IngredientesPizza();
                        IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                        dao.AlterarNome_TIPO(ingpizza, tblIngredientes, txtNovoNomeIngrediente, CbTipoDeMedida);
                        JOptionPane.showMessageDialog(null, "Alterações realizadas com sucesso", "Alterar dados", JOptionPane.OK_OPTION);
                        ckAlterarNome.setSelected(false);
                        ckAlterarTipo.setSelected(false);
                        ckAlterarNomeActionPerformed(evt);
                        ckAlterarTipoActionPerformed(evt);
                        txtNomeIngrediente.setText("");
                        model.setRowCount(0);
                        dao.PesquisarTudo(ingpizza, tblIngredientes);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, selecione algum ingrediente", "Selecionar Ingredientes", JOptionPane.OK_OPTION);
                }

            }
        } else if (ckAlterarQuantidade.isSelected() && ckAlterarTipo.isSelected()) {
            if (CbTipoDeMedida.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de medida", "Selecionar Tipo", JOptionPane.OK_OPTION);
            } else {
                try {
                    int q = Integer.parseInt(txtQuantidade.getText());
                    txtQuantidade.setBackground(Color.white);

                    if (q < 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                        txtQuantidade.setText("");
                        txtQuantidade.requestFocus();
                        txtQuantidade.setBackground(Color.pink);
                    } else {
                        try {
                            int max, min;
                            max = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString());
                            min = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString());

                            if (q > max) {
                                JOptionPane.showMessageDialog(null, "A quantidade informada é maior que a quantidade máxima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                                txtQuantidade.setText("");
                            } else if (q < min) {
                                JOptionPane.showMessageDialog(null, "A quantidade informada é menor que a quantidade mínima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                                txtQuantidade.setText("");
                            } else {
                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os campos \n Quantidade: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3) + " ' \n Tipo: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 2) + " ' \n \n Pelos Seguintes valores: \n Quantidade: '" + txtQuantidade.getText() + " ' \n Tipo: '" + CbTipoDeMedida.getSelectedItem() + " ' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);

                                if (r == 0) {
                                    IngredientesPizza ingpizza = new IngredientesPizza();
                                    IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                    dao.AlterarQuantidade_TIPO(ingpizza, tblIngredientes, txtQuantidade, CbTipoDeMedida);
                                    JOptionPane.showMessageDialog(null, "Alterações realizadas com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                    ckAlterarQuantidade.setSelected(false);
                                    ckAlterarTipo.setSelected(false);
                                    ckAlterarQuantidadeActionPerformed(evt);
                                    ckAlterarTipoActionPerformed(evt);
                                    txtNomeIngrediente.setText("");
                                    model.setRowCount(0);
                                    dao.PesquisarTudo(ingpizza, tblIngredientes);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum ingrediente", "Selecionar Ingrediente", JOptionPane.OK_OPTION);
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                    txtQuantidade.setText("");
                    txtQuantidade.requestFocus();
                    txtQuantidade.setBackground(Color.pink);
                }

            }
        } else if (ckAlterarNome.isSelected() && ckQuantMax.isSelected()) {
            if (txtNovoNomeIngrediente.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Digite o novo nome do ingrediente", "Preencher Nome", JOptionPane.OK_OPTION);
                txtNovoNomeIngrediente.setBackground(Color.pink);
                txtNovoNomeIngrediente.requestFocus();
            } else {
                txtNovoNomeIngrediente.setBackground(Color.white);
                try {
                    int quantMax = Integer.parseInt(txtQuantMax.getText());
                    if (quantMax <= 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                        txtQuantMax.setBackground(Color.pink);
                        txtQuantMax.setText("");
                        txtQuantMax.requestFocus();
                    } else {
                        txtQuantMax.setBackground(Color.white);
                        try {
                            int quantMin, quantidade;
                            quantidade = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString());
                            quantMin = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString());

                            if (quantMax < quantMin) {
                                JOptionPane.showMessageDialog(null, "A quantidade máxima não pode menor que a quantidade mínima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.setText("");
                                txtQuantMax.requestFocus();
                            } else if (quantMax < quantidade) {
                                JOptionPane.showMessageDialog(null, "A quantidade máxima não pode menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.setText("");
                                txtQuantMax.requestFocus();
                            } else {
                                txtQuantMax.setBackground(Color.white);

                                //Confirmação antes de iniciar o metodo
                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os seguintes dados: \n\nNome: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 1).toString() + "'\nQuantidade máxima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString() + "' \n \nPelos seguintes valores: \n\nNome: '"
                                        + txtNovoNomeIngrediente.getText() + "'\nQuantidade máxima: '" + quantMax + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                if (r == 0) {
                                    //INICIANDO O MÉTODO
                                    IngredientesPizza ingpizza = new IngredientesPizza();
                                    IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                    dao.AlterarNome_QuantMax(ingpizza, tblIngredientes, txtNovoNomeIngrediente, quantMax);
                                    JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum ingrediente", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                    txtQuantMax.setBackground(Color.pink);
                    txtQuantMax.setText("");
                    txtQuantMax.requestFocus();
                }
            }
        } else if (ckAlterarNome.isSelected() && ckQuantMin.isSelected()) {
            if (txtNovoNomeIngrediente.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Por favor, preeencha o novo nome do ingrediente", "Preencher Nome", JOptionPane.OK_OPTION);
                txtNovoNomeIngrediente.setBackground(Color.pink);
                txtNovoNomeIngrediente.requestFocus();
            } else {
                txtNovoNomeIngrediente.setBackground(Color.white);
                try {
                    int quantMin = Integer.parseInt(txtQuantMin.getText());
                    if (quantMin < 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                        txtQuantMin.setBackground(Color.pink);
                        txtQuantMin.setText("");
                        txtQuantMin.requestFocus();
                    } else {
                        txtQuantMin.setBackground(Color.white);
                        try {
                            int quantidade, quantMax;
                            quantidade = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString());
                            quantMax = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString());
                            if (quantMin > quantMax) {
                                JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.setText("");
                                txtQuantMin.requestFocus();
                            } else if (quantMin > quantidade) {
                                JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade atual", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.setText("");
                                txtQuantMin.requestFocus();
                            } else {
                                txtQuantMin.setBackground(Color.white);

                                //Confirmação antes de iniciar o metodo
                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os seguintes dados: \n\nNome: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 1).toString() + "'\nQuantidade mínima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString() + "' \n \nPelos seguintes valores: \n\nNome: '"
                                        + txtNovoNomeIngrediente.getText() + "'\nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);
                                if (r == 0) {
                                    //INICIANDO O MÉTODO
                                    IngredientesPizza ingpizza = new IngredientesPizza();
                                    IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                    dao.AlterarNome_QuantMin(ingpizza, tblIngredientes, txtNovoNomeIngrediente, quantMin);
                                    JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                }
                            }

                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum ingrediente", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                        }

                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                    txtQuantMin.setBackground(Color.pink);
                    txtQuantMin.setText("");
                    txtQuantMin.requestFocus();
                }
            }
        } else if (ckAlterarTipo.isSelected() && ckQuantMax.isSelected()) {
            if (CbTipoDeMedida.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de medida", "Selecionar tipo", JOptionPane.OK_OPTION);
            } else {
                try {
                    int quantMax = Integer.parseInt(txtQuantMax.getText());
                    if (quantMax <= 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                        txtQuantMax.setBackground(Color.pink);
                        txtQuantMax.setText("");
                        txtQuantMax.requestFocus();
                    } else {
                        txtQuantMax.setBackground(Color.white);
                        try {
                            int quantMin, quantidade;
                            quantidade = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString());
                            quantMin = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString());

                            if (quantMax < quantMin) {
                                JOptionPane.showMessageDialog(null, "A quantidade máxima não pode menor que a quantidade mínima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.setText("");
                                txtQuantMax.requestFocus();
                            } else if (quantMax < quantidade) {
                                JOptionPane.showMessageDialog(null, "A quantidade máxima não pode menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.setText("");
                                txtQuantMax.requestFocus();
                            } else {
                                txtQuantMax.setBackground(Color.white);
                                //Confirmação antes de inciiar o método
                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os seguintes campos: \n\nTipo: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 2).toString() + "'\nQuantidade máxima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString() + "'\n\nPelos Seguintes Valores: \n\n"
                                        + "Tipo: '" + CbTipoDeMedida.getSelectedItem() + "'\nQuantidade máxima: '" + quantMax + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);

                                if (r == 0) {
                                    //INICIANDO O MÉTODO
                                    IngredientesPizza ingPizza = new IngredientesPizza();
                                    IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                    dao.AlterarTipo_QuantMax(ingPizza, tblIngredientes, CbTipoDeMedida, quantMax);
                                    JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, selecionar algum ingrediente", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                    txtQuantMax.setBackground(Color.pink);
                    txtQuantMax.setText("");
                    txtQuantMax.requestFocus();
                }
            }
        } else if (ckAlterarTipo.isSelected() && ckQuantMin.isSelected()) {
            if (CbTipoDeMedida.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Por favor, selecione algum tipo de medida", "Selecionar tipo", JOptionPane.OK_OPTION);
            } else {
                try {
                    int quantMin = Integer.parseInt(txtQuantMin.getText());
                    if (quantMin < 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                        txtQuantMin.setBackground(Color.pink);
                        txtQuantMin.setText("");
                        txtQuantMin.requestFocus();
                    } else {
                        txtQuantMin.setBackground(Color.white);

                        try {
                            int quantidade, quantMax;
                            quantidade = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString());
                            quantMax = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString());
                            if (quantMin > quantMax) {
                                JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.setText("");
                                txtQuantMin.requestFocus();
                            } else if (quantMin > quantidade) {
                                JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade atual", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.setText("");
                                txtQuantMin.requestFocus();
                            } else {
                                txtQuantMin.setBackground(Color.white);
                                //Confirmação antes de inciiar o método
                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os seguintes campos: \n\nTipo: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 2).toString() + "'\nQuantidade mínima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString() + "'\n\nPelos Seguintes Valores: \n\n"
                                        + "Tipo: '" + CbTipoDeMedida.getSelectedItem() + "'\nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);

                                if (r == 0) {
                                    //INICIANDO O MÉTODO
                                    IngredientesPizza ingPizza = new IngredientesPizza();
                                    IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                    dao.AlterarTipo_QuantMin(ingPizza, tblIngredientes, CbTipoDeMedida, quantMin);
                                    JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum ingrediente", "Selecionar Ingrediente", JOptionPane.OK_OPTION);
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                    txtQuantMin.setBackground(Color.pink);
                    txtQuantMin.setText("");
                    txtQuantMin.requestFocus();
                }
            }
        } else if (ckAlterarQuantidade.isSelected() && ckQuantMax.isSelected()) {
            try {
                int quantidade = Integer.parseInt(txtQuantidade.getText());
                if (quantidade < 0) {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                    txtQuantidade.setText("");
                    txtQuantidade.requestFocus();
                    txtQuantidade.setBackground(Color.pink);
                } else {
                    txtQuantidade.setBackground(Color.white);
                    try {
                        int quantMax = Integer.parseInt(txtQuantMax.getText());
                        if (quantMax <= 0) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                            txtQuantMax.setBackground(Color.pink);
                            txtQuantMax.setText("");
                            txtQuantMax.requestFocus();
                        } else {
                            txtQuantMax.setBackground(Color.white);
                            try {
                                int quantMin = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString());
                                if (quantMax < quantMin) {
                                    JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade mínima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMax.setBackground(Color.pink);
                                    txtQuantMax.setText("");
                                    txtQuantMax.requestFocus();
                                } else if (quantidade < quantMin) {
                                    JOptionPane.showMessageDialog(null, "A quantidade atual não pode ser menor que a quantidade mínima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                    txtQuantidade.setBackground(Color.pink);
                                    txtQuantidade.setText("");
                                    txtQuantidade.requestFocus();
                                } else if (quantidade > quantMax) {
                                    JOptionPane.showMessageDialog(null, "A quantidade atual não pode ser maior que a quantidade máxima", "Quantidade atual inválida", JOptionPane.OK_OPTION);
                                    txtQuantidade.setBackground(Color.pink);
                                    txtQuantidade.setText("");
                                    txtQuantidade.requestFocus();

                                } else {
                                    txtQuantidade.setBackground(Color.white);
                                    txtQuantMax.setBackground(Color.white);
                                    //Confirmação antes de inciiar o método
                                    int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os seguintes campos: \n\nQuantidade: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString() + "'\nQuantidade máxima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString() + "'\n\nPelos Seguintes Valores: \n\n"
                                            + "Quantidade: '" + quantidade + "'\nQuantidade máxima: '" + quantMax + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);

                                    if (r == 0) {
                                        //INICIANDO O MÉTODO
                                        IngredientesPizza ingPizza = new IngredientesPizza();
                                        IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                        dao.AlterarQuantidade_QuantMax(ingPizza, tblIngredientes, quantidade, quantMax);
                                        JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                    }

                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum ingrediente", "Selecionar Ingrediente", JOptionPane.OK_OPTION);
                            }
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                        txtQuantMax.setBackground(Color.pink);
                        txtQuantMax.setText("");
                        txtQuantMax.requestFocus();
                    }

                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                txtQuantidade.setText("");
                txtQuantidade.requestFocus();
                txtQuantidade.setBackground(Color.pink);
            }
        } else if (ckAlterarQuantidade.isSelected() && ckQuantMin.isSelected()) {
            try {
                int quantidade = Integer.parseInt(txtQuantidade.getText());
                if (quantidade < 0) {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                    txtQuantidade.setText("");
                    txtQuantidade.requestFocus();
                    txtQuantidade.setBackground(Color.pink);
                } else {
                    txtQuantidade.setBackground(Color.white);
                    try {
                        int quantMin = Integer.parseInt(txtQuantMin.getText());
                        if (quantMin < 0) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                            txtQuantMin.setBackground(Color.pink);
                            txtQuantMin.setText("");
                            txtQuantMin.requestFocus();
                        } else {
                            txtQuantMin.setBackground(Color.white);
                            try {
                                int quantMax = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString());
                                if (quantMin > quantMax) {
                                    JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMin.setBackground(Color.pink);
                                    txtQuantMin.setText("");
                                    txtQuantMin.requestFocus();
                                } else if (quantMin > quantidade) {
                                    JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade atual", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMin.setBackground(Color.pink);
                                    txtQuantMin.setText("");
                                    txtQuantMin.requestFocus();
                                } else if (quantidade > quantMax) {
                                    JOptionPane.showMessageDialog(null, "A quantidade atual não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                    txtQuantidade.setBackground(Color.pink);
                                    txtQuantidade.setText("");
                                    txtQuantidade.requestFocus();
                                } else {
                                    txtQuantidade.setBackground(Color.white);
                                    txtQuantMin.setBackground(Color.white);

                                    //Confirmação antes do método
                                    int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os seguintes campos: \n\nQuantidade: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString() + "'\nQuantidade mínima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString() + "'\n\nPelos Seguintes Valores: \n\n"
                                            + "Quantidade: '" + quantidade + "'\nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);

                                    if (r == 0) {
                                        //INICIANDO O MÉTODO
                                        IngredientesPizza ingPizza = new IngredientesPizza();
                                        IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                        dao.AlterarQuantidade_QuantMin(ingPizza, tblIngredientes, quantidade, quantMin);
                                        JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                    }
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum ingrediente", "Selecionar ingrediente", JOptionPane.OK_OPTION);

                            }
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                        txtQuantMin.setBackground(Color.pink);
                        txtQuantMin.setText("");
                        txtQuantMin.requestFocus();
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                txtQuantidade.setText("");
                txtQuantidade.requestFocus();
                txtQuantidade.setBackground(Color.pink);
            }
        } else if (ckQuantMax.isSelected() && ckQuantMin.isSelected()) {
            try {
                int quantMax = Integer.parseInt(txtQuantMax.getText());
                if (quantMax <= 0) {
                    JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                    txtQuantMax.setBackground(Color.pink);
                    txtQuantMax.setText("");
                    txtQuantMax.requestFocus();
                } else {
                    txtQuantMax.setBackground(Color.white);
                    try {
                        int quantMin = Integer.parseInt(txtQuantMin.getText());
                        if (quantMin < 0) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                            txtQuantMin.setBackground(Color.pink);
                            txtQuantMin.setText("");
                            txtQuantMin.requestFocus();
                        } else {
                            txtQuantMin.setBackground(Color.white);
                            try {
                                int quantidade = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString());
                                if (quantMin > quantidade) {
                                    JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade atual", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMin.setBackground(Color.white);
                                    txtQuantMin.setText("");
                                    txtQuantMin.requestFocus();
                                } else if (quantMin > quantMax) {
                                    JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMin.setBackground(Color.white);
                                    txtQuantMin.setText("");
                                    txtQuantMin.requestFocus();
                                } else if (quantMax < quantidade) {
                                    JOptionPane.showMessageDialog(null, "A quantidade máxima não pode ser menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                    txtQuantMax.setBackground(Color.pink);
                                    txtQuantMax.setText("");
                                    txtQuantMax.requestFocus();
                                } else {
                                    txtQuantMax.setBackground(Color.white);
                                    txtQuantMin.setBackground(Color.white);
                                    //Confirmação antes do método
                                    int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar os seguintes campos: \n\nQuantidade: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString() + "'\nQuantidade mínima: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString() + "'\n\nPelos Seguintes Valores: \n\n"
                                            + "Quantidade: '" + quantidade + "'\nQuantidade mínima: '" + quantMin + "' ?", "Alterar Dados", JOptionPane.YES_NO_OPTION);

                                    if (r == 0) {
                                        //INICIANDO O MÉTODO
                                        IngredientesPizza ingPizza = new IngredientesPizza();
                                        IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                        dao.AlterarQuantMax_QuantMin(ingPizza, tblIngredientes, quantMax, quantMin);
                                        JOptionPane.showMessageDialog(null, "Dados alterados com sucesso", "Alterar Dados", JOptionPane.OK_OPTION);
                                    }

                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Por favor, selecione algum ingrediente", "Selecionar Ingrediente", JOptionPane.OK_OPTION);
                            }
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                        txtQuantMin.setBackground(Color.pink);
                        txtQuantMin.setText("");
                        txtQuantMin.requestFocus();
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                txtQuantMax.setBackground(Color.pink);
                txtQuantMax.setText("");
                txtQuantMax.requestFocus();
            }
        } //PAREI AQUI(2)
        else {

            if (CkDeletarIngrediente.isSelected()) {
                try {
                    int r = JOptionPane.showConfirmDialog(null, "Deseja realmente deletar o Ingrediente:\n '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 1) + "'?", "Deletar Ingrediente", JOptionPane.YES_NO_OPTION);
                    if (r == 0) {

                        IngredientesPizza ingpizza = new IngredientesPizza();
                        IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                        dao.DeltarIngredientes(ingpizza, tblIngredientes);
                        JOptionPane.showMessageDialog(null, "Ingrediente Deletado com sucesso", "Deletado com sucesso", JOptionPane.OK_OPTION);
                        CkDeletarIngrediente.setSelected(false);
                        CkDeletarIngredienteActionPerformed(evt);
                        txtNomeIngrediente.setText("");
                        model.setRowCount(0);
                        dao.PesquisarTudo(ingpizza, tblIngredientes);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor selecione algum ingrediente");
                }
            }
            if (ckAlterarNome.isSelected()) {
                if (!txtNovoNomeIngrediente.getText().equals("")) {
                    txtNovoNomeIngrediente.setBackground(Color.white);
                    try {
                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente trocar o nome do ingrediente:'" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 1) + "' \n por: '" + txtNovoNomeIngrediente.getText() + "' ?", "Alterar Ingrediente", JOptionPane.YES_NO_OPTION);
                        if (r == 0) {
                            IngredientesPizza ingPizza = new IngredientesPizza();
                            IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                            dao.AlterarNomeIngrediente(ingPizza, tblIngredientes, txtNovoNomeIngrediente);
                            JOptionPane.showMessageDialog(null, "Ingrediente alterado com sucesso", "Alterar ingrediente", JOptionPane.OK_OPTION);
                            ckAlterarNome.setSelected(false);
                            txtNomeIngrediente.setText("");
                            ckAlterarNomeActionPerformed(evt);
                            model.setRowCount(0);
                            dao.PesquisarTudo(ingPizza, tblIngredientes);
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor selecione algum ingrediente");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, digite o novo nome do ingrediente");
                    txtNovoNomeIngrediente.requestFocus();
                    txtNovoNomeIngrediente.setBackground(Color.pink);
                }
            }
            if (ckAlterarTipo.isSelected()) {
                if (CbTipoDeMedida.getSelectedIndex() == 0) {
                    JOptionPane.showMessageDialog(null, "Por favor selecione algum tipo de medida");
                } else {
                    try {
                        int r = JOptionPane.showConfirmDialog(null, "Deseja realmente trocar o tipo:' " + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 2) + " ' \n por: '" + CbTipoDeMedida.getSelectedItem().toString() + "' do ingrediente: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 1) + " ' ?", "Alterar Tipo", JOptionPane.YES_NO_OPTION);
                        if (r == 0) {
                            IngredientesPizza ingPizza = new IngredientesPizza();
                            IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                            dao.AlterarTipoDeUnidade(ingPizza, tblIngredientes, CbTipoDeMedida);
                            JOptionPane.showMessageDialog(null, "Tipo alterado com sucesso", "Alterar Tipo", JOptionPane.OK_OPTION);
                            ckAlterarTipo.setSelected(false);
                            ckAlterarTipoActionPerformed(evt);
                            txtNomeIngrediente.setText("");
                            model.setRowCount(0);
                            dao.PesquisarTudo(ingPizza, tblIngredientes);

                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, "Por favor selecione algum ingrediente");
                    }
                }
            }
            if (ckAlterarQuantidade.isSelected()) {

                try {
                    int q = Integer.parseInt(txtQuantidade.getText());
                    txtQuantidade.setBackground(Color.white);
                    if (q < 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                        txtQuantidade.setText("");
                        txtQuantidade.requestFocus();
                        txtQuantidade.setBackground(Color.pink);
                    } else {
                        try {

                            int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar de: ' " + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3) + " ', para ' " + txtQuantidade.getText() + " ' " + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 2) + " \n do ingrediente: ' " + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 1) + " ' ?", "Corrigir quantidade de ingrediente", JOptionPane.YES_NO_OPTION);
                            int max, min;
                            max = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString());
                            min = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString());

                            if (r == 0) {
                                if (q > max) {
                                    JOptionPane.showMessageDialog(null, "A quantidade informada é maior que a quantidade máxima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                    txtQuantidade.setBackground(Color.pink);
                                    txtQuantidade.requestFocus();
                                } else if (q < min) {
                                    JOptionPane.showMessageDialog(null, "A quantidade informada é menor que a quantidade mínima", "Quantidade inválida", JOptionPane.OK_OPTION);
                                    txtQuantidade.setBackground(Color.pink);
                                    txtQuantidade.requestFocus();
                                } else {
                                    IngredientesPizza ingPizza = new IngredientesPizza();
                                    IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                    dao.CorrigirEstoqueIngrediente(ingPizza, tblIngredientes, txtQuantidade);
                                    JOptionPane.showMessageDialog(null, "Dados corrigidos com sucesso", "Corrigir dados", JOptionPane.OK_OPTION);
                                    ckAlterarQuantidade.setSelected(false);
                                    ckAlterarQuantidadeActionPerformed(evt);
                                    txtNomeIngrediente.setText("");
                                    model.setRowCount(0);
                                    dao.PesquisarTudo(ingPizza, tblIngredientes);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum ingrediente", "Selecione algum ingrediente", JOptionPane.OK_OPTION);
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, preencha o campo quantidade corretamente", "Preencher quantidade", JOptionPane.OK_OPTION);
                    txtQuantidade.setText("");
                    txtQuantidade.requestFocus();
                    txtQuantidade.setBackground(Color.pink);
                }

            }
            if (ckQuantMax.isSelected()) {
                try {
                    int quantMax = Integer.parseInt(txtQuantMax.getText());
                    if (quantMax <= 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                        txtQuantMax.setBackground(Color.pink);
                        txtQuantMax.setText("");
                        txtQuantMax.requestFocus();
                    } else {
                        try {
                            int quantMin, quantidade;
                            quantidade = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString());
                            quantMin = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString());

                            if (quantMax < quantMin) {
                                JOptionPane.showMessageDialog(null, "A quantidade máxima não pode menor que a quantidade mínima", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.setText("");
                                txtQuantMax.requestFocus();
                            } else if (quantMax < quantidade) {
                                JOptionPane.showMessageDialog(null, "A quantidade máxima não pode menor que a quantidade atual", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                                txtQuantMax.setBackground(Color.pink);
                                txtQuantMax.setText("");
                                txtQuantMax.requestFocus();
                            } else {
                                txtQuantMax.setBackground(Color.white);
                                //Confirmação do método
                                int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar a quantidade máxima de: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString() + "' do ingrediente: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 1).toString() + "'\nPor: '" + quantMax + "'?", "Alterar quantidade máxima", JOptionPane.YES_NO_OPTION);
                                if (r == 0) {
                                    //INICIANDO O MÉTODO
                                    IngredientesPizza ingPizza = new IngredientesPizza();
                                    IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                    dao.AlterarQuantMax(ingPizza, tblIngredientes, quantMax);
                                    JOptionPane.showMessageDialog(null, "Quantidade máxima alterada com sucesso", "Alterar quantidade máxima", JOptionPane.OK_OPTION);
                                }
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, selecione algum ingrediente", "Selecionar ingrediente", JOptionPane.OK_OPTION);
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade máxima válida", "Quantidade máxima inválida", JOptionPane.OK_OPTION);
                    txtQuantMax.setBackground(Color.pink);
                    txtQuantMax.setText("");
                    txtQuantMax.requestFocus();
                }
            }

            if (ckQuantMin.isSelected()) {
                try {
                    int quantMin = Integer.parseInt(txtQuantMin.getText());
                    if (quantMin < 0) {
                        JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                        txtQuantMin.setBackground(Color.pink);
                        txtQuantMin.setText("");
                        txtQuantMin.requestFocus();
                    } else {
                        txtQuantMin.setBackground(Color.white);
                        try {
                            int quantidade, quantMax;
                            quantidade = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 3).toString());
                            quantMax = Integer.parseInt(tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 4).toString());
                            if (quantMin > quantMax) {
                                JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade máxima", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.setText("");
                                txtQuantMin.requestFocus();
                            } else if (quantMin > quantidade) {
                                JOptionPane.showMessageDialog(null, "A quantidade mínima não pode ser maior que a quantidade atual", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                                txtQuantMin.setBackground(Color.pink);
                                txtQuantMin.setText("");
                                txtQuantMin.requestFocus();
                            } else {
                                txtQuantMin.setBackground(Color.white);
                            //Confirmação do método
                            int r = JOptionPane.showConfirmDialog(null, "Deseja realmente alterar a quantidade mínima de: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 5).toString() + "' do ingrediente: '" + tblIngredientes.getValueAt(tblIngredientes.getSelectedRow(), 1).toString() + "'\nPor: '" + quantMin + "'?", "Alterar quantidade mínima", JOptionPane.YES_NO_OPTION);
                                if (r == 0) {
                                    //INICIANDO O MÉTODO
                                    IngredientesPizza ingPizza = new IngredientesPizza();
                                    IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
                                    dao.AlterarQuantMin(ingPizza, tblIngredientes, quantMin);
                                    JOptionPane.showMessageDialog(null, "Quantidade mínima alterada com sucesso", "Alterar quantidade mínima", JOptionPane.OK_OPTION);
                                }
                            
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null,"Por favor, selecione algum ingrediente","Selecionar Ingrediente",JOptionPane.OK_OPTION);
                        }
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade mínima válida", "Quantidade mínima inválida", JOptionPane.OK_OPTION);
                    txtQuantMin.setBackground(Color.pink);
                    txtQuantMin.setText("");
                    txtQuantMin.requestFocus();
                }
            }
        }

    }//GEN-LAST:event_BtnConfirmarActionPerformed

    private void CkDeletarIngredienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CkDeletarIngredienteActionPerformed
        if (CkDeletarIngrediente.isSelected()) {
            ckAlterarNome.setSelected(false);
            ckAlterarNome.setEnabled(false);
            ckAlterarQuantidade.setSelected(false);
            ckAlterarQuantidade.setEnabled(false);
            ckAlterarTipo.setSelected(false);
            ckAlterarTipo.setEnabled(false);
            ckQuantMin.setSelected(false);
            ckQuantMin.setEnabled(false);
            ckQuantMax.setSelected(false);
            ckQuantMax.setEnabled(false);
            BtnConfirmar.setEnabled(true);
        } else if (!CkDeletarIngrediente.isSelected()) {
            ckAlterarNome.setEnabled(true);
            ckAlterarQuantidade.setEnabled(true);
            ckAlterarTipo.setEnabled(true);
            ckQuantMin.setEnabled(true);
            ckQuantMax.setEnabled(true);
            BtnConfirmar.setEnabled(false);
        }
    }//GEN-LAST:event_CkDeletarIngredienteActionPerformed

    private void ckAlterarNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckAlterarNomeActionPerformed
        if (ckAlterarNome.isSelected()) {
            CkDeletarIngrediente.setEnabled(false);
            BtnConfirmar.setEnabled(true);
            txtNovoNomeIngrediente.setEditable(true);
            txtNovoNomeIngrediente.setBackground(Color.white);

        } else if (!ckAlterarNome.isSelected()) {
            txtNovoNomeIngrediente.setEditable(false);
            txtNovoNomeIngrediente.setBackground(Color.lightGray);
            txtNovoNomeIngrediente.setText("");
            if (!ckAlterarNome.isSelected() && !ckAlterarQuantidade.isSelected() && !ckAlterarTipo.isSelected() && !ckQuantMax.isSelected() && !ckQuantMin.isSelected()) {
                BtnConfirmar.setEnabled(false);
                CkDeletarIngrediente.setEnabled(true);
            }
        }

    }//GEN-LAST:event_ckAlterarNomeActionPerformed

    private void ckAlterarTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckAlterarTipoActionPerformed
        if (ckAlterarTipo.isSelected()) {
            CkDeletarIngrediente.setEnabled(false);
            BtnConfirmar.setEnabled(true);
            CbTipoDeMedida.setEnabled(true);
        } else if (!ckAlterarTipo.isSelected()) {
            CbTipoDeMedida.setEnabled(false);
            CbTipoDeMedida.setSelectedIndex(0);
           if (!ckAlterarNome.isSelected() && !ckAlterarQuantidade.isSelected() && !ckAlterarTipo.isSelected() && !ckQuantMax.isSelected() && !ckQuantMin.isSelected()) {
                BtnConfirmar.setEnabled(false);
                CkDeletarIngrediente.setEnabled(true);
            }
        }
    }//GEN-LAST:event_ckAlterarTipoActionPerformed

    private void ckAlterarQuantidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckAlterarQuantidadeActionPerformed
        if (ckAlterarQuantidade.isSelected()) {
            txtQuantidade.setEditable(true);
            txtQuantidade.setBackground(Color.white);
            BtnConfirmar.setEnabled(true);
            CkDeletarIngrediente.setEnabled(false);
        } else if (!ckAlterarQuantidade.isSelected()) {
            txtQuantidade.setEditable(false);
            txtQuantidade.setBackground(Color.lightGray);
            txtQuantidade.setText("");
            if (!ckAlterarNome.isSelected() && !ckAlterarQuantidade.isSelected() && !ckAlterarTipo.isSelected() && !ckQuantMax.isSelected() && !ckQuantMin.isSelected()) {
                BtnConfirmar.setEnabled(false);
                CkDeletarIngrediente.setEnabled(true);
            }
        }
    }//GEN-LAST:event_ckAlterarQuantidadeActionPerformed

    private void txtNomeIngredienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNomeIngredienteKeyReleased
        DefaultTableModel model = (DefaultTableModel) tblIngredientes.getModel();
        model.setRowCount(0);
        IngredientesPizza ingPizza = new IngredientesPizza();
        IngredientesPizzaDAO dao = new IngredientesPizzaDAO();
        dao.PesquisarPorNome(ingPizza, tblIngredientes, txtNomeIngrediente);
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeIngredienteKeyReleased

    private void ckQuantMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckQuantMaxActionPerformed
        if (ckQuantMax.isSelected()) {
            txtQuantMax.setEditable(true);
            txtQuantMax.setBackground(Color.white);
            CkDeletarIngrediente.setEnabled(false);
            BtnConfirmar.setEnabled(true);
        } else if (!ckQuantMax.isSelected()) {
            txtQuantMax.setEditable(false);
            txtQuantMax.setBackground(Color.lightGray);
            txtQuantMax.setText("");
            if (!ckAlterarNome.isSelected() && !ckAlterarQuantidade.isSelected() && !ckAlterarTipo.isSelected() && !ckQuantMax.isSelected() && !ckQuantMin.isSelected()) {
                BtnConfirmar.setEnabled(false);
                CkDeletarIngrediente.setEnabled(true);
            }

        }

    }//GEN-LAST:event_ckQuantMaxActionPerformed

    private void ckQuantMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckQuantMinActionPerformed
        if (ckQuantMin.isSelected()) {
            txtQuantMin.setEditable(true);
            txtQuantMin.setBackground(Color.white);
            CkDeletarIngrediente.setEnabled(false);
            BtnConfirmar.setEnabled(true);
        } else if (!ckQuantMin.isSelected()) {
            txtQuantMin.setEditable(false);
            txtQuantMin.setBackground(Color.lightGray);
            txtQuantMin.setText("");
            if (!ckAlterarNome.isSelected() && !ckAlterarQuantidade.isSelected() && !ckAlterarTipo.isSelected() && !ckQuantMax.isSelected() && !ckQuantMin.isSelected()) {
                BtnConfirmar.setEnabled(false);
                CkDeletarIngrediente.setEnabled(true);
            }

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_ckQuantMinActionPerformed

    private void jLabel7AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jLabel7AncestorAdded
        ImageIcon icon = new ImageIcon("src/ProjetoImagem/mil.png");
    jLabel7.setIcon(new ImageIcon(icon.getImage().getScaledInstance(jLabel7.getWidth(),jLabel7.getHeight(), icon.getIconWidth()))); // TODO add your handling code here:
    }//GEN-LAST:event_jLabel7AncestorAdded


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnConfirmar;
    private javax.swing.JComboBox<String> CbTipoDeMedida;
    private javax.swing.JCheckBox CkDeletarIngrediente;
    private javax.swing.ButtonGroup GrupoDeBotao1;
    private javax.swing.JCheckBox ckAlterarNome;
    private javax.swing.JCheckBox ckAlterarQuantidade;
    private javax.swing.JCheckBox ckAlterarTipo;
    private javax.swing.JCheckBox ckQuantMax;
    private javax.swing.JCheckBox ckQuantMin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblNomeIngrediente;
    private javax.swing.JTable tblIngredientes;
    private javax.swing.JTextField txtNomeIngrediente;
    private javax.swing.JTextField txtNovoNomeIngrediente;
    private javax.swing.JTextField txtQuantMax;
    private javax.swing.JTextField txtQuantMin;
    private javax.swing.JTextField txtQuantidade;
    // End of variables declaration//GEN-END:variables
}
