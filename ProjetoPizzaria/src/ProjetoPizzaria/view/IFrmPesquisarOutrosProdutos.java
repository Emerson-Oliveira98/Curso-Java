/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ProjetoPizzaria.view;

import ProjetoPizzaria.DAO.OutrosProdutosDAO;
import ProjetoPizzaria.modelo.OutrosProdutos;
import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Casa
 */
public class IFrmPesquisarOutrosProdutos extends javax.swing.JInternalFrame {

    /**
     * Creates new form IFrmPesquisarOutrosProdutos
     */
    public IFrmPesquisarOutrosProdutos() {
        initComponents();
         getContentPane().setBackground(Color.white);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoDeBotao1 = new javax.swing.ButtonGroup();
        grupoDeBotao2 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProdutos = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        cbPesquisa = new javax.swing.JComboBox<>();
        btnConfirmar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        ckNome = new javax.swing.JCheckBox();
        ckPreco = new javax.swing.JCheckBox();
        ckQuantidade = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        txtPreco = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        rbMaiorP = new javax.swing.JRadioButton();
        rbMenorP = new javax.swing.JRadioButton();
        rbIgualP = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        rbMaiorQ = new javax.swing.JRadioButton();
        rbMenorQ = new javax.swing.JRadioButton();
        rbIgualQ = new javax.swing.JRadioButton();
        txtQuantidade = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("Pesquisar Outros Produtos");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        tblProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome do Produto", "Preço", "Quantidade", "Quantidade Máxima", "Quantidade Mínima"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblProdutos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblProdutos);
        if (tblProdutos.getColumnModel().getColumnCount() > 0) {
            tblProdutos.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblProdutos.getColumnModel().getColumn(0).setMaxWidth(50);
        }

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Deseja realizar sua pesquisa por:");

        cbPesquisa.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cbPesquisa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Sem critérios", "ID", "Pesquisar Por..." }));
        cbPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPesquisaActionPerformed(evt);
            }
        });

        btnConfirmar.setBackground(new java.awt.Color(255, 51, 51));
        btnConfirmar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnConfirmar.setForeground(new java.awt.Color(255, 255, 255));
        btnConfirmar.setText("Confirmar");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("ID:");

        ckNome.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ckNome.setText("Nome do Produto");
        ckNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckNomeActionPerformed(evt);
            }
        });

        ckPreco.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ckPreco.setText("Preço");
        ckPreco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckPrecoActionPerformed(evt);
            }
        });

        ckQuantidade.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ckQuantidade.setText("Quantidade em estoque");
        ckQuantidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckQuantidadeActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Nome do produto:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Preço:");

        grupoDeBotao1.add(rbMaiorP);
        rbMaiorP.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rbMaiorP.setText("Maior que");

        grupoDeBotao1.add(rbMenorP);
        rbMenorP.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rbMenorP.setText("Menor que");

        grupoDeBotao1.add(rbIgualP);
        rbIgualP.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rbIgualP.setSelected(true);
        rbIgualP.setText("Igual a");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Quantidade:");

        grupoDeBotao2.add(rbMaiorQ);
        rbMaiorQ.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rbMaiorQ.setText("Maior que");

        grupoDeBotao2.add(rbMenorQ);
        rbMenorQ.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rbMenorQ.setText("Menor que");

        grupoDeBotao2.add(rbIgualQ);
        rbIgualQ.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rbIgualQ.setSelected(true);
        rbIgualQ.setText("Igual a");

        jLabel6.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jLabel6AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnConfirmar)
                .addGap(283, 283, 283))
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ckNome)
                                .addGap(177, 177, 177)
                                .addComponent(ckPreco))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(9, 9, 9)
                                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(txtPreco, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtQuantidade)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(rbMaiorQ)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(rbMenorQ))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(rbMaiorP)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(rbMenorP))))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(rbIgualP)
                                    .addComponent(rbIgualQ))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                .addComponent(ckQuantidade)
                                .addGap(82, 82, 82))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbPesquisa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 617, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ckNome)
                    .addComponent(ckPreco)
                    .addComponent(ckQuantidade))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(rbMaiorP)
                    .addComponent(rbMenorP)
                    .addComponent(rbIgualP))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(rbMaiorQ)
                    .addComponent(rbMenorQ)
                    .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbIgualQ))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(btnConfirmar)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        btnConfirmar.setEnabled(false);
        txtNome.setEnabled(false);
        txtNome.setBackground(Color.lightGray);
        txtID.setEnabled(false);
        txtID.setBackground(Color.lightGray);
        txtQuantidade.setEnabled(false);
        txtQuantidade.setBackground(Color.lightGray);
        txtPreco.setEnabled(false);
        txtPreco.setBackground(Color.lightGray);
        rbMaiorP.setEnabled(false);
        rbMenorP.setEnabled(false);
        rbIgualP.setEnabled(false);
        rbMaiorQ.setEnabled(false);
        rbMenorQ.setEnabled(false);
        rbIgualQ.setEnabled(false);
        ckNome.setEnabled(false);
        ckPreco.setEnabled(false);
        ckQuantidade.setEnabled(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_formInternalFrameOpened

    private void cbPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPesquisaActionPerformed
       switch (cbPesquisa.getSelectedIndex()) {
            case 0:
                //Selecione
                btnConfirmar.setEnabled(false);
                txtID.setEnabled(false);
                txtID.setBackground(Color.lightGray);
                txtID.setText("");
                ckNome.setEnabled(false);
                ckNome.setSelected(false);
                txtNome.setEnabled(false);
                txtNome.setBackground(Color.lightGray);
                txtNome.setText("");
                txtID.setEnabled(false);
                txtID.setBackground(Color.lightGray);
                txtQuantidade.setEnabled(false);
                txtQuantidade.setBackground(Color.lightGray);
                txtQuantidade.setText("");
                txtPreco.setEnabled(false);
                txtPreco.setBackground(Color.lightGray);
                rbMaiorP.setEnabled(false);
                rbMenorP.setEnabled(false);
                rbIgualP.setEnabled(false);
                rbMaiorQ.setEnabled(false);
                rbMenorQ.setEnabled(false);
                rbIgualQ.setEnabled(false);
                ckQuantidade.setEnabled(false);
                ckQuantidade.setSelected(false);
                ckPreco.setEnabled(false);
                ckPreco.setSelected(false);
                break;
            case 1:
                //sem critério
                btnConfirmar.setEnabled(true);
                txtID.setEnabled(false);
                txtID.setBackground(Color.lightGray);
                txtID.setText("");
                ckNome.setEnabled(false);
                ckNome.setSelected(false);
                ckQuantidade.setEnabled(false);
                ckQuantidade.setSelected(false);
                ckPreco.setEnabled(false);
                ckPreco.setSelected(false);
                txtNome.setEnabled(false);
                txtNome.setBackground(Color.lightGray);
                txtNome.setText("");
                txtID.setEnabled(false);
                txtID.setBackground(Color.lightGray);
                txtQuantidade.setEnabled(false);
                txtQuantidade.setBackground(Color.lightGray);
                txtQuantidade.setText("");
                txtPreco.setEnabled(false);
                txtPreco.setBackground(Color.lightGray);
                rbMaiorP.setEnabled(false);
                rbMenorP.setEnabled(false);
                rbIgualP.setEnabled(false);
                rbMaiorQ.setEnabled(false);
                rbMenorQ.setEnabled(false);
                rbIgualQ.setEnabled(false);
                break;
            case 2:
                //ID
                btnConfirmar.setEnabled(true);
                txtID.setEnabled(true);
                txtID.setBackground(Color.white);
                ckNome.setEnabled(false);
                ckNome.setSelected(false);
                ckQuantidade.setEnabled(false);
                ckQuantidade.setSelected(false);
                ckPreco.setEnabled(false);
                ckPreco.setSelected(false);
                txtNome.setEnabled(false);
                txtNome.setBackground(Color.lightGray);
                txtNome.setText("");
                txtQuantidade.setEnabled(false);
                txtQuantidade.setBackground(Color.lightGray);
                txtQuantidade.setText("");
                txtPreco.setEnabled(false);
                txtPreco.setBackground(Color.lightGray);
                rbMaiorP.setEnabled(false);
                rbMenorP.setEnabled(false);
                rbIgualP.setEnabled(false);
                rbMaiorQ.setEnabled(false);
                rbMenorQ.setEnabled(false);
                rbIgualQ.setEnabled(false);
                break;
            case 3:
                btnConfirmar.setEnabled(false);
                txtID.setEnabled(false);
                txtID.setBackground(Color.lightGray);
                txtID.setText("");
                ckNome.setEnabled(true);
                ckNome.setSelected(false);
                txtNome.setEnabled(false);
                txtNome.setBackground(Color.lightGray);
                txtNome.setText("");
                txtID.setEnabled(false);
                txtID.setBackground(Color.lightGray);
                txtQuantidade.setEnabled(false);
                txtQuantidade.setBackground(Color.lightGray);
                txtQuantidade.setText("");
                txtPreco.setEnabled(false);
                txtPreco.setBackground(Color.lightGray);
                rbMaiorP.setEnabled(false);
                rbMenorP.setEnabled(false);
                rbIgualP.setEnabled(false);
                rbMaiorQ.setEnabled(false);
                rbMenorQ.setEnabled(false);
                rbIgualQ.setEnabled(false);
                ckQuantidade.setEnabled(true);
                ckQuantidade.setSelected(false);
                ckPreco.setEnabled(true);
                ckPreco.setSelected(false);
                break;
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_cbPesquisaActionPerformed

    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
       OutrosProdutos op = new OutrosProdutos();
        OutrosProdutosDAO dao = new OutrosProdutosDAO();
        DefaultTableModel model = (DefaultTableModel) tblProdutos.getModel();
        model.setRowCount(0);
        switch (cbPesquisa.getSelectedIndex()) {
            case 0:
             
                break;
            case 1:
                dao.pesquisaInicial(op, tblProdutos);
                break;
            case 2:
                try {
                    int id = Integer.parseInt(txtID.getText());
                    if (id > 0) {
                        dao.pesquisarPorId(op, tblProdutos, id);
                        if (tblProdutos.getRowCount() == 0) {
                            JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                            txtID.setText("");
                            txtID.requestFocus();
                        } else {
                            JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, digite algum ID válido", "ID inválido", JOptionPane.OK_OPTION);
                        txtID.requestFocus();
                        txtID.setBackground(Color.pink);
                        txtID.setText("");
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Por favor, digite algum ID válido", "ID inválido", JOptionPane.OK_OPTION);
                    txtID.requestFocus();
                    txtID.setBackground(Color.pink);
                    txtID.setText("");
                }

                break;
                
            case 3:
                   if (ckNome.isSelected() && ckQuantidade.isSelected() && rbIgualQ.isSelected() && ckPreco.isSelected() && rbIgualP.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q > 0 || q == 0) {
                                try {
                                    double p = Double.parseDouble(txtPreco.getText());

                                    try {
                                        if (p >= 0) {
                                            dao.pesquisarPorNomePrecoIgualQuantidadeIgual(op, tblProdutos, txtNome, p, q);
                                            if (tblProdutos.getRowCount() == 0) {
                                                JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisar Produto", JOptionPane.OK_OPTION);
                                                txtNome.setText("");
                                                txtQuantidade.setText("");
                                                txtPreco.setText("");
                                                txtNome.requestFocus();
                                            } else {

                                                JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso!", "Pesquisar produto", JOptionPane.OK_OPTION);
                                            }
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Por favor, digite um preço válido", "Preço Inválido", JOptionPane.OK_OPTION);
                                            txtPreco.setText("");
                                            txtPreco.requestFocus();
                                            txtPreco.setBackground(Color.pink);
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Ocorreu algum erro na pesquisa", "Erro", JOptionPane.OK_OPTION);
                                    }

                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, digite um preço válido", "Preço Inválido", JOptionPane.OK_OPTION);
                                    txtPreco.setText("");
                                    txtPreco.requestFocus();
                                    txtPreco.setBackground(Color.pink);
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade Inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                                txtQuantidade.setText("");
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade Inválida", JOptionPane.OK_OPTION);
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.requestFocus();
                            txtQuantidade.setText("");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, digite algum nome", "Digite algum nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }

                } else if (ckNome.isSelected() && ckQuantidade.isSelected() && rbIgualQ.isSelected() && ckPreco.isSelected() && rbMaiorP.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q > 0 || q == 0) {
                                try {
                                    double p = Double.parseDouble(txtPreco.getText());

                                    try {
                                        if (p >= 0) {
                                            dao.pesquisarPorNomePrecoMaiorQuantidadeIgual(op, tblProdutos, txtNome, p, q);
                                            if (tblProdutos.getRowCount() == 0) {
                                                JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisar Produto", JOptionPane.OK_OPTION);
                                                txtNome.setText("");
                                                txtQuantidade.setText("");
                                                txtPreco.setText("");
                                                txtNome.requestFocus();
                                            } else {

                                                JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso!", "Pesquisar produto", JOptionPane.OK_OPTION);
                                            }
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Por favor, digite um preço válido", "Preço Inválido", JOptionPane.OK_OPTION);
                                            txtPreco.setText("");
                                            txtPreco.requestFocus();
                                            txtPreco.setBackground(Color.pink);
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Ocorreu algum erro na pesquisa", "Erro", JOptionPane.OK_OPTION);
                                    }

                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, digite um preço válido", "Preço Inválido", JOptionPane.OK_OPTION);
                                    txtPreco.setText("");
                                    txtPreco.requestFocus();
                                    txtPreco.setBackground(Color.pink);
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade Inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                                txtQuantidade.setText("");
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade Inválida", JOptionPane.OK_OPTION);
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.requestFocus();
                            txtQuantidade.setText("");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, digite algum nome", "Digite algum nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }

                } else if (ckNome.isSelected() && ckQuantidade.isSelected() && rbIgualQ.isSelected() && ckPreco.isSelected() && rbMenorP.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q > 0 || q == 0) {
                                try {
                                    double p = Double.parseDouble(txtPreco.getText());

                                    try {
                                        if (p >= 0) {
                                            dao.pesquisarPorNomePrecoMenorQuantidadeIgual(op, tblProdutos, txtNome, p, q);
                                            if (tblProdutos.getRowCount() == 0) {
                                                JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisar Produto", JOptionPane.OK_OPTION);
                                                txtNome.setText("");
                                                txtQuantidade.setText("");
                                                txtPreco.setText("");
                                                txtNome.requestFocus();
                                            } else {

                                                JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso!", "Pesquisar produto", JOptionPane.OK_OPTION);
                                            }
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Por favor, digite um preço válido", "Preço Inválido", JOptionPane.OK_OPTION);
                                            txtPreco.setText("");
                                            txtPreco.requestFocus();
                                            txtPreco.setBackground(Color.pink);
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Ocorreu algum erro na pesquisa", "Erro", JOptionPane.OK_OPTION);
                                    }

                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, digite um preço válido", "Preço Inválido", JOptionPane.OK_OPTION);
                                    txtPreco.setText("");
                                    txtPreco.requestFocus();
                                    txtPreco.setBackground(Color.pink);
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade Inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                                txtQuantidade.setText("");
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade Inválida", JOptionPane.OK_OPTION);
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.requestFocus();
                            txtQuantidade.setText("");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, digite algum nome", "Digite algum nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }

                } else if (ckNome.isSelected() && ckQuantidade.isSelected() && rbMaiorQ.isSelected() && ckPreco.isSelected() && rbIgualP.isSelected()) {

                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q > 0 || q == 0) {
                                try {
                                    double p = Double.parseDouble(txtPreco.getText());

                                    try {
                                        if (p >= 0) {
                                            dao.pesquisarPorNomePrecoIgualQuantidadeMaior(op, tblProdutos, txtNome, p, q);
                                            if (tblProdutos.getRowCount() == 0) {
                                                JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisar Produto", JOptionPane.OK_OPTION);
                                                txtNome.setText("");
                                                txtQuantidade.setText("");
                                                txtPreco.setText("");
                                                txtNome.requestFocus();
                                            } else {

                                                JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso!", "Pesquisar produto", JOptionPane.OK_OPTION);
                                            }
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Por favor, digite um preço válido", "Preço Inválido", JOptionPane.OK_OPTION);
                                            txtPreco.setText("");
                                            txtPreco.requestFocus();
                                            txtPreco.setBackground(Color.pink);
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Ocorreu algum erro na pesquisa", "Erro", JOptionPane.OK_OPTION);
                                    }

                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, digite um preço válido", "Preço Inválido", JOptionPane.OK_OPTION);
                                    txtPreco.setText("");
                                    txtPreco.requestFocus();
                                    txtPreco.setBackground(Color.pink);
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade Inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                                txtQuantidade.setText("");
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade Inválida", JOptionPane.OK_OPTION);
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.requestFocus();
                            txtQuantidade.setText("");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, digite algum nome", "Digite algum nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }

                } else if (ckNome.isSelected() && ckQuantidade.isSelected() && rbMaiorQ.isSelected() && ckPreco.isSelected() && rbMaiorP.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q > 0 || q == 0) {
                                try {
                                    double p = Double.parseDouble(txtPreco.getText());

                                    try {
                                        if (p >= 0) {
                                            dao.pesquisarPorNomePrecoMaiorQuantidadeMaior(op, tblProdutos, txtNome, p, q);
                                            if (tblProdutos.getRowCount() == 0) {
                                                JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisar Produto", JOptionPane.OK_OPTION);
                                                txtNome.setText("");
                                                txtQuantidade.setText("");
                                                txtPreco.setText("");
                                                txtNome.requestFocus();
                                            } else {

                                                JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso!", "Pesquisar produto", JOptionPane.OK_OPTION);
                                            }
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Por favor, digite um preço válido", "Preço Inválido", JOptionPane.OK_OPTION);
                                            txtPreco.setText("");
                                            txtPreco.requestFocus();
                                            txtPreco.setBackground(Color.pink);
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Ocorreu algum erro na pesquisa", "Erro", JOptionPane.OK_OPTION);
                                    }

                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, digite um preço válido", "Preço Inválido", JOptionPane.OK_OPTION);
                                    txtPreco.setText("");
                                    txtPreco.requestFocus();
                                    txtPreco.setBackground(Color.pink);
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade Inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                                txtQuantidade.setText("");
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade Inválida", JOptionPane.OK_OPTION);
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.requestFocus();
                            txtQuantidade.setText("");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, digite algum nome", "Digite algum nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }

                } else if (ckNome.isSelected() && ckQuantidade.isSelected() && rbMaiorQ.isSelected() && ckPreco.isSelected() && rbMenorP.isSelected()) {

                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q > 0 || q == 0) {
                                try {
                                    double p = Double.parseDouble(txtPreco.getText());

                                    try {
                                        if (p >= 0) {
                                            dao.pesquisarPorNomePrecoMenorQuantidadeMaior(op, tblProdutos, txtNome, p, q);
                                            if (tblProdutos.getRowCount() == 0) {
                                                JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisar Produto", JOptionPane.OK_OPTION);
                                                txtNome.setText("");
                                                txtQuantidade.setText("");
                                                txtPreco.setText("");
                                                txtNome.requestFocus();
                                            } else {

                                                JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso!", "Pesquisar produto", JOptionPane.OK_OPTION);
                                            }
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Por favor, digite um preço válido", "Preço Inválido", JOptionPane.OK_OPTION);
                                            txtPreco.setText("");
                                            txtPreco.requestFocus();
                                            txtPreco.setBackground(Color.pink);
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Ocorreu algum erro na pesquisa", "Erro", JOptionPane.OK_OPTION);
                                    }

                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, digite um preço válido", "Preço Inválido", JOptionPane.OK_OPTION);
                                    txtPreco.setText("");
                                    txtPreco.requestFocus();
                                    txtPreco.setBackground(Color.pink);
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade Inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                                txtQuantidade.setText("");
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade Inválida", JOptionPane.OK_OPTION);
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.requestFocus();
                            txtQuantidade.setText("");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, digite algum nome", "Digite algum nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }

                } else if (ckNome.isSelected() && ckQuantidade.isSelected() && rbMenorQ.isSelected() && ckPreco.isSelected() && rbIgualP.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q > 0 || q == 0) {
                                try {
                                    double p = Double.parseDouble(txtPreco.getText());

                                    try {
                                        if (p >= 0) {
                                            dao.pesquisarPorNomePrecoIgualQuantidadeMenor(op, tblProdutos, txtNome, p, q);
                                            if (tblProdutos.getRowCount() == 0) {
                                                JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisar Produto", JOptionPane.OK_OPTION);
                                                txtNome.setText("");
                                                txtQuantidade.setText("");
                                                txtPreco.setText("");
                                                txtNome.requestFocus();
                                            } else {

                                                JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso!", "Pesquisar produto", JOptionPane.OK_OPTION);
                                            }
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Por favor, digite um preço válido", "Preço Inválido", JOptionPane.OK_OPTION);
                                            txtPreco.setText("");
                                            txtPreco.requestFocus();
                                            txtPreco.setBackground(Color.pink);
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Ocorreu algum erro na pesquisa", "Erro", JOptionPane.OK_OPTION);
                                    }

                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, digite um preço válido", "Preço Inválido", JOptionPane.OK_OPTION);
                                    txtPreco.setText("");
                                    txtPreco.requestFocus();
                                    txtPreco.setBackground(Color.pink);
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade Inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                                txtQuantidade.setText("");
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade Inválida", JOptionPane.OK_OPTION);
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.requestFocus();
                            txtQuantidade.setText("");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, digite algum nome", "Digite algum nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }

                } else if (ckNome.isSelected() && ckQuantidade.isSelected() && rbMenorQ.isSelected() && ckPreco.isSelected() && rbMaiorP.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q > 0 || q == 0) {
                                try {
                                    double p = Double.parseDouble(txtPreco.getText());

                                    try {
                                        if (p >= 0) {
                                            dao.pesquisarPorNomePrecoMaiorQuantidadeMenor(op, tblProdutos, txtNome, p, q);
                                            if (tblProdutos.getRowCount() == 0) {
                                                JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisar Produto", JOptionPane.OK_OPTION);
                                                txtNome.setText("");
                                                txtQuantidade.setText("");
                                                txtPreco.setText("");
                                                txtNome.requestFocus();
                                            } else {

                                                JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso!", "Pesquisar produto", JOptionPane.OK_OPTION);
                                            }
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Por favor, digite um preço válido", "Preço Inválido", JOptionPane.OK_OPTION);
                                            txtPreco.setText("");
                                            txtPreco.requestFocus();
                                            txtPreco.setBackground(Color.pink);
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Ocorreu algum erro na pesquisa", "Erro", JOptionPane.OK_OPTION);
                                    }

                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, digite um preço válido", "Preço Inválido", JOptionPane.OK_OPTION);
                                    txtPreco.setText("");
                                    txtPreco.requestFocus();
                                    txtPreco.setBackground(Color.pink);
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade Inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                                txtQuantidade.setText("");
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade Inválida", JOptionPane.OK_OPTION);
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.requestFocus();
                            txtQuantidade.setText("");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, digite algum nome", "Digite algum nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }

                } else if (ckNome.isSelected() && ckQuantidade.isSelected() && rbMenorQ.isSelected() && ckPreco.isSelected() && rbMenorP.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q > 0 || q == 0) {
                                try {
                                    double p = Double.parseDouble(txtPreco.getText());

                                    try {
                                        if (p >= 0) {
                                            dao.pesquisarPorNomePrecoMenorQuantidadeMenor(op, tblProdutos, txtNome, p, q);
                                            if (tblProdutos.getRowCount() == 0) {
                                                JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisar Produto", JOptionPane.OK_OPTION);
                                                txtNome.setText("");
                                                txtQuantidade.setText("");
                                                txtPreco.setText("");
                                                txtNome.requestFocus();
                                            } else {

                                                JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso!", "Pesquisar produto", JOptionPane.OK_OPTION);
                                            }
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Por favor, digite um preço válido", "Preço Inválido", JOptionPane.OK_OPTION);
                                            txtPreco.setText("");
                                            txtPreco.requestFocus();
                                            txtPreco.setBackground(Color.pink);
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, "Ocorreu algum erro na pesquisa", "Erro", JOptionPane.OK_OPTION);
                                    }

                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(null, "Por favor, digite um preço válido", "Preço Inválido", JOptionPane.OK_OPTION);
                                    txtPreco.setText("");
                                    txtPreco.requestFocus();
                                    txtPreco.setBackground(Color.pink);
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade Inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                                txtQuantidade.setText("");
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade Inválida", JOptionPane.OK_OPTION);
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.requestFocus();
                            txtQuantidade.setText("");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Por favor, digite algum nome", "Digite algum nome", JOptionPane.OK_OPTION);
                        txtNome.requestFocus();
                        txtNome.setBackground(Color.pink);
                    }

                } else if (ckNome.isSelected() && ckQuantidade.isSelected() && rbIgualQ.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q >= 0) {
                                txtQuantidade.setBackground(Color.white);
                                try {
                                    dao.pesquisarPorNomeQuantidadeIgual(op, tblProdutos, txtNome, q);
                                    if (tblProdutos.getRowCount() == 0) {
                                        JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisar Produto", JOptionPane.OK_OPTION);
                                        txtNome.setText("");
                                        txtQuantidade.setText("");
                                        txtNome.requestFocus();
                                    } else {

                                        JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso!", "Pesquisar produto", JOptionPane.OK_OPTION);
                                    }
                                } catch (Exception e) {
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.setText("");
                                txtQuantidade.requestFocus();
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.setText("");
                            txtQuantidade.requestFocus();
                        }

                    } else {
                        txtNome.setBackground(Color.pink);
                        txtNome.requestFocus();
                    }

                } else if (ckNome.isSelected() && ckQuantidade.isSelected() && rbMaiorQ.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q >= 0) {
                                txtQuantidade.setBackground(Color.white);
                                try {
                                    dao.pesquisarPorNomeQuantidadeMaior(op, tblProdutos, txtNome, q);
                                    if (tblProdutos.getRowCount() == 0) {
                                        JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisar Produto", JOptionPane.OK_OPTION);
                                        txtNome.setText("");
                                        txtQuantidade.setText("");
                                        txtNome.requestFocus();
                                    } else {

                                        JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso!", "Pesquisar produto", JOptionPane.OK_OPTION);
                                    }
                                } catch (Exception e) {
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.setText("");
                                txtQuantidade.requestFocus();
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.setText("");
                            txtQuantidade.requestFocus();
                        }

                    } else {
                        txtNome.setBackground(Color.pink);
                        txtNome.requestFocus();
                    }

                } else if (ckNome.isSelected() && ckQuantidade.isSelected() && rbMenorQ.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        try {
                            int q = Integer.parseInt(txtQuantidade.getText());
                            if (q >= 0) {
                                txtQuantidade.setBackground(Color.white);
                                try {
                                    dao.pesquisarPorNomeQuantidadeMaior(op, tblProdutos, txtNome, q);
                                    if (tblProdutos.getRowCount() == 0) {
                                        JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisar Produto", JOptionPane.OK_OPTION);
                                        txtNome.setText("");
                                        txtQuantidade.setText("");
                                        txtNome.requestFocus();
                                    } else {

                                        JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso!", "Pesquisar produto", JOptionPane.OK_OPTION);
                                    }
                                } catch (Exception e) {
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.setText("");
                                txtQuantidade.requestFocus();
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "Por favor, digite uma quantidade válida", "Quantidade inválida", JOptionPane.OK_OPTION);
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.setText("");
                            txtQuantidade.requestFocus();
                        }

                    } else {
                        txtNome.setBackground(Color.pink);
                        txtNome.requestFocus();
                    }

                } else if (ckNome.isSelected() && ckPreco.isSelected() && rbIgualP.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        try {
                            double p = Double.parseDouble(txtPreco.getText());
                            if (p >= 0) {
                                txtPreco.setBackground(Color.white);
                                try {
                                    dao.pesquisarPorNomePrecoIgual(op, tblProdutos, txtNome, p);
                                    if (tblProdutos.getRowCount() == 0) {
                                        JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                        txtNome.setText("");
                                        txtPreco.setText("");
                                        txtNome.requestFocus();
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                    }
                                } catch (Exception e) {
                                }
                            } else {
                                txtPreco.setText("");
                                txtPreco.requestFocus();
                                txtPreco.setBackground(Color.pink);
                            }
                        } catch (Exception e) {
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        }
                    } else {
                        txtNome.setBackground(Color.pink);
                        txtNome.requestFocus();
                    }

                } else if (ckNome.isSelected() && ckPreco.isSelected() && rbMaiorP.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        try {
                            double p = Double.parseDouble(txtPreco.getText());
                            if (p >= 0) {
                                txtPreco.setBackground(Color.white);
                                try {
                                    dao.pesquisarPorNomePrecoMaior(op, tblProdutos, txtNome, p);
                                    if (tblProdutos.getRowCount() == 0) {
                                        JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                        txtNome.setText("");
                                        txtPreco.setText("");
                                        txtNome.requestFocus();
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                    }
                                } catch (Exception e) {
                                }
                            } else {
                                txtPreco.setText("");
                                txtPreco.requestFocus();
                                txtPreco.setBackground(Color.pink);
                            }
                        } catch (Exception e) {
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        }
                    } else {
                        txtNome.setBackground(Color.pink);
                        txtNome.requestFocus();
                    }
                } else if (ckNome.isSelected() && ckPreco.isSelected() && rbMenorP.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        try {
                            double p = Double.parseDouble(txtPreco.getText());
                            if (p >= 0) {
                                txtPreco.setBackground(Color.white);
                                try {
                                    dao.pesquisarPorNomePrecoMenor(op, tblProdutos, txtNome, p);
                                    if (tblProdutos.getRowCount() == 0) {
                                        JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                        txtNome.setText("");
                                        txtPreco.setText("");
                                        txtNome.requestFocus();
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                    }
                                } catch (Exception e) {
                                }
                            } else {
                                txtPreco.setText("");
                                txtPreco.requestFocus();
                                txtPreco.setBackground(Color.pink);
                            }
                        } catch (Exception e) {
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        }
                    } else {
                        txtNome.setBackground(Color.pink);
                        txtNome.requestFocus();
                    }
                } else if (ckPreco.isSelected() && rbIgualP.isSelected() && ckQuantidade.isSelected() && rbIgualQ.isSelected()) {
                    try {
                        double p = Double.parseDouble(txtPreco.getText());
                        if (p >= 0) {
                            txtPreco.setBackground(Color.white);
                            try {
                                int q = Integer.parseInt(txtQuantidade.getText());
                                if (q >= 0) {
                                    txtQuantidade.setBackground(Color.white);
                                    try {
                                        dao.pesquisarPorPrecoIgualQuantidadeIgual(op, tblProdutos, p, q);
                                        if (tblProdutos.getRowCount() == 0) {
                                            JOptionPane.showMessageDialog(null, "Nenhum registro encontrado", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                            txtQuantidade.setText("");
                                            txtPreco.setText("");
                                            txtPreco.requestFocus();
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                        }
                                    } catch (Exception e) {
                                    }

                                } else {
                                    txtQuantidade.setText("");
                                    txtQuantidade.setBackground(Color.pink);
                                    txtQuantidade.requestFocus();
                                }
                            } catch (Exception e) {
                                txtQuantidade.setText("");
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                            }
                        } else {
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        }
                    } catch (Exception e) {
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                        txtPreco.setBackground(Color.pink);
                    }

                } else if (ckPreco.isSelected() && rbIgualP.isSelected() && ckQuantidade.isSelected() && rbMaiorQ.isSelected()) {
                    try {
                        double p = Double.parseDouble(txtPreco.getText());
                        if (p >= 0) {
                            txtPreco.setBackground(Color.white);
                            try {
                                int q = Integer.parseInt(txtQuantidade.getText());
                                if (q >= 0) {
                                    txtQuantidade.setBackground(Color.white);
                                    try {
                                        dao.pesquisarPorPrecoIgualQuantidadeMaior(op, tblProdutos, p, q);
                                        if (tblProdutos.getRowCount() == 0) {
                                            JOptionPane.showMessageDialog(null, "Nenhum registro encontrado", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                            txtQuantidade.setText("");
                                            txtPreco.setText("");
                                            txtPreco.requestFocus();
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                        }
                                    } catch (Exception e) {
                                    }

                                } else {
                                    txtQuantidade.setText("");
                                    txtQuantidade.setBackground(Color.pink);
                                    txtQuantidade.requestFocus();
                                }
                            } catch (Exception e) {
                                txtQuantidade.setText("");
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                            }
                        } else {
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        }
                    } catch (Exception e) {
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                        txtPreco.setBackground(Color.pink);
                    }
                } else if (ckPreco.isSelected() && rbIgualP.isSelected() && ckQuantidade.isSelected() && rbMenorQ.isSelected()) {
                    try {
                        double p = Double.parseDouble(txtPreco.getText());
                        if (p >= 0) {
                            txtPreco.setBackground(Color.white);
                            try {
                                int q = Integer.parseInt(txtQuantidade.getText());
                                if (q >= 0) {
                                    txtQuantidade.setBackground(Color.white);
                                    try {
                                        dao.pesquisarPorPrecoIgualQuantidadeMenor(op, tblProdutos, p, q);
                                        if (tblProdutos.getRowCount() == 0) {
                                            JOptionPane.showMessageDialog(null, "Nenhum registro encontrado", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                            txtQuantidade.setText("");
                                            txtPreco.setText("");
                                            txtPreco.requestFocus();
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                        }
                                    } catch (Exception e) {
                                    }

                                } else {
                                    txtQuantidade.setText("");
                                    txtQuantidade.setBackground(Color.pink);
                                    txtQuantidade.requestFocus();
                                }
                            } catch (Exception e) {
                                txtQuantidade.setText("");
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                            }
                        } else {
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        }
                    } catch (Exception e) {
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                        txtPreco.setBackground(Color.pink);
                    }

                } else if (ckPreco.isSelected() && rbMaiorP.isSelected() && ckQuantidade.isSelected() && rbIgualQ.isSelected()) {
                    try {
                        double p = Double.parseDouble(txtPreco.getText());
                        if (p >= 0) {
                            txtPreco.setBackground(Color.white);
                            try {
                                int q = Integer.parseInt(txtQuantidade.getText());
                                if (q >= 0) {
                                    txtQuantidade.setBackground(Color.white);
                                    try {
                                        dao.pesquisarPorPrecoMaiorQuantidadeIgual(op, tblProdutos, p, q);
                                        if (tblProdutos.getRowCount() == 0) {
                                            JOptionPane.showMessageDialog(null, "Nenhum registro encontrado", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                            txtQuantidade.setText("");
                                            txtPreco.setText("");
                                            txtPreco.requestFocus();
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                        }
                                    } catch (Exception e) {
                                    }

                                } else {
                                    txtQuantidade.setText("");
                                    txtQuantidade.setBackground(Color.pink);
                                    txtQuantidade.requestFocus();
                                }
                            } catch (Exception e) {
                                txtQuantidade.setText("");
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                            }
                        } else {
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        }
                    } catch (Exception e) {
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                        txtPreco.setBackground(Color.pink);
                    }

                } else if (ckPreco.isSelected() && rbMaiorP.isSelected() && ckQuantidade.isSelected() && rbMenorQ.isSelected()) {
                    try {
                        double p = Double.parseDouble(txtPreco.getText());
                        if (p >= 0) {
                            txtPreco.setBackground(Color.white);
                            try {
                                int q = Integer.parseInt(txtQuantidade.getText());
                                if (q >= 0) {
                                    txtQuantidade.setBackground(Color.white);
                                    try {
                                        dao.pesquisarPorPrecoMaiorQuantidadeMenor(op, tblProdutos, p, q);
                                        if (tblProdutos.getRowCount() == 0) {
                                            JOptionPane.showMessageDialog(null, "Nenhum registro encontrado", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                            txtQuantidade.setText("");
                                            txtPreco.setText("");
                                            txtPreco.requestFocus();
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                        }
                                    } catch (Exception e) {
                                    }

                                } else {
                                    txtQuantidade.setText("");
                                    txtQuantidade.setBackground(Color.pink);
                                    txtQuantidade.requestFocus();
                                }
                            } catch (Exception e) {
                                txtQuantidade.setText("");
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                            }
                        } else {
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        }
                    } catch (Exception e) {
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                        txtPreco.setBackground(Color.pink);
                    }

                } else if (ckPreco.isSelected() && rbMaiorP.isSelected() && ckQuantidade.isSelected() && rbMaiorQ.isSelected()) {
                    try {
                        double p = Double.parseDouble(txtPreco.getText());
                        if (p >= 0) {
                            txtPreco.setBackground(Color.white);
                            try {
                                int q = Integer.parseInt(txtQuantidade.getText());
                                if (q >= 0) {
                                    txtQuantidade.setBackground(Color.white);
                                    try {
                                        dao.pesquisarPorPrecoMaiorQuantidadeMaior(op, tblProdutos, p, q);
                                        if (tblProdutos.getRowCount() == 0) {
                                            JOptionPane.showMessageDialog(null, "Nenhum registro encontrado", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                            txtQuantidade.setText("");
                                            txtPreco.setText("");
                                            txtPreco.requestFocus();
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                        }
                                    } catch (Exception e) {
                                    }

                                } else {
                                    txtQuantidade.setText("");
                                    txtQuantidade.setBackground(Color.pink);
                                    txtQuantidade.requestFocus();
                                }
                            } catch (Exception e) {
                                txtQuantidade.setText("");
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                            }
                        } else {
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        }
                    } catch (Exception e) {
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                        txtPreco.setBackground(Color.pink);
                    }
                } else if (ckPreco.isSelected() && rbMenorP.isSelected() && ckQuantidade.isSelected() && rbIgualQ.isSelected()) {
                    try {
                        double p = Double.parseDouble(txtPreco.getText());
                        if (p >= 0) {
                            txtPreco.setBackground(Color.white);
                            try {
                                int q = Integer.parseInt(txtQuantidade.getText());
                                if (q >= 0) {
                                    txtQuantidade.setBackground(Color.white);
                                    try {
                                        dao.pesquisarPorPrecoMenorQuantidadeIgual(op, tblProdutos, p, q);
                                        if (tblProdutos.getRowCount() == 0) {
                                            JOptionPane.showMessageDialog(null, "Nenhum registro encontrado", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                            txtQuantidade.setText("");
                                            txtPreco.setText("");
                                            txtPreco.requestFocus();
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                        }
                                    } catch (Exception e) {
                                    }

                                } else {
                                    txtQuantidade.setText("");
                                    txtQuantidade.setBackground(Color.pink);
                                    txtQuantidade.requestFocus();
                                }
                            } catch (Exception e) {
                                txtQuantidade.setText("");
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                            }
                        } else {
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        }
                    } catch (Exception e) {
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                        txtPreco.setBackground(Color.pink);
                    }

                } else if (ckPreco.isSelected() && rbMenorP.isSelected() && ckQuantidade.isSelected() && rbMenorQ.isSelected()) {
                    try {
                        double p = Double.parseDouble(txtPreco.getText());
                        if (p >= 0) {
                            txtPreco.setBackground(Color.white);
                            try {
                                int q = Integer.parseInt(txtQuantidade.getText());
                                if (q >= 0) {
                                    txtQuantidade.setBackground(Color.white);
                                    try {
                                        dao.pesquisarPorPrecoMenorQuantidadeMenor(op, tblProdutos, p, q);
                                        if (tblProdutos.getRowCount() == 0) {
                                            JOptionPane.showMessageDialog(null, "Nenhum registro encontrado", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                            txtQuantidade.setText("");
                                            txtPreco.setText("");
                                            txtPreco.requestFocus();
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                        }
                                    } catch (Exception e) {
                                    }

                                } else {
                                    txtQuantidade.setText("");
                                    txtQuantidade.setBackground(Color.pink);
                                    txtQuantidade.requestFocus();
                                }
                            } catch (Exception e) {
                                txtQuantidade.setText("");
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                            }
                        } else {
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        }
                    } catch (Exception e) {
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                        txtPreco.setBackground(Color.pink);
                    }
                } else if (ckPreco.isSelected() && rbMenorP.isSelected() && ckQuantidade.isSelected() && rbMaiorQ.isSelected()) {
                    try {
                        double p = Double.parseDouble(txtPreco.getText());
                        if (p >= 0) {
                            txtPreco.setBackground(Color.white);
                            try {
                                int q = Integer.parseInt(txtQuantidade.getText());
                                if (q >= 0) {
                                    txtQuantidade.setBackground(Color.white);
                                    try {
                                        dao.pesquisarPorPrecoMenorQuantidadeMaior(op, tblProdutos, p, q);
                                        if (tblProdutos.getRowCount() == 0) {
                                            JOptionPane.showMessageDialog(null, "Nenhum registro encontrado", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                            txtQuantidade.setText("");
                                            txtPreco.setText("");
                                            txtPreco.requestFocus();
                                        } else {
                                            JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                        }
                                    } catch (Exception e) {
                                    }

                                } else {
                                    txtQuantidade.setText("");
                                    txtQuantidade.setBackground(Color.pink);
                                    txtQuantidade.requestFocus();
                                }
                            } catch (Exception e) {
                                txtQuantidade.setText("");
                                txtQuantidade.setBackground(Color.pink);
                                txtQuantidade.requestFocus();
                            }
                        } else {
                            txtPreco.setText("");
                            txtPreco.requestFocus();
                            txtPreco.setBackground(Color.pink);
                        }
                    } catch (Exception e) {
                        txtPreco.setText("");
                        txtPreco.requestFocus();
                        txtPreco.setBackground(Color.pink);
                    }
                } else if (ckNome.isSelected()) {
                    if (!txtNome.getText().equals("")) {
                        txtNome.setBackground(Color.white);
                        try {
                            dao.pesquisarPorNome(op, tblProdutos, txtNome);
                            if (tblProdutos.getRowCount() == 0) {
                                JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                txtNome.setText("");
                                txtNome.requestFocus();
                            } else {
                                JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                            }
                        } catch (Exception e) {
                        }
                    } else {
                        txtNome.setBackground(Color.pink);
                        txtNome.requestFocus();
                    }
                } else if (ckQuantidade.isSelected()) {
                    try {
                        int q = Integer.parseInt(txtQuantidade.getText());
                        if (q >= 0) {
                            txtQuantidade.setBackground(Color.white);
                            if (rbIgualQ.isSelected()) {
                                try {
                                    dao.pesquisarPorQuantidadeIgual(op, tblProdutos, q);
                                    if (tblProdutos.getRowCount() == 0) {
                                        JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisar Produto", JOptionPane.OK_OPTION);
                                        txtQuantidade.setText("");
                                        txtQuantidade.requestFocus();
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                    }

                                } catch (Exception e) {
                                }
                            }
                            if (rbMaiorQ.isSelected()) {
                                try {
                                    dao.pesquisarPorQuantidadeMaior(op, tblProdutos, q);
                                    if (tblProdutos.getRowCount() == 0) {
                                        JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisar Produto", JOptionPane.OK_OPTION);
                                        txtQuantidade.setText("");
                                        txtQuantidade.requestFocus();
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                    }
                                } catch (Exception e) {
                                }

                            }
                            if (rbMenorQ.isSelected()) {
                                try {
                                    dao.pesquisarPorQuantidadeMenor(op, tblProdutos, q);
                                    if (tblProdutos.getRowCount() == 0) {
                                        JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisar Produto", JOptionPane.OK_OPTION);
                                        txtQuantidade.setText("");
                                        txtQuantidade.requestFocus();
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisar Produtos", JOptionPane.OK_OPTION);
                                    }
                                } catch (Exception e) {
                                }
                            }
                        } else {

                            txtQuantidade.setText("");
                            txtQuantidade.setBackground(Color.pink);
                            txtQuantidade.requestFocus();
                        }

                    } catch (Exception e) {
                        txtQuantidade.setText("");
                        txtQuantidade.setBackground(Color.pink);
                        txtQuantidade.requestFocus();
                    }

                } else if (ckPreco.isSelected()) {
                    try {
                        double p = Double.parseDouble(txtPreco.getText());
                        if (p >= 0) {
                            txtPreco.setBackground(Color.white);
                            if (rbIgualP.isSelected()) {
                                try {
                                    dao.pesquisarPorPrecoIgual(op, tblProdutos, p);
                                    if (tblProdutos.getRowCount() == 0) {
                                        JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisa de Produtos", JOptionPane.OK_OPTION);
                                        txtPreco.setText("");
                                        txtPreco.requestFocus();
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisa de Produtos", JOptionPane.OK_OPTION);
                                    }
                                } catch (Exception e) {
                                }
                            }
                            if (rbMaiorP.isSelected()) {
                                try {
                                    dao.pesquisarPorPrecoMaior(op, tblProdutos, p);
                                    if (tblProdutos.getRowCount() == 0) {
                                        JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisa de Produtos", JOptionPane.OK_OPTION);
                                        txtPreco.setText("");
                                        txtPreco.requestFocus();
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisa de Produtos", JOptionPane.OK_OPTION);
                                    }
                                } catch (Exception e) {
                                }
                            }
                            if (rbMenorP.isSelected()) {
                                try {
                                    dao.pesquisarPorPrecoMenor(op, tblProdutos, p);
                                    if (tblProdutos.getRowCount() == 0) {
                                        JOptionPane.showMessageDialog(null, "Nenhum registro foi encontrado", "Pesquisa de Produtos", JOptionPane.OK_OPTION);
                                        txtPreco.setText("");
                                        txtPreco.requestFocus();
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Pesquisa realizada com sucesso", "Pesquisa de Produtos", JOptionPane.OK_OPTION);
                                    }
                                } catch (Exception e) {
                                }
                            }
                        } else {
                            txtPreco.setText("");
                            txtPreco.setBackground(Color.pink);
                            txtPreco.requestFocus();
                        }
                    } catch (Exception e) {
                    }
                }

                break;
        }
//if(tblProdutos.getRowCount()==0){
//JOptionPane.showMessageDialog(null,"Nenhum resultado foi encontrado!","Nenhum resultado",JOptionPane.OK_OPTION);
//}
        // TODO add your handling code here:
    }//GEN-LAST:event_btnConfirmarActionPerformed

    private void ckNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckNomeActionPerformed
        if (ckNome.isSelected()) {
            txtNome.setEnabled(true);
            txtNome.setBackground(Color.white);
            btnConfirmar.setEnabled(true);
        } else if (!ckNome.isSelected()) {
            txtNome.setEnabled(false);
            txtNome.setBackground(Color.lightGray);
            txtNome.setText("");
            if (ckNome.isSelected() && ckQuantidade.isSelected() && ckPreco.isSelected()) {
                btnConfirmar.setEnabled(false);
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_ckNomeActionPerformed

    private void ckPrecoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckPrecoActionPerformed
        if (ckPreco.isSelected()) {
            txtPreco.setEnabled(true);
            txtPreco.setBackground(Color.white);
            btnConfirmar.setEnabled(true);
            rbMaiorP.setEnabled(true);
            rbMenorP.setEnabled(true);
            rbIgualP.setEnabled(true);
        } else if (!ckPreco.isSelected()) {
            txtPreco.setEnabled(false);
            txtPreco.setBackground(Color.white);
            txtPreco.setText("");
            rbMaiorP.setEnabled(false);
            rbMenorP.setEnabled(false);
            rbIgualP.setEnabled(false);
            if (ckNome.isSelected() && ckQuantidade.isSelected() && ckPreco.isSelected()) {
                btnConfirmar.setEnabled(false);
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_ckPrecoActionPerformed

    private void ckQuantidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckQuantidadeActionPerformed
        if (ckQuantidade.isSelected()) {
            txtQuantidade.setEnabled(true);
            txtQuantidade.setBackground(Color.white);
            btnConfirmar.setEnabled(true);
            rbMaiorQ.setEnabled(true);
            rbMenorQ.setEnabled(true);
            rbIgualQ.setEnabled(true);
        } else if (!ckQuantidade.isSelected()) {
            txtQuantidade.setEnabled(false);
            txtQuantidade.setBackground(Color.lightGray);
            txtQuantidade.setText("");
            rbMaiorQ.setEnabled(false);
            rbMenorQ.setEnabled(false);
            rbIgualQ.setEnabled(false);

            if (ckNome.isSelected() && ckQuantidade.isSelected() && ckPreco.isSelected()) {
                btnConfirmar.setEnabled(false);
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_ckQuantidadeActionPerformed

    private void jLabel6AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jLabel6AncestorAdded
        ImageIcon icon = new ImageIcon("src/ProjetoImagem/tabela.png");
    jLabel6.setIcon(new ImageIcon(icon.getImage().getScaledInstance(jLabel6.getWidth(),jLabel6.getHeight(), icon.getIconWidth()))); // TODO add your handling co// TODO add your handling code here:
    }//GEN-LAST:event_jLabel6AncestorAdded


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JComboBox<String> cbPesquisa;
    private javax.swing.JCheckBox ckNome;
    private javax.swing.JCheckBox ckPreco;
    private javax.swing.JCheckBox ckQuantidade;
    private javax.swing.ButtonGroup grupoDeBotao1;
    private javax.swing.ButtonGroup grupoDeBotao2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rbIgualP;
    private javax.swing.JRadioButton rbIgualQ;
    private javax.swing.JRadioButton rbMaiorP;
    private javax.swing.JRadioButton rbMaiorQ;
    private javax.swing.JRadioButton rbMenorP;
    private javax.swing.JRadioButton rbMenorQ;
    private javax.swing.JTable tblProdutos;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtPreco;
    private javax.swing.JTextField txtQuantidade;
    // End of variables declaration//GEN-END:variables
}
